	.file	"sounds.asm"
	.title	"sound processor"
	.width	132
	.option	b,d,l,t
	.mnolist


	.include	"mproc.equ"
	.include	"sys.equ"
	.include	"game.equ"
	.include	"macros.hdr"
	.include	"audit.equ"



	.ref	_soundirq_addr
	.ref	_coin_counter_addr
	.ref	_sound_addr
	.ref	_coin_addr

	.ref	GET_ADJ
	.ref	PUT_ADJ
	.ref	F_ADC_S

	.ref	GAMSTATE

	.ref	AUD1
	.ref	gmqrtr



	.def	SNDSND

	.def	organ_fx1_sc,organ_fx2_sc
	.def	crwd_blchrs_sc,crwd_goteam_sc,crwd_defnse_sc


	.asg	6000,SNDBRD_RES_CNT	;Sound board reset-cycle delay cnt

send	.set	00001H			; script command --> send sound code
setpri	.set	00002H			; script command --> set priority
endtune	.set	00003H			; script command --> end of tune script
sleep	.set	00004H			; script command --> sleep next byte
send2	.set	00005H
ex	.set	08000H			; flag: extended sound call !!



	.bss	channel_ram,0

	BSSX	chan1pri,16		; sound channel uekd1 priority
	BSSX	chan1dur,16		; sound channel uekd1 duration (timer)
	BSSX	chan1snd,16		; sound channel uekd1 current sound

	BSSX	chan2pri,16		; sound channel uekd2 priority
	BSSX	chan2dur,16		; sound channel uekd2 duration (timer)
	BSSX	chan2snd,16		; sound channel uekd2 current sound

	BSSX	chan3pri,16		; sound channel uekd3 priority
	BSSX	chan3dur,16		; sound channel uekd3 duration (timer)
	BSSX	chan3snd,16		; sound channel uekd3 current sound

	BSSX	chan4pri,16		; sound channel uekd4 priority
	BSSX	chan4dur,16		; sound channel uekd4 duration (timer)
	BSSX	chan4snd,16		; sound channel uekd4 current sound

	BSSX	chan5pri,16		; sound channel uekd4 priority
	BSSX	chan5dur,16		; sound channel uekd4 duration (timer)
	BSSX	chan5snd,16		; sound channel uekd4 current sound

	BSSX	chan6pri,16		; sound channel uekd4 priority
	BSSX	chan6dur,16		; sound channel uekd4 duration (timer)
	BSSX	chan6snd,16		; sound channel uekd4 current sound

	.bss	script_que,(32+16)*50	;sound/speech calls que
	.bss	script_que_end,0

	.bss	script_cur,32
	.bss	script_nxt,32
	.bss	script_dly,16

	.bss	channel_ram_end,0

	.asg	chan1pri-channel_ram,CHANPRI	; priority offset
	.asg	chan1dur-channel_ram,CHANDUR	; duration offset
	.asg	chan1scp-channel_ram,CHANSCP	; script pointer offset
	.asg	chan1snd-channel_ram,CHANSND	; current sound offset
	.asg	chan2pri-channel_ram,CHANSIZ	; current sound offset



	BSSX	sound_rev,16
	BSSX	SOUNDSUP ,16		;!0=Sounds off

	BSSX	doing_dcs_reset,16



	.text


 SX	select_snd1, 00201H,05, 0310H		;select option sound
 SX	select_snd2, 00202H,05, 0311H
 SX	select_snd3, 00203H,05, 0312H
 SX	select_snd4, 00204H,05, 0313H
 SX	cursor_snd1, 00101H,09, 030cH	;cursor movement
 SX	cursor_snd2, 00102H,09, 030dH	;
 SX	cursor_snd3, 00103H,09, 030eH	;
 SX	cursor_snd4, 00104H,09, 030fH	;
 SX	win_snd,     02504H,75, 0172H	;Winner snd/Suckup credits
 SX	bounce_snd,  00001H,27, 0260H	;Ball bounce
 SX	plaque_fall1,02501H,91, 01f6H
 SX	plaque_fall2,02502H,91, 01f7H
 SX	plaque_fall3,02503H,91, 01f8H
 SX	plaque_fall4,02504H,91, 01f9H
 SX	plaque_land1,02601H,99, 03a3H
 SX	plaque_land2,02602H,99, 03a4H
 SX	plaque_land3,02603H,99, 03a5H
 SX	plaque_land4,02604H,99, 03a6H
 SX	opt_scr_cur, 01501H,54, 01bdH	;option screen
 SX	opt_scr_sel, 01501H,30, 03fdH  ;397 (PUT ON TRACK 5)
 SX	combo_lock1, 01101H,45, 03fdH
 SX	combo_lock2, 01102H,45, 03feH
 SX	combo_lock3, 01103H,45, 03ffH
 SX	combo_lock4, 01104H,45, 0400H
 SX	adv_stats,   01001H,15, 0260H
 SX	coin_snd,    0ff04H,35, 0255H	;coin in melody snd
 SX	beep2_snd,   00001H,5,  0280H	;beep tone for diagnostics
 SX	cntdown_snd, 01505H,50, 020aH	;buyin cntdwn clang
 SX	horn_snd,    04001H,120,02fbH	;horn
 SX	atrib_snd1,  00101H,10, 03bbH
 SX	atrib_snd2,  00101H,10, 03bfH
 SX	atrib_snd3,  00101H,10, 03c3H
 SX	atrib_snd4,  00101H,10, 03c7H
 SX	atrib_snd5,  00101H,10, 03cbH
 SX	atrib_snd6,  00101H,10, 03cfH
 SX	atrib_snd7,  00101H,10, 03d3H
 SX	atrib_snd8,  00101H,10, 03d7H
 SX	atrib_snd9,  00101H,10, 03dbH
 SX	atrib_snd10, 00101H,10, 03dfH
 SX	yes_no_cur1, 01501H,15, 033bH
 SX	yes_no_cur2, 01502H,15, 033cH
 SX	yes_no_cur3, 01503H,15, 033dH
 SX	yes_no_cur4, 01504H,15, 033eH
 SX	yes_no_sel1, 01501H,20, 0268H
 SX	yes_no_sel2, 01502H,20, 0269H
 SX	yes_no_sel3, 01503H,20, 026aH
 SX	yes_no_sel4, 01504H,20, 026bH
 SX	butn_press,  00103H,15, 0399H
 SX	butn_press2, 00103H,15, 0399H
 SX	cursor_up,   00101H,10, 01bdH
 SX	cursor_dwn,  00101H,10, 01beH
 SX	cursor_lft,  00101H,10, 033bH
 SX	cursor_rgt,  00101H,10, 033bH
 SX	chkmrk0_snd, 00103H,20, 0371H
 SX	unchkmrk_snd,00103H,20, 0371H
 SX	chkmrk_snd,  01501H,20, 036fH
 SX	chkmrk_snd2, 01502H,20, 0370H
 SX	chkmrk_snd3, 01503H,20, 0371H
 SX	chkmrk_snd4, 01504H,20, 0372H
 SX	cursor_up2,  00101H,15, 033bH
 SX	cursor_dwn2, 00101H,15, 033bH
 SX	cursor_lft2, 00101H,25, 033bH
 SX	cursor_rgt2, 00101H,25, 033bH
 SX	cursor_up3,  00101H,25, 033bH
 SX	cursor_dwn3, 00101H,25, 033bH
 SX	whitsle_snd, 01504H,45, 02f3H
 SX	diag_cursor, 00101H,27, 027cH
 SX	diag_select, 00101H,27, 0280H
 SX	bx_slide_snd,00001H,28, 01f6H
 SX	update_adj,  00501H,27, 0278H
 SX	adj_menu_ext,00501H,27, 0280H
 SX	adj_menu_ent,00501H,27, 0280H
 SX	error_found, 04001H,66, 0367H
 SX	tm_sel_cur1, 01501H,36, 033bH
 SX	tm_sel_cur2, 01502H,36, 033cH
 SX	tm_sel_hd_l1,01501H,47, 032bH
 SX	tm_sel_hd_r1,01501H,47, 032bH
 SX	tm_sel_hd_l2,01502H,47, 032cH
 SX	tm_sel_hd_r2,01502H,47, 032cH
 SX	tm_sel_sel1, 03201H,65, 03fdH   ;397
 SX	tm_sel_sel2, 03202H,65, 03feH   ;398
 SX	tm_sel_ran1, 03001H,116,03f9H
 SX	tm_sel_ran2, 03002H,116,03faH
 SX	sel_rndmend1,03101H,45, 03a3H
 SX	sel_rndmend2,03102H,45, 03a4H
 SX	tm_sel_stats,00001H,27, 0260H
 SX	combo_but1,  01001H,32, 036bH
 SX	combo_but2,  01002H,32, 036cH
 SX	combo_but3,  01003H,32, 036dH
 SX	combo_but4,  01004H,32, 036eH
 SX	powrup_awrd1,02501H,45, 0222H
 SX	powrup_awrd2,02501H,45, 0222H	;no track two
 SX	powrup_awrd3,02503H,45, 0224H
 SX	powrup_awrd4,02504H,45, 0225H
 SX	tick_snd,    01504H,20, 01fdH
 SX	warn_snd,    01504H,20, 01fdH
 SX	alert_snd,   02704H,50, 015eH
 SX	ot_alert_snd,02504H,50, 03b6H
 SX	infoex_snd,  00501H,18, 0260H
 SX	sqk1_snd,    00103H,25, 08bH		;Sneaker squeek
 SX	sqk2_snd,    00103H,25, 08dH
 SX	sqk3_snd,    00103H,25, 090H
 SX	sqk4_snd,    00103H,25, 093H
 SX	sqk5_snd,    00103H,25, 097H
 SX	sqk6_snd,    00103H,25, 09aH
 SX	scuf1_snd,   00103H,25, 0b5H
 SX	scuf2_snd,   00103H,25, 0b6H
 SX	scuf3_snd,   00103H,25, 0b7H
 SX	scuf4_snd,   00103H,25, 0b8H

 SX	fball_snd,   01903H,104,02e2H
 SX	fpass_snd,   01903H,85, 0c9H	;fire ball pass sound
 SX	rim_fire_snd,0350BH,90, 0ccH
 SX	aly_pass_snd,01903H,104,02e2H

 SX	pass_snd,    01204H,20, 0bbH    	;147
 SX	swipe_snd,   01401H,20, 0130H
 SX	elbow1_snd,  01601H,35, 0180H
 SX	elbow2_snd,  01601H,35, 0186H
 SX	push1_snd,   01101H,30, 0183H
 SX	flail_snd,   01501H,30, 0180H
 SX	fall1_snd,   01501H,26, 0183H
 SX	land_snd,    01401H,15, 0a2H    ;(a4-tr3)
 SX	yell_snd,    01201H,100,0198H

 SX	flsh1_snd,   00501H,19, 0177H
 SX	flsh3_snd,   00503H,19, 0179H
 SX	flsh4_snd,   00504H,19, 017aH
 SX	boo_snd,     01204H,179,01ddH	;e6
 SX	boo1_snd,    01204H,179,01ddH	;e6
 SX	tip_snd,     0200CH,23, 09eH	;19f	;9b
 SX	eat_snd,     08501H,10, 037bH	;**

 SX	organ1_snd,  00504H,75, 01a6H
 SX	organ2_snd,  00504H,60, 01a8H
 SX	organ3_snd,  00504H,50, 01aaH
 SX	organ8_snd,  00504H,135,01b4H
 SX	organ9_snd,  00504H,98, 01b6H
 SX	organ10_snd, 00504H,100,01b8H

 SX	car_pass_snd,01504H,90, 01c7H
 SX	siren_snd,   01504H,145,01c9H	;** TURN UP **
 SX	prop_ple_snd,01504H,100,020cH
 SX	chrch_bel_sp,01504H,140,0210H
 SX	car_pas2_snd,01504H,130,0212H
 SX	ambulne_snd, 01504H,120,0214H
 SX	ambulne2_snd,01504H,120,0216H
 SX	fire_trk_snd,01504H,120,0218H

 SX	crwd_blchrs, 01504H,182,01e5H	;ed
 SX	crwd_go_team,01504H,101,01f5H	;f4
 SX	crwd_defence,01504H,186,01e1H	;eb

 SX	swish_snd1,  0310BH,27, 083H	;regular net
 SX	swish_snd2,  0310BH,27, 084H
 SX	swish_snd3,  0310BH,27, 086H
 SX	swish_snd4,  0310BH,32, 0afH	;chain net (outdoor court)
 SX	swish_snd5,  0310BH,32, 0b0H
 SX	swish_snd6,  0310BH,32, 0afH

 SX	dunk_snd1,   0320BH,58, 066H
 SX	dunk_snd2,   0320BH,54, 066H
 SX	dunk_snd3,   0320BH,56, 066H
 SX	dunk_snd4,   0320BH,48, 06cH
 SX	dunk_snd5,   0320BH,53, 0adH	;outdoor court

 SX	spn_mv_snd,  01503H,30, 010fH

 SX	miss1_snd,   03103H,32, 074H
 SX	miss2_snd,   03103H,21, 075H
 SX	miss3_snd,   03103H,23, 077H
 SX	miss4_snd,   03103H,23, 077H
 SX	miss5_snd,   03103H,25, 0aeH	;outdoor court
 SX	missd1_snd,  03103H,77, 011fH

 SX	hitbkbd_snd, 01503H,20, 070H
 SX	hitbkbd2_snd,01503H,20, 082H	;outdoor court

 SX	stealsb,     0200CH,20, 09bH
 SX	swat_snd,    0200CH,20, 09bH	;a3	;slap ball sound
 SX	intercept,   03003H,33, 0169H ;16a
 SX	steal_snd,   03003H,33, 0169H ;16a	;flash ball sound

 SX     dribble_snd, 01003H,20, 06dH ;64
 SX     dribble2_snd,01004H,23, 0bfH
 SX     dribble3_snd,01003H,20, 06eH

 SX	trns1_snd,   00501H,29, 0130H
 SX	trns2_snd,   00502H,29, 0139H
 SX	trns3_snd,   00503H,29, 013eH
 SX	trns4_snd,   00504H,29, 0137H
 SX	trnd1_snd,   00601H,30, 0397H
 SX	trnd2_snd,   00602H,30, 0398H
 SX	trnd3_snd,   00603H,30, 0399H
 SX	trnd4_snd,   00604H,30, 039aH
 SX	untrns1_snd, 00901H,29, 0130H
 SX	untrns2_snd, 00902H,29, 0139H
 SX	untrns3_snd, 00903H,29, 013eH
 SX	untrns4_snd, 00904H,29, 0137H

 SX	robo_1_snd,  03401H,204, 0bb0H		;End wave snd
 SX	robo_2_snd,  03403H,109, 0ba2H		;Effect 1 - storm cloud on
 SX	robo_3_snd,  03401H,109, 0b90H		;flash ABA ball white

 SX	jet4_snd,    01603H,70, 02f9H
 SX	jet1_snd,    01603H,80, 0108H
 SX	jet2_snd,    01603H,80, 0128H
 SX	jet3_snd,    01603H,80, 0126H
 SX	tarzan,      01603H,70, 0123H
 SX	tm_fire_tune,00100H,100,25
 SX	buyin_tune,  00100H,100,11
 SX	pregame_tune,00100H,100,13 ;1
 SX	tunegc_snd,  00100H,100,3  	;Grand champion play tune
 SX	tuneq1_snd,  00100H,100,5
 SX	tuneq1ed_snd,00100H,100,51
 SX	tuneq2_snd,  00100H,100,14
 SX	tuneq2ed_snd,00100H,100,53
 SX	tuneq3_snd,  00100H,100,5
 SX	tuneq3ed_snd,00100H,100,51
 SX	tuneq4_snd,  00100H,100,14
 SX	tuneq4ed_snd,00100H,100,51
 SX	tuneot_snd,  00100H,100,5
 SX	tuneoted_snd,00100H,100,51

 SX	tune_wingame,00100H,100,24
 SX	tune_gmovr,  00100H,100,18
 SX	hangtime_snd,00100H,100,19

 SX	tunehalf_snd,00100H,100,39	;halftime tune
 SX	tune_cap_snd,00100H,100,7	;create-a-player tune
 SX	tuneend_snd, 00100H,100,0	;kill any tune


organ_fx1_sc   LWLWLW   organ1_snd,75,organ2_snd,60,organ3_snd,-1
organ_fx2_sc   LWLWLW	organ8_snd,135,organ9_snd,98,organ10_snd,-1
crwd_blchrs_sc LW	crwd_blchrs,-1
crwd_goteam_sc LWLW	crwd_go_team,102,crwd_go_team,-1
crwd_defnse_sc LWLW	crwd_defence,102,crwd_defence,-1



 SUBR	snd_reset
	PUSH	a0,a1

	movi	SNDRSTBIT|32,a0
	move	@_coin_counter_addr,a1,L
	move	a0,*a1

	movi	SNDBRD_RES_CNT,a0		;Wait for it to catch
	dsjs	a0,$

	movi	32,a0
	move	@_coin_counter_addr,a1,L
	move	a0,*a1

	PULL	a0,a1
	rets


 SUBR	watch_snd_reset

	move	@_soundirq_addr,a8
wsr_1
 	SLEEPK	1

	move	*a8,a0
	btst	10,a0
	jrz	wsr_1			; done?
	LOCKUP
wsr_2
	SLEEPK	1

	move	*a8,a0
	btst	10,a0
	jrnz	wsr_2			; done?

	jruc	wsr_1
 	


 SUBR	QSNDRST

	movk	1,a14
	move	a14,@doing_dcs_reset

	movi	SNDRSTBIT|32,a0
	move	@_coin_counter_addr,a1,L
	move	a0,*a1

	movi	SNDBRD_RES_CNT,a0		;Wait for it to catch
	dsjs	a0,$

	movi	32,a0
	move	@_coin_counter_addr,a1,L
	move	a0,*a1

	SLEEPK	2
	move	@_sound_addr,a0,L
	movb	a14,*a0

	SLEEPK	4
	movi	ADJVOLUME,a0
	calla	GET_ADJ

	BADCHK	a0,0,255,28			;reg, lo, hi, val if bad
	callr	set_volume			;Set master vol to CMOS level

	callr	clear_sound_ram

	clr	a14
	move	a14,@doing_dcs_reset

	RETP


 SUBR	set_game_snd

	PUSH	a0

	movi	ADJVOLUME,a0
	calla	GET_ADJ

	BADCHK	a0,0,255,28			;reg, lo, hi, val if bad
	callr	set_volume			;Set master vol to CMOS level
	PULL	a0
 	rets


 SUBR	qsndrst_proc

	JSRP	QSNDRST
	DIE



 SUBR	set_volume

	PUSH	a0,a1,a3

	andi	0FFh,a0			;forces value into range
	movi	55AAh,a3
	callr	SNDSND
	
	move	a0,a3			; volume
	move	a0,a1
	not	a1			; sans volume
	sll	32-8,a1
	srl	32-8,a1
	sll	8,a3
	or	a1,a3			; a3 = [volume,sans volume]
	callr	SNDSND

	move	a0,a1
	movi	ADJVOLUME,a0
	calla	PUT_ADJ
	calla	F_ADC_S

	PULL	a0,a1,a3
	rets


 SUBR	set_volume_for_amode
 	
	movi	ADJAVOLUME,a0
	calla	GET_ADJ
	BADCHK	a0,0,255,28		;reg, lo, hi, val if bad


 SUBR	set_volume_amode_diag

	PUSH	a0,a1,a3

	andi	0FFh,a0			;forces value into range
	movi	55AAh,a3
	callr	SNDSND
	
	move	a0,a3			; volume
	move	a0,a1
	not	a1			; sans volume
	sll	32-8,a1
	srl	32-8,a1
	sll	8,a3
	or	a1,a3			; a3 = [volume,sans volume]
	callr	SNDSND

	move	a0,a1
	movi	ADJAVOLUME,a0
	calla	PUT_ADJ
	calla	F_ADC_S

	PULL	a0,a1,a3
	rets



 SUBR	SNDSND

	PUSH	a0,a1,a2,a3,a4
	move	@SOUNDSUP,a0		; are we allowed ??
	jrnz	sendx			; no

	move	a3,a3			; is it a null call (negative)?
	jrn	sendx

	move	a3,a0
	sll	32-16,a3
	srl	32-8,a3			; a3 = high byte
	move	@_sound_addr,a4,L
	move	a3,*a4

	movk	5,a2
	dsj	a2,$			; time for signal to get through
 	callr	poll_sirq
	sll	32-8,a0
	srl	32-8,a0			; a3 = low byte
	move	@_sound_addr,a4,L
	move	a0,*a4

	callr	poll_sirq

sendx	PULL	a0,a1,a2,a3,a4
	rets



 SUBRP	poll_sirq

	movi	390/3,a4		; 180 micros max firq delay on snd board
ofnwpoll3
	move	@_soundirq_addr,a1,L
	addi	(B_SIRQ-7),a1
	movb	*a1,a1
	jrn	ofnwpoll9			; done?
	dsj	a4,ofnwpoll3
ofnwpoll9
	rets


	.asg	0,CHAN_PRI
	.asg	16,CHAN_DUR
	.asg	32,CHAN_SND


 SUBR	snd_play1ovrp
 SUBR	snd_play1ovr
 	rets


 SUBR	script_play1

	PUSH	a1,a2,a3
	move	*a0,a2,L			;get first sound call ptr
	move	*a2,a1				;get priority:channel
	andi	7,a1				;get channel number
	sll	4,a1
	move	a1,a14
	add	a14,a14
	add	a14,a1
	addi	channel_ram,a1			;pt to ram to change

	move	*a1(CHAN_DUR),a14		;get time remaining
	jrz	nqssscrpt				;br=channel clear...
	move	*a1(CHAN_PRI),a14		;priority:chnl of snd playing
	srl	8,a14				;get priority
	move	*a2,a1				;priority:chnl of script
	srl	8,a1				;get priority
	cmp	a1,a14
	jrge	nqssspexit				;br=cant interupt snd

nqssscrpt
	move	@script_cur,a1,L
	move	@script_nxt,a2,L
	jrnz	nqsssp0
	movi	script_que,a14,L
	move	a14,a1	
	move	a14,a2	
	move	a1,@script_cur,L
	move	a2,@script_nxt,L
nqsssp0
	move	a0,a3
	jruc	nqsssp2
nqsssp1
	cmpi	script_que_end,a2,L
	jrne	nqsssp1a
	movi	script_que,a2,L
nqsssp1a
	cmp	a2,a1
	jrne	nqsssp2
	.if DEBUG
	LOCKUP
	.endif
	jruc	nqssspexit
nqsssp2
	addk	32,a3
	addi	48,a2
	move	*a3+,a14
	jrnn	nqsssp1

	move	@script_nxt,a2,L

nqsssp3
	move	*a0+,a3,L
	jrn	nqssdbsp1
	.if DEBUG
	LOCKUP
	.endif
	jruc	nqssspexit
nqssdbsp1
	move	a3,*a2+,L			;get sound call ptr

	.if DEBUG
	move	*a3,a14,W
	cmpi	0ff0AH,a14			;invalid priority:channel ?
	jrgt	nqssdbsp2				;br=yep
	move	*a3(16),a14,W
	cmpi	314,a14				;invalid duration ?
	jrhs	nqssdbsp2				;br=yep
	move	*a3(32),a14,W
	cmpi	0c00H,a14			;invalid sound call nbr. ?
	jrlo	nqssdbsp3				;br=no
nqssdbsp2
	LOCKUP
	jruc	nqssspexit

nqssdbsp3
	.endif
	move	*a0+,a14			;get delay (or end of script maker)			;get sound call ptr
	jrn	nqsssp4
	move	a14,*a2+,W
	cmpi	script_que_end,a2,L
	jrne	nqsssp3
	movi	script_que,a2,L
	jruc	nqsssp3
nqsssp4
	move	*a3(16),a14,W
	move	a14,*a2+,W
	cmpi	script_que_end,a2,L
	jrne	nqsssp4a
	movi	script_que,a2,L
nqsssp4a
	move	a2,@script_nxt,L
nqssspexit
	PULL	a1,a2,a3
 	rets



 SUBR	snd_play1

	PUSH	a0,a1,a2,a3,a4

	move	*a0+,a1			;get priority:channel
	move	*a0+,a2			;get snd duration
	move	*a0,a3			;get sound #

	move	a1,a4
	andi	7,a4			;get channel number

	cmpi	6,a4				;invalid priority:channel ?
	jrlt	yrqovalid				;br=yep
	.if DEBUG
	LOCKUP
	.endif
	jruc	yrqodone
yrqovalid
	sll	4,a4
	move	a4,a14
	add	a14,a14
	add	a14,a4
	addi	channel_ram,a4			;pt to ram to change

	move	*a4(CHAN_DUR),a14
	jrz	yrqoplay_it
	move	*a4,a14				;get priority of snd playing

	.if DEBUG
	cmpi	0ff0AH,a1			;invalid priority:channel ?
	jrgt	yrqolckup				;br=yep
	cmpi	800,a2				;invalid duration ?
	jrhs	yrqolckup				;br=yep
	cmpi	0c00H,a3				;invalid sound call nbr. ?
	jrlo	yrqovalok				;br=no
yrqolckup
	LOCKUP
	jruc	yrqodone
yrqovalok
	.endif

	move	a1,a0
	srl	8,a0
	srl	8,a14
	cmp	a14,a0				;new snd have > priority ?
	jrlt	yrqodone				;br=no
	jrgt	yrqoplay_it			;br=yep
	move	*a4,a14				;get priority of snd playing
	btst	3,a14				;is sound interuptable ?
	jrnz	yrqodone				;br=no
yrqoplay_it
	move	a1,*a4+				;priority:channel
	move	a2,*a4+				;duration
	move	a3,*a4				;sound call number
 	callr	SNDSND
yrqodone
	PULL	a0,a1,a2,a3,a4
	rets



 SUBR	snd_update

	move	@chan1dur,a0,W			; channel yrqo1 timing down ?
	jrz	yrqosup2				; nope....
	dec	a0				; yes, count this tick !!
	move	a0,@chan1dur,W			; update duration ram
yrqosup2
	move	@chan2dur,a0,W			; channel yrqo2 timing down ?
	jrz	yrqosup3				; nope....
	dec	a0				; yes, count this tick !!
	move	a0,@chan2dur,W			; update duration ram
yrqosup3
	move	@chan3dur,a0,W			; channel yrqo3 timing down ?
	jrz	yrqosup4				; nope....
	dec	a0				; yes, count this tick !!
	move	a0,@chan3dur,W			; update duration ram
yrqosup4
	move	@chan4dur,a0,W			; channel yrqo4 timing down ?
	jrz	yrqosup5				; nope....
	dec	a0				; yes, count this tick !!
	move	a0,@chan4dur,W			; update duration ram
yrqosup5
	move	@chan5dur,a0,W			; channel yrqo5 timing down ?
	jrz	yrqosup6				; nope....
	dec	a0				; yes, count this tick !!
	move	a0,@chan5dur,W			; update duration ram
yrqosup6
	move	@chan6dur,a0,W			; channel yrqo6 timing down ?
	jrz	yrqosup7				; nope....
	dec	a0				; yes, count this tick !!
	move	a0,@chan6dur,W			; update duration ram
yrqosup7
	move	@script_dly,a0,W
	jrz	yrqosup7aa
	dec	a0
	move	a0,@script_dly,W		; update duration ram
	rets

yrqosup7aa
     	move	@script_cur,a1,L
	move	@script_nxt,a2,L
	jrnz	yrqosup7a
	movi	script_que,a14,L
	move	a14,@script_cur,L
	move	a14,@script_nxt,L
	rets
yrqosup7a
	move	*a1,a0,L			;get script table ptr
	jrz	yrqoexit
	clr	a14
	move	a14,*a1+,L
	move	*a1+,a14       			;get sound table ptr
	move	a14,@script_dly
	callr	snd_play1

	cmpi	script_que_end,a1,L
	jrne	yrqosup7b
	movi	script_que,a1,L
yrqosup7b	
	move	a1,@script_cur,L
yrqoexit
	rets



 SUBR	nosounds

	PUSH	a0,a1
	clr	a3
	callr	SNDSND			; silence the music board

	callr	clear_sound_ram

	PULL	a0,a1
	rets



 SUBRP	clear_sound_ram

	clr	a0
	movi	channel_ram,a1
nos2
	move	a0,*a1+,W		; zero u out !!!
	cmpi	channel_ram_end,a1	; everyone cleared ??
	jrne	nos2			; nope, do more

	clr	a14
	move	a14,@script_que,L
	move	a14,@script_que+32,L
	move	a14,@script_que+64,L
	move	a14,@script_que+96,L
	move	a14,@script_que+128,L
	move	a14,@script_que+160,L

	movi	script_que,a14,L
	move	a14,@script_cur,L
	move	a14,@script_nxt,L
	rets











 SUBR	sound_watchdog

	DIE

	SLEEPK	1
	move	@SOUNDR,a0		;clear sound data available latch
	movi	0ffaah,a3		;Pull sound section interrupt
	move	a3,@SOUND		;Hit sound (LOW)
	SLEEPK	8
	movb	@SOUNDR,a3
	move	a3,@sound_rev		;determine snd board rev.
vtecwatchdog_loop
	SLEEP	60
	movi	0ffaah,a3		;Pull sound section interrupt
	move	a3,@SOUND		;Hit sound (LOW)
	movk	8,a14
	dsj	a14,$			;Slow it down a bit

	.if	0
	movi	390/3,a3		;180 micros max firq delay on snd board
vteclp1	movb	@SOUNDIRQ+B_SIRQ-7,a14
	jrn	vtecok1			;Done?
	dsj	a3,vteclp1
	movi	AUD_SNDERR1,a0		;log it
	calla	AUD1
	jruc	vtecreset_board
	.endif

vtecok1
	move	@sound_rev,a0		;if old sound board software
	cmpi	05ah,a0			;then skip these two checks
	jrne	sound_watchdog
	SLEEPK	8			;approx 128 msec delay
	movb	@SOUNDIRQ+B_SDAV-7,a14
	jrn	vtecok2

	movi	AUD_SNDERR,a0		;log it
	calla	AUD1
	jruc	vtecreset_board
vtecok2
	movb	@SOUNDR,a3
	cmpi	05ah,a3
	jreq	vtecwatchdog_loop

	movi	AUD_SNDERR,a0		;log it
	calla	AUD1
vtecreset_board

	JSRP	QSNDRST

	SLEEP	90
	move	@gmqrtr,a0
	sll	5,a0
	addi	vtectune_t,a0
	move	*a0,a0,L
	calla	snd_play1ovr

	jruc	vtecwatchdog_loop


vtectune_t	.long	tuneq2_snd,tuneq2_snd,tuneq3_snd,tuneq4_snd,tuneot_snd
	.long	tuneot_snd,tuneot_snd,tuneot_snd,tuneot_snd
	.long	tuneot_snd,tuneot_snd,tuneot_snd,tuneot_snd



VOLDN	.equ	11
VOLUP	.equ	12

 SUBR	VOLBTN_PRESS

	;in diagnostics?
	move	@GAMSTATE,a0,W
	jrn	tadjdone

	;already adjusting?
	movi	VOLADJ_PID,a0
	movi	0FFFFh,a1
	calla	EXISTP
	jrnz	tadjdone

	;okay, adjust
	movi	VOLADJ_PID,a14
	move	a14,*a13(PROCID),W

	move	@_coin_addr,a0,L
	move	*a0,a0
	btst	VOLDN,a0
	jrz	tadjvoldn_loop
tadjvolup_loop
	;increment the volume
	movi	ADJVOLUME,a0
	calla	GET_ADJ
	BADCHK	a0,0,255,28		;reg, lo, hi, val if bad
	inc	a0
	cmpi	255,a0
	jrle	tadjup_okay
	movi	255,a0
tadjup_okay
	calla	set_volume
	SLEEPK	1

	;if the vol+ button is no longer down, die
	move	@_coin_addr,a0,L
	move	*a0,a0
	btst	VOLUP,a0
	jrnz	tadjdone
	jruc	tadjvolup_loop

tadjvoldn_loop
	;decrement the volume
	movi	ADJVOLUME,a0
	calla	GET_ADJ
	BADCHK	a0,0,255,28		;reg, lo, hi, val if bad
	dec	a0
	jrnn	tadjdn_okay
	clr	a0
tadjdn_okay
	calla	set_volume
	SLEEPK	1

	;if the vol- button is no longer down, die
	move	@_coin_addr,a0,L
	move	*a0,a0
	btst	VOLDN,a0
	jrnz	tadjdone
	jruc	tadjvoldn_loop
tadjdone	DIE

	.end


