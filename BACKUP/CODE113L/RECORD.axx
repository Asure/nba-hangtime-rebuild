
	.file	"record.asm"
	.title	"CMOS records etc"
	.width	132
	.option	b,d,l,t
	.mnolist


	.include	"mproc.equ"
	.include	"disp.equ"
	.include	"sys.equ"
	.include	"gsp.equ"
	.include	"game.equ"
	.include	"world.equ"
	.include	"audit.equ"
	.include	"link.equ"
	.include	"macros.hdr"
	.include	"imgtbl.glo"
	.include	"bgndtbl.glo"


	.global	sort_wins
	.global	save_record
	.global	save_player_records

	.global	get_player_record,get_free_record,put_plr_record
	.global	find_record

	.global	show_player_records
	.global	clear_player_records

	.global	message_palette
	.global	mess_space_width
	.global	print_string,print_string2
	.global	print_string_C,print_string_C2
	.global	message_ascii
	.global	mess_spacing
	.global	mess_objid
	.global	mess_cursx,mess_cursy
	.global	setup_message
	.global	message_buffer
	.global	get_initials_string
	.global	dec_to_asc,dec_to_pct,dec_to_asc2
	.global	copy_string,copy_rom_string
	.global	concat_string,concat_rom_string
	.global	print_string_R,print_string_R2
	.global	get_name_string
	.global	player_stats
	.global	hiscore_type


	.ref	pal_getf
	.ref	morf_pal
	.ref	morfpal1,morfpal2
	.ref	morfpal3,morfpal4
	.ref	morfpal5,morfpal6
	.ref	morfpal7,morfpal8
	.ref	morfpal9,morfpal10
	.ref	morfpal11
	.ref	create_title_bar
	.ref	create_hi_score_page_objs

	.ref	bast18_ascii,brush20_ascii
	.ref	bast8t_ascii,bast8_ascii
	.ref	brush50_ascii

	.ref	CYCLE_TABLE,bounce_snd

	.ref	get_teams_pop,sorted_teams
	.ref	BAKMODS
	.ref	BGND_UD1
	.ref	SET_PAGE
	.ref	WC_BYTE,RC_BYTE
	.ref	WC_BYTEI,RC_BYTEI
	.ref	WC_WORD,RC_WORD
	.ref	WC_WORDI,RC_WORD
	.ref	WC_LONG,RC_LONG
	.ref	WC_LONGI,RC_LONG

	.ref	dpageflip
	.ref	IRQSKYE
	.ref	KILBGND
	.ref	get_all_buttons_cur
	.ref	get_all_buttons_cur2

	.ref	get_all_sticks_down2
	.ref	get_all_buttons_cur2

	.ref	WIPEOUT
	.ref	CLR_SCRN
	.ref	COLRTEMP
	.ref	obj_del1c
	.ref	get_all_sticks_down
	.ref	get_all_sticks_cur,get_all_sticks_cur2

	.ref	team1,team2
	.ref	PSTATUS,PSTATUS2
	.ref	scores
	.ref	SOUNDSUP
	.ref	mess_line_spacing
	.ref	clear_buffers
	.ref	rndrng0
	.ref	win_snd,GAINED_TXT


	.asg	4,REC_MINGAMES		;Min # games req'd for high scores
NAME1		equ	0h
NAME2		equ	8h
NAME3		equ	10h
NAME4		equ	18h
NAME5		equ	20h
NAME6		equ	28h
PIN1		equ	30h
PIN2		equ	38h
PIN3		equ	40h
PIN4		equ	48h
GAMPLYD		equ	50h
WINS		equ	60h
WINSTRK		equ	70h
TMSDEF		equ	80h


_30BITS		equ	0111111111111111111111111111111b
_27BITS		equ	0111111111111111111111111111b
_16BITS		equ	01111111111111111b
_11BITS		equ	011111111111b
_10BITS		equ	01111111111b
_8BITS		equ	011111111b
_7BITS		equ	001111111b
_6BITS		equ	000111111b
_5BITS		equ	000011111b
_4BITS		equ	000001111b
_1BIT		equ	000000001b

_ATL	equ 0
_BOS	equ 1
_CHA	equ 2
_CHI	equ 3
_CLE	equ 4
_DAL	equ 5
_DEN	equ 6
_DET	equ 7
_GOL	equ 8
_HOU	equ 9
_IND	equ 10
_LAC	equ 11
_LAL	equ 12
_MI	equ 13
_MIL	equ 14
_MIN	equ 15
_NJ	equ 16
_NY	equ 17
_ORL	equ 18
_PHI	equ 19
_PHX	equ 20
_POR	equ 21
_SAC	equ 22
_SAN	equ 23
_SEA	equ 24
_TOR	equ 25	;toronto
_UTA	equ 26
_VAN	equ 27	;vancouver
_WAS	equ 28


HISCORE_TABLES	equ	9


TEAM_RECORD_ORIGIN  equ   RECORD_ORIGIN+(NUM_PRECORDS*(PKDPR_SIZE*2))+16
WORLD_REC_ORIGIN   equ   TEAM_RECORD_ORIGIN+(NUM_TM_RECORDS*(PKDTR_SIZE*2))+16



	BSSX	player1_data,	PR_SIZE
	BSSX	player2_data,	PR_SIZE
	BSSX	player3_data,	PR_SIZE
	BSSX	player4_data,	PR_SIZE
	.if DRONES_2MORE
	BSSX	player5_data,	PR_SIZE		;always a drone
	BSSX	player6_data,	PR_SIZE		;always a drone
	.endif

	BSSX	kp_p1_crtplr,	16
	BSSX	kp_p1_name1,	16
	BSSX	kp_p1_name2,	16
	BSSX	kp_p1_name3,	16
	BSSX	kp_p1_name4,	16
	BSSX	kp_p1_name5,	16
	BSSX	kp_p1_name6,	16
	BSSX	kp_p1_hdnbr,	16

	BSSX	kp_p2_crtplr,	16
	BSSX	kp_p2_name1,	16
	BSSX	kp_p2_name2,	16
	BSSX	kp_p2_name3,	16
	BSSX	kp_p2_name4,	16
	BSSX	kp_p2_name5,	16
	BSSX	kp_p2_name6,	16
	BSSX	kp_p2_hdnbr,	16

	BSSX	kp_p3_crtplr,	16
	BSSX	kp_p3_name1,	16
	BSSX	kp_p3_name2,	16
	BSSX	kp_p3_name3,	16
	BSSX	kp_p3_name4,	16
	BSSX	kp_p3_name5,	16
	BSSX	kp_p3_name6,	16
	BSSX	kp_p3_hdnbr,	16

	BSSX	kp_p4_crtplr,	16
	BSSX	kp_p4_name1,	16
	BSSX	kp_p4_name2,	16
	BSSX	kp_p4_name3,	16
	BSSX	kp_p4_name4,	16
	BSSX	kp_p4_name5,	16
	BSSX	kp_p4_name6,	16
	BSSX	kp_p4_hdnbr,	16


	.bss	temp_record,	PR_SIZE
	.bss	packed_record,	((PKDPR_SIZE+15)/16)*16+32
				;word align & pad 32 bits at end

	.bss	player_stats,	PS_SIZE*10h*4

	.bss	packed_tm_record,  ((PKDTR_SIZE+15)/16)*16+32
					;word align & pad 32 bits at end

	.bss	tm_stat_ram,	TR_SIZE
	

	.bss	record_sort_ptrs,	32*NUM_PRECORDS

record_sort_ram	equ	SCRATCH+8*256*1024


	.bss	hiscore_type,	16


	.bss	packed_wrld_record,  ((PKDWR_SIZE+15)/16)*16+32 ;word align & pad 32 bits
	.bss	wrld_recrd_ram,	WR_SIZE
	.bss	hiscore_cnt,16			;nbr of lines of data on screen

	.text


	.asg	0,NAME1A
	.asg	8,NAME2A
	.asg	16,NAME3A
	.asg	24,NAME4A
	.asg	32,NAME5A
	.asg	40,NAME6A
	.asg	48,PIN1A
	.asg	56,PIN2A
	.asg	64,PIN3A
	.asg	72,PIN4A
	.asg	80,WINSTREAK
	.asg	96,NAME1B
	.asg	104,NAME2B
	.asg	112,NAME3B
	.asg	120,NAME4B
	.asg	128,NAME5B
	.asg	136,NAME6B
	.asg	144,PIN1B
	.asg	152,PIN2B
	.asg   	160,PIN3B
	.asg	168,PIN4B
	.asg	176,PTS_IN_GAME
	.asg	192,NAME1C
	.asg	200,NAME2C
	.asg	208,NAME3C
	.asg	216,NAME4C
	.asg	224,NAME5C
	.asg	232,NAME6C
	.asg	240,PIN1C
	.asg	248,PIN2C
	.asg	256,PIN3C
	.asg	264,PIN4C
	.asg	272,REBNDS
	.asg	288,NAME1D
	.asg	296,NAME2D
	.asg	304,NAME3D
	.asg	312,NAME4D
	.asg	320,NAME5D
	.asg	328,NAME6D
	.asg	336,PIN1D
	.asg	344,PIN2D
	.asg	352,PIN3D
	.asg	360,PIN4D
	.asg	368,ASSISTS

 SUBR	reset_world_records

	movi	default_wrld_records,a9,L
	
	movb	*a9(NAME1A),a0
	subi	'@',a0
	move	a0,@wrld_recrd_ram+WR_NAME1A
	movb	*a9(NAME2A),a0
	subi	'@',a0
	move	a0,@wrld_recrd_ram+WR_NAME2A
	movb	*a9(NAME3A),a0
	subi	'@',a0
	move	a0,@wrld_recrd_ram+WR_NAME3A
	movb	*a9(NAME4A),a0
	subi	'@',a0
	move	a0,@wrld_recrd_ram+WR_NAME4A
	movb	*a9(NAME5A),a0
	subi	'@',a0
	move	a0,@wrld_recrd_ram+WR_NAME5A
	movb	*a9(NAME6A),a0
	subi	'@',a0
	move	a0,@wrld_recrd_ram+WR_NAME6A
	movb	*a9(PIN1A),a0
	subi	'0',a0
	move	a0,@wrld_recrd_ram+WR_PIN1A
	movb	*a9(PIN2A),a0
	subi	'0',a0
	move	a0,@wrld_recrd_ram+WR_PIN2A
	movb	*a9(PIN3A),a0
	subi	'0',a0
	move	a0,@wrld_recrd_ram+WR_PIN3A
	movb	*a9(PIN4A),a0
	subi	'0',a0
	move	a0,@wrld_recrd_ram+WR_PIN4A
	move	*a9(WINSTREAK),a0
	move	a0,@wrld_recrd_ram+WR_WINSTREAK

	movb	*a9(NAME1B),a0
	subi	'@',a0
	move	a0,@wrld_recrd_ram+WR_NAME1B
	movb	*a9(NAME2B),a0
	subi	'@',a0
	move	a0,@wrld_recrd_ram+WR_NAME2B
	movb	*a9(NAME3B),a0
	subi	'@',a0
	move	a0,@wrld_recrd_ram+WR_NAME3B
	movb	*a9(NAME4B),a0
	subi	'@',a0
	move	a0,@wrld_recrd_ram+WR_NAME4B
	movb	*a9(NAME5B),a0
	subi	'@',a0	 
	move	a0,@wrld_recrd_ram+WR_NAME5B
	movb	*a9(NAME6B),a0
	subi	'@',a0
	move	a0,@wrld_recrd_ram+WR_NAME6B
	movb	*a9(PIN1B),a0
	subi	'0',a0
	move	a0,@wrld_recrd_ram+WR_PIN1B
	movb	*a9(PIN2B),a0
	subi	'0',a0
	move	a0,@wrld_recrd_ram+WR_PIN2B
	movb	*a9(PIN3B),a0
	subi	'0',a0
	move	a0,@wrld_recrd_ram+WR_PIN3B
	movb	*a9(PIN4B),a0
	subi	'0',a0
	move	a0,@wrld_recrd_ram+WR_PIN4B
	move	*a9(PTS_IN_GAME),a0
	move	a0,@wrld_recrd_ram+WR_PTS_IN_GAME

	movb	*a9(NAME1C),a0
	subi	'@',a0
	move	a0,@wrld_recrd_ram+WR_NAME1C
	movb	*a9(NAME2C),a0
	subi	'@',a0
	move	a0,@wrld_recrd_ram+WR_NAME2C
	movb	*a9(NAME3C),a0
	subi	'@',a0
	move	a0,@wrld_recrd_ram+WR_NAME3C
	movb	*a9(NAME4C),a0
	subi	'@',a0
	move	a0,@wrld_recrd_ram+WR_NAME4C
	movb	*a9(NAME5C),a0
	subi	'@',a0
	move	a0,@wrld_recrd_ram+WR_NAME5C
	movb	*a9(NAME6C),a0
	subi	'@',a0
	move	a0,@wrld_recrd_ram+WR_NAME6C
	movb	*a9(PIN1C),a0
	subi	'0',a0
	move	a0,@wrld_recrd_ram+WR_PIN1C
	movb	*a9(PIN2C),a0
	subi	'0',a0
	move	a0,@wrld_recrd_ram+WR_PIN2C
	movb	*a9(PIN3C),a0
	subi	'0',a0
	move	a0,@wrld_recrd_ram+WR_PIN3C
	movb	*a9(PIN4C),a0
	subi	'0',a0
	move	a0,@wrld_recrd_ram+WR_PIN4C
	move	*a9(REBNDS),a0
	move	a0,@wrld_recrd_ram+WR_REBNDS_IN_GAME


	movb	*a9(NAME1D),a0
	subi	'@',a0
	move	a0,@wrld_recrd_ram+WR_NAME1D
	movb	*a9(NAME2D),a0
	subi	'@',a0
	move	a0,@wrld_recrd_ram+WR_NAME2D
	movb	*a9(NAME3D),a0
	subi	'@',a0
	move	a0,@wrld_recrd_ram+WR_NAME3D
	movb	*a9(NAME4D),a0
	subi	'@',a0
	move	a0,@wrld_recrd_ram+WR_NAME4D
	movb	*a9(NAME5D),a0
	subi	'@',a0
	move	a0,@wrld_recrd_ram+WR_NAME5D
	movb	*a9(NAME6D),a0
	subi	'@',a0
	move	a0,@wrld_recrd_ram+WR_NAME6D
	movb	*a9(PIN1D),a0
	subi	'0',a0
	move	a0,@wrld_recrd_ram+WR_PIN1D
	movb	*a9(PIN2D),a0
	subi	'0',a0
	move	a0,@wrld_recrd_ram+WR_PIN2D
	movb	*a9(PIN3D),a0
	subi	'0',a0
	move	a0,@wrld_recrd_ram+WR_PIN3D
	movb	*a9(PIN4D),a0
	subi	'0',a0
	move	a0,@wrld_recrd_ram+WR_PIN4D
	move	*a9(ASSISTS),a0
	move	a0,@wrld_recrd_ram+WR_ASSISTS_IN_GAME

	callr	put_world_record_in_cmos
	rets						;nope


default_wrld_records
	.string	"DIVITA", "0000"
	.word	2	   		;winstreaks
	.string	"TURMEL", "0000"
	.word	10			;points in game
	.string	"DANIEL", "0000"
	.word	3			;rebounds in game
	.string	"EUGENE", "0000"
	.word	4			;assists in game
	.even


 SUBR	put_world_record_in_cmos

	PUSH	a6
	movi	packed_wrld_record,a2
	movi	wrld_recrd_ram,a6

	move	*a6(WR_NAME1A),a0
	andi	_5BITS,a0
	move	a0,*a2(PKDWR_NAME1A)

	move	*a6(WR_NAME2A),a0
	andi	_5BITS,a0
	move	a0,*a2(PKDWR_NAME2A)

	move	*a6(WR_NAME3A),a0
	andi	_5BITS,a0
	move	a0,*a2(PKDWR_NAME3A)

	move	*a6(WR_NAME4A),a0
	andi	_5BITS,a0
	move	a0,*a2(PKDWR_NAME4A)

	move	*a6(WR_NAME5A),a0
	andi	_5BITS,a0
	move	a0,*a2(PKDWR_NAME5A)

	move	*a6(WR_NAME6A),a0
	andi	_5BITS,a0
	move	a0,*a2(PKDWR_NAME6A)

	move	*a6(WR_PIN1A),a0
	andi	_5BITS,a0
	move	a0,*a2(PKDWR_PIN1A)

	move	*a6(WR_PIN2A),a0
	andi	_5BITS,a0
	move	a0,*a2(PKDWR_PIN2A)

	move	*a6(WR_PIN3A),a0
	andi	_5BITS,a0
	move	a0,*a2(PKDWR_PIN3A)

	move	*a6(WR_PIN4A),a0
	andi	_5BITS,a0
	move	a0,*a2(PKDWR_PIN4A)

	move	*a6(WR_WINSTREAK),a0
	andi	_8BITS,a0
	move	a0,*a2(PKDWR_WINSTREAK)


	move	*a6(WR_NAME1B),a0
	andi	_5BITS,a0
	move	a0,*a2(PKDWR_NAME1B)

	move	*a6(WR_NAME2B),a0
	andi	_5BITS,a0
	move	a0,*a2(PKDWR_NAME2B)

	move	*a6(WR_NAME3B),a0
	andi	_5BITS,a0
	move	a0,*a2(PKDWR_NAME3B)

	move	*a6(WR_NAME4B),a0
	andi	_5BITS,a0
	move	a0,*a2(PKDWR_NAME4B)

	move	*a6(WR_NAME5B),a0
	andi	_5BITS,a0
	move	a0,*a2(PKDWR_NAME5B)

	move	*a6(WR_NAME6B),a0
	andi	_5BITS,a0
	move	a0,*a2(PKDWR_NAME6B)

	move	*a6(WR_PIN1B),a0
	andi	_5BITS,a0
	move	a0,*a2(PKDWR_PIN1B)

	move	*a6(WR_PIN2B),a0
	andi	_5BITS,a0
	move	a0,*a2(PKDWR_PIN2B)

	move	*a6(WR_PIN3B),a0
	andi	_5BITS,a0
	move	a0,*a2(PKDWR_PIN3B)

	move	*a6(WR_PIN4B),a0
	andi	_5BITS,a0
	move	a0,*a2(PKDWR_PIN4B)

	move	*a6(WR_PTS_IN_GAME),a0
	andi	_8BITS,a0
	move	a0,*a2(PKDWR_PTS_IN_GAME)

	move	*a6(WR_NAME1C),a0
	andi	_5BITS,a0
	move	a0,*a2(PKDWR_NAME1C)

	move	*a6(WR_NAME2C),a0
	andi	_5BITS,a0
	move	a0,*a2(PKDWR_NAME2C)

	move	*a6(WR_NAME3C),a0
	andi	_5BITS,a0
	move	a0,*a2(PKDWR_NAME3C)

	move	*a6(WR_NAME4C),a0
	andi	_5BITS,a0
	move	a0,*a2(PKDWR_NAME4C)

	move	*a6(WR_NAME5C),a0
	andi	_5BITS,a0
	move	a0,*a2(PKDWR_NAME5C)

	move	*a6(WR_NAME6C),a0
	andi	_5BITS,a0
	move	a0,*a2(PKDWR_NAME6C)

	move	*a6(WR_PIN1C),a0
	andi	_5BITS,a0
	move	a0,*a2(PKDWR_PIN1C)

	move	*a6(WR_PIN2C),a0
	andi	_5BITS,a0
	move	a0,*a2(PKDWR_PIN2C)

	move	*a6(WR_PIN3C),a0
	andi	_5BITS,a0
	move	a0,*a2(PKDWR_PIN3C)

	move	*a6(WR_PIN4C),a0
	andi	_5BITS,a0
	move	a0,*a2(PKDWR_PIN4C)

	move	*a6(WR_REBNDS_IN_GAME),a0
	andi	_8BITS,a0
	move	a0,*a2(PKDWR_REBNDS_IN_GAME)

	move	*a6(WR_NAME1D),a0
	andi	_5BITS,a0
	move	a0,*a2(PKDWR_NAME1D)

	move	*a6(WR_NAME2D),a0
	andi	_5BITS,a0
	move	a0,*a2(PKDWR_NAME2D)

	move	*a6(WR_NAME3D),a0
	andi	_5BITS,a0
	move	a0,*a2(PKDWR_NAME3D)

	move	*a6(WR_NAME4D),a0
	andi	_5BITS,a0
	move	a0,*a2(PKDWR_NAME4D)

	move	*a6(WR_NAME5D),a0
	andi	_5BITS,a0
	move	a0,*a2(PKDWR_NAME5D)

	move	*a6(WR_NAME6D),a0
	andi	_5BITS,a0
	move	a0,*a2(PKDWR_NAME6D)

	move	*a6(WR_PIN1D),a0
	andi	_5BITS,a0
	move	a0,*a2(PKDWR_PIN1D)

	move	*a6(WR_PIN2D),a0
	andi	_5BITS,a0
	move	a0,*a2(PKDWR_PIN2D)

	move	*a6(WR_PIN3D),a0
	andi	_5BITS,a0
	move	a0,*a2(PKDWR_PIN3D)

	move	*a6(WR_PIN4D),a0
	andi	_5BITS,a0
	move	a0,*a2(PKDWR_PIN4D)

	move	*a6(WR_ASSISTS_IN_GAME),a0
	andi	_8BITS,a0
	move	a0,*a2(PKDWR_ASSISTS_IN_GAME)

	callr	calc_wrld_rec_checksum			;8 bit xor checksum
	andi	_8BITS,a0
	move	a0,*a2(PKDWR_CHECKSUM)

	PUSH	a7
	movi	WORLD_REC_ORIGIN,a7			;start addr.
	movi	PKDWR_SIZE/8,a3			;number bytes to write
	movi	packed_wrld_record,a2
wric_1
	movb	*a2,a0
	calla	WC_BYTEI
	addk	8,a2
	dsj	a3,wric_1

	PULL	a7
	PULL	a6
	rets


 SUBR	update_world_records

	PUSH	a6,a7,a10,a11
	callr	get_world_record_from_cmos	;ret a6 - ptr to ram

	movi	wrld_recrd_ram,a6,L

	move	@PSTATUS2,a0
	btst	0,a0				;plyr 1 in game ?
	jrz	uwr_1				;br=nope
	movi	player1_data,a2,L
	move	*a2(PR_NAME1),a0
	jrle	uwr_1				;br=plyr 1, no initials
	move	*a2(PR_COUNT),a0
	jrn	uwr_1				;br=plyr didn't enter inits.
	movi	player_stats+(0*PS_SIZE*10h),a3
	callr	check_stats_against_world_record

uwr_1	move	@PSTATUS2,a0
	btst	1,a0				;plyr 2 in game ?
	jrz	uwr_2				;br=nope
	movi	player2_data,a2,L
	move	*a2(PR_NAME1),a0
	jrle	uwr_2				;br=plyr 2, no initials
	move	*a2(PR_COUNT),a0
	jrn	uwr_2				;br=plyr didn't enter inits.
	movi	player_stats+(1*PS_SIZE*10h),a3
	callr	check_stats_against_world_record


uwr_2	move	@PSTATUS2,a0
	btst	2,a0				;plyr 3 in game ?
	jrz	uwr_3				;br=nope
	movi	player3_data,a2,L
	move	*a2(PR_NAME1),a0
	jrle	uwr_3				;br=plyr 3, no initials
	move	*a2(PR_COUNT),a0
	jrn	uwr_3				;br=plyr didn't enter inits.
	movi	player_stats+(2*PS_SIZE*10h),a3
	callr	check_stats_against_world_record


uwr_3	move	@PSTATUS2,a0
	btst	3,a0				;plyr 4 in game ?
	jrz	uwr_4				;br=nope
	movi	player4_data,a2,L
	move	*a2(PR_NAME1),a0
	jrle	uwr_4				;br=plyr 4, no initials
	move	*a2(PR_COUNT),a0
	jrn	uwr_4				;br=plyr didn't enter inits.
	movi	player_stats+(3*PS_SIZE*10h),a3
	callr	check_stats_against_world_record
uwr_4
	callr	put_world_record_in_cmos
	PULL	a6,a7,a10,a11
 	rets
	
 SUBR	check_stats_against_world_record

	move	a2,a10
	addi	PR_NAME1,a10

	move	*a2(PR_WINSTREAK),a14
	move	*a6(WR_WINSTREAK),a0
	cmp	a14,a0
	jrhi	csawr_1			      ;br=plyr didn't beat this record
	move	a6,a11
	addi	WR_NAME1A,a11
	callr	replace_world_rec_data

csawr_1
	move	*a3(PS_2PTS_MADE*10h),a14
	move	*a3(PS_3PTS_MADE*10h),a0
	add	a0,a14
	sll	1,a14				;x 2
	add	a0,a14				;3 pts
	move	*a6(WR_PTS_IN_GAME),a0
	cmp	a14,a0
	jrhi	csawr_2			      ;br=plyr didn't beat this record
	move	a6,a11
	addi	WR_NAME1B,a11
	callr	replace_world_rec_data

csawr_2
	move	*a3(PS_OFF_REB*10h),a14
	move	*a3(PS_DEF_REB*10h),a0
	add	a0,a14
	move	*a6(WR_REBNDS_IN_GAME),a0
	cmp	a14,a0
	jrhi	csawr_3			      ;br=plyr didn't beat this record
	move	a6,a11
	addi	WR_NAME1C,a11
	callr	replace_world_rec_data

csawr_3
	move	*a3(PS_ASSISTS*10h),a14
	move	*a6(WR_ASSISTS_IN_GAME),a0
	cmp	a14,a0
	jrhi	csawr_4			      ;br=plyr didn't beat this record
	move	a6,a11
	addi	WR_NAME1D,a11
	callr	replace_world_rec_data
csawr_4
	rets


 SUBR	replace_world_rec_data

	PUSH	a10
	movk	10,a1			;6 letters in name, 4 pin numbers
rwrd_1	move	*a10+,a0			;get data from player record
	move	a0,*a11+			;put data in world record ram copy
	dsj	a1,rwrd_1
	move	a14,*a11				;save new world rec. value
	PULL	a10
 	rets


	.asg	10,PLR_NAME_PIN_CNT
 SUBR	check_world_records

	PUSH	a2
	callr	get_world_record_from_cmos
	PULL	a2
	clr	a14

	movi	wrld_recrd_ram,a6

	move	a6,a5
	move	a2,a3
	addi	PR_NAME1,a3
	addi	WR_NAME1A,a5

	movk	PLR_NAME_PIN_CNT,a8		;name + pin number
ipwr_0	move	*a3+,a0
	move	*a5+,a1
	cmp	a0,a1
	jrne	ipwr_2				;br=MATCH for winstreaks
	dsj	a8,ipwr_0
	inc	a14

ipwr_2	move	a6,a5
	move	a2,a3
	addi	PR_NAME1,a3
	addi	WR_NAME1B,a5

	movi	PLR_NAME_PIN_CNT,a8		;name + pin number
ipwr_3	move	*a3+,a0
	move	*a5+,a1
	cmp	a0,a1
	jrne	ipwr_5				;br=MATCH for pts. per game
	dsj	a8,ipwr_3
	inc	a14

ipwr_5	move	a6,a5
	move	a2,a3
	addi	PR_NAME1,a3
	addi	WR_NAME1C,a5

	movi	PLR_NAME_PIN_CNT,a8		;name + pin number
ipwr_6	move	*a3+,a0
	move	*a5+,a1
	cmp	a0,a1
	jrne	ipwr_8				;br=MATCH for rebounds
	dsj	a8,ipwr_6
	inc	a14

ipwr_8	move	a6,a5
	move	a2,a3
	addi	PR_NAME1,a3
	addi	WR_NAME1D,a5

	movi	PLR_NAME_PIN_CNT,a8		;name + pin number
ipwr_9	move	*a3+,a0
	move	*a5+,a1
	cmp	a0,a1
	jrne	ipwr_b				;br=MATCH for ASSISTS
	dsj	a8,ipwr_9
	inc	a14
ipwr_b	rets


 SUBR	get_world_record_from_cmos

	movi	packed_wrld_record,a2
	movi	PKDWR_SIZE/8,a3			;number bytes to fetch
	movi	WORLD_REC_ORIGIN,a7			;start addr.
gwr_1
	calla	RC_BYTEI
	movb	a0,*a2
	addk	8,a2
	dsj	a3,gwr_1

	movi	packed_wrld_record,a2
	movi	wrld_recrd_ram,a6

	move	*a2(PKDWR_NAME1A),a0
	andi	_5BITS,a0
	move	a0,*a6(WR_NAME1A)

	move	*a2(PKDWR_NAME2A),a0
	andi	_5BITS,a0
	move	a0,*a6(WR_NAME2A)

	move	*a2(PKDWR_NAME3A),a0
	andi	_5BITS,a0
	move	a0,*a6(WR_NAME3A)

	move	*a2(PKDWR_NAME4A),a0
	andi	_5BITS,a0
	move	a0,*a6(WR_NAME4A)

	move	*a2(PKDWR_NAME5A),a0
	andi	_5BITS,a0
	move	a0,*a6(WR_NAME5A)

	move	*a2(PKDWR_NAME6A),a0
	andi	_5BITS,a0
	move	a0,*a6(WR_NAME6A)

	move	*a2(PKDWR_PIN1A),a0
	andi	_5BITS,a0
	move	a0,*a6(WR_PIN1A)

	move	*a2(PKDWR_PIN2A),a0
	andi	_5BITS,a0
	move	a0,*a6(WR_PIN2A)

	move	*a2(PKDWR_PIN3A),a0
	andi	_5BITS,a0
	move	a0,*a6(WR_PIN3A)

	move	*a2(PKDWR_PIN4A),a0
	andi	_5BITS,a0
	move	a0,*a6(WR_PIN4A)

	move	*a2(PKDWR_WINSTREAK),a0
	andi	_8BITS,a0
	move	a0,*a6(WR_WINSTREAK)


	move	*a2(PKDWR_NAME1B),a0
	andi	_5BITS,a0
	move	a0,*a6(WR_NAME1B)

	move	*a2(PKDWR_NAME2B),a0
	andi	_5BITS,a0
	move	a0,*a6(WR_NAME2B)

	move	*a2(PKDWR_NAME3B),a0
	andi	_5BITS,a0
	move	a0,*a6(WR_NAME3B)

	move	*a2(PKDWR_NAME4B),a0
	andi	_5BITS,a0
	move	a0,*a6(WR_NAME4B)

	move	*a2(PKDWR_NAME5B),a0
	andi	_5BITS,a0
	move	a0,*a6(WR_NAME5B)

	move	*a2(PKDWR_NAME6B),a0
	andi	_5BITS,a0
	move	a0,*a6(WR_NAME6B)

	move	*a2(PKDWR_PIN1B),a0
	andi	_5BITS,a0
	move	a0,*a6(WR_PIN1B)

	move	*a2(PKDWR_PIN2B),a0
	andi	_5BITS,a0
	move	a0,*a6(WR_PIN2B)

	move	*a2(PKDWR_PIN3B),a0
	andi	_5BITS,a0
	move	a0,*a6(WR_PIN3B)

	move	*a2(PKDWR_PIN4B),a0
	andi	_5BITS,a0
	move	a0,*a6(WR_PIN4B)

	move	*a2(PKDWR_PTS_IN_GAME),a0
	andi	_8BITS,a0
	move	a0,*a6(WR_PTS_IN_GAME)

	move	*a2(PKDWR_NAME1C),a0
	andi	_5BITS,a0
	move	a0,*a6(WR_NAME1C)

	move	*a2(PKDWR_NAME2C),a0
	andi	_5BITS,a0
	move	a0,*a6(WR_NAME2C)

	move	*a2(PKDWR_NAME3C),a0
	andi	_5BITS,a0
	move	a0,*a6(WR_NAME3C)

	move	*a2(PKDWR_NAME4C),a0
	andi	_5BITS,a0
	move	a0,*a6(WR_NAME4C)

	move	*a2(PKDWR_NAME5C),a0
	andi	_5BITS,a0
	move	a0,*a6(WR_NAME5C)

	move	*a2(PKDWR_NAME6C),a0
	andi	_5BITS,a0
	move	a0,*a6(WR_NAME6C)

	move	*a2(PKDWR_PIN1C),a0
	andi	_5BITS,a0
	move	a0,*a6(WR_PIN1C)

	move	*a2(PKDWR_PIN2C),a0
	andi	_5BITS,a0
	move	a0,*a6(WR_PIN2C)

	move	*a2(PKDWR_PIN3C),a0
	andi	_5BITS,a0
	move	a0,*a6(WR_PIN3C)

	move	*a2(PKDWR_PIN4C),a0
	andi	_5BITS,a0
	move	a0,*a6(WR_PIN4C)

	move	*a2(PKDWR_REBNDS_IN_GAME),a0
	andi	_8BITS,a0
	move	a0,*a6(WR_REBNDS_IN_GAME)

	move	*a2(PKDWR_NAME1D),a0
	andi	_5BITS,a0
	move	a0,*a6(WR_NAME1D)

	move	*a2(PKDWR_NAME2D),a0
	andi	_5BITS,a0
	move	a0,*a6(WR_NAME2D)

	move	*a2(PKDWR_NAME3D),a0
	andi	_5BITS,a0
	move	a0,*a6(WR_NAME3D)

	move	*a2(PKDWR_NAME4D),a0
	andi	_5BITS,a0
	move	a0,*a6(WR_NAME4D)

	move	*a2(PKDWR_NAME5D),a0
	andi	_5BITS,a0
	move	a0,*a6(WR_NAME5D)

	move	*a2(PKDWR_NAME6D),a0
	andi	_5BITS,a0
	move	a0,*a6(WR_NAME6D)

	move	*a2(PKDWR_PIN1D),a0
	andi	_5BITS,a0
	move	a0,*a6(WR_PIN1D)

	move	*a2(PKDWR_PIN2D),a0
	andi	_5BITS,a0
	move	a0,*a6(WR_PIN2D)

	move	*a2(PKDWR_PIN3D),a0
	andi	_5BITS,a0
	move	a0,*a6(WR_PIN3D)

	move	*a2(PKDWR_PIN4D),a0
	andi	_5BITS,a0
	move	a0,*a6(WR_PIN4D)

	move	*a2(PKDWR_ASSISTS_IN_GAME),a0
	andi	_8BITS,a0
	move	a0,*a6(WR_ASSISTS_IN_GAME)

	move	*a2(PKDWR_CHECKSUM),a1
	andi	_8BITS,a1
	move	a1,*a6(WR_CHECKSUM)
	callr	calc_wrld_rec_checksum			;8 bit xor checksum
	cmp	a0,a1
	jreq	gwr_2					;br=checksums ok.

	.if	DEBUG
	LOCKUP
	eint
	.endif
	callr	reset_world_records
gwr_2
	rets


 SUBRP	calc_wrld_rec_checksum

	PUSH	a1
	clr	a0

	move	*a6(WR_NAME1A),a1
	xor	a1,a0
	move	*a6(WR_NAME2A),a1
	xor	a1,a0
	move	*a6(WR_NAME3A),a1
	xor	a1,a0
	move	*a6(WR_NAME4A),a1
	xor	a1,a0
	move	*a6(WR_NAME5A),a1
	xor	a1,a0
	move	*a6(WR_NAME6A),a1
	xor	a1,a0
	move	*a6(WR_PIN1A),a1
	xor	a1,a0
	move	*a6(WR_PIN2A),a1
	xor	a1,a0
	move	*a6(WR_PIN3A),a1
	xor	a1,a0
	move	*a6(WR_PIN4A),a1
	xor	a1,a0
	move	*a6(WR_WINSTREAK),a1
	xor	a1,a0

	move	*a6(WR_NAME1B),a1
	xor	a1,a0
	move	*a6(WR_NAME2B),a1
	xor	a1,a0
	move	*a6(WR_NAME3B),a1
	xor	a1,a0
	move	*a6(WR_NAME4B),a1
	xor	a1,a0
	move	*a6(WR_NAME5B),a1
	xor	a1,a0
	move	*a6(WR_NAME6B),a1
	xor	a1,a0	   
	move	*a6(WR_PIN1B),a1
	xor	a1,a0
	move	*a6(WR_PIN2B),a1
	xor	a1,a0
	move	*a6(WR_PIN3B),a1
	xor	a1,a0
	move	*a6(WR_PIN4B),a1
	xor	a1,a0
	move	*a6(WR_PTS_IN_GAME),a1
	xor	a1,a0

	move	*a6(WR_NAME1C),a1
	xor	a1,a0
	move	*a6(WR_NAME2C),a1
	xor	a1,a0
	move	*a6(WR_NAME3C),a1
	xor	a1,a0
	move	*a6(WR_NAME4C),a1
	xor	a1,a0
	move	*a6(WR_NAME5C),a1
	xor	a1,a0
	move	*a6(WR_NAME6C),a1
	xor	a1,a0	  
	move	*a6(WR_PIN1C),a1
	xor	a1,a0	   
	move	*a6(WR_PIN2C),a1
	xor	a1,a0
	move	*a6(WR_PIN3C),a1
	xor	a1,a0
	move	*a6(WR_PIN4C),a1
	xor	a1,a0
	move	*a6(WR_REBNDS_IN_GAME),a1
	xor	a1,a0

	move	*a6(WR_NAME1D),a1
	xor	a1,a0
	move	*a6(WR_NAME2D),a1
	xor	a1,a0
	move	*a6(WR_NAME3D),a1
	xor	a1,a0
	move	*a6(WR_NAME4D),a1
	xor	a1,a0
	move	*a6(WR_NAME5D),a1
	xor	a1,a0
	move	*a6(WR_NAME6D),a1
	xor	a1,a0	   
	move	*a6(WR_PIN1D),a1
	xor	a1,a0	   
	move	*a6(WR_PIN2D),a1
	xor	a1,a0
	move	*a6(WR_PIN3D),a1
	xor	a1,a0
	move	*a6(WR_PIN4D),a1
	xor	a1,a0
	move	*a6(WR_ASSISTS_IN_GAME),a1
	xor	a1,a0

	andi	_8BITS,a0
	PULL	a1
	rets

 SUBR	clear_team_records

	clr	a0
	movi	TR_SIZE/16,a1
	movi	tm_stat_ram,a2
yzcwclrit
	move	a0,*a2+
	dsj	a1,yzcwclrit

	movi	NUM_TM_RECORDS,a11			;nbr records
	movi	TEAM_RECORD_ORIGIN,a10			;start addr.
yzcwclear_loop
	PUSH	a10,a11

	callr	put_temp_tm_record		;write out record

	PULL	a10,a11
	addi	PKDTR_SIZE*2,a10	;cmos words
	dsj	a11,yzcwclear_loop
	rets


 SUBRP	put_temp_tm_record

	PUSH	a6
	movi	tm_stat_ram,a6

	movi	packed_tm_record,a2

	move	*a6(TR_PTS_SCORED),a1
	andi	_16BITS,a1
	move	a1,*a2(PKDTR_PTS_SCORED)	;total points scored

	move	*a6(TR_PTS_ALLOWED),a1	;total points allowed
	andi	_16BITS,a1
	move	a1,*a2(PKDTR_PTS_ALLOWED)

	move	*a6(TR_WINS),a1		;total team wins
	andi	_11BITS,a1
	move	a1,*a2(PKDTR_WINS)

	callr	calc_team_rec_checksum			;8 bit xor checksum
	andi	_8BITS,a0
	move	a0,*a2(PKDTR_TM_CHECKSUM)

	PUSH	a7
	move	a10,a7

	movi	PKDTR_SIZE/8,a3			;number bytes to write
	movi	packed_tm_record,a2
chlynext_word
	movb	*a2,a0
	calla	WC_BYTEI
	addk	8,a2
	dsj	a3,chlynext_word

	PULL	a7
	PULL	a6
	rets

 SUBRP	get_cmos_team_record_into_ram

	callr	get_team_record_from_cmos

	movi	tm_stat_ram,a6,L
	movi	packed_tm_record,a2

	move	*a2(PKDTR_PTS_SCORED),a1	;total points scored
	andi	_16BITS,a1
	move	a1,*a6(TR_PTS_SCORED)

	move	*a2(PKDTR_PTS_ALLOWED),a1	;total points allowed
	andi	_16BITS,a1
	move	a1,*a6(TR_PTS_ALLOWED)

	move	*a2(PKDTR_WINS),a1		;total team wins
	andi	_11BITS,a1
	move	a1,*a6(TR_WINS)

	move	*a2(PKDTR_TM_CHECKSUM),a1
	andi	_8BITS,a1
	move	a1,*a6(TR_TM_CHECKSUM)
	callr	calc_team_rec_checksum			;8 bit xor checksum
	cmp	a0,a1
	jreq	gctrir_2					;br=checksums ok.

	.if	DEBUG
	LOCKUP
	eint
	.endif
	callr	clear_team_records
gctrir_2
	rets


 SUBRP	get_team_record_from_cmos

	PUSH	a0,a3,a14


	movi	TEAM_RECORD_ORIGIN,a7		;start addr. of recs
	move	a0,a0
	jreq	gctr_1				;dont add a offset if 0th team
gctr_0	addi	(PKDTR_SIZE*2),a7		;size of rec in words
	dsj	a0,gctr_0
gctr_1

	movi	PKDTR_SIZE/8,a3			;number bytes to fetch
	movi	packed_tm_record,a2
gctr_2
	calla	RC_BYTEI
	movb	a0,*a2
	addk	8,a2
	dsj	a3,gctr_2

	movi	packed_tm_record,a2
 	PULL	a0,a3,a14
	rets



	.asg	0,TM1_SCORE
	.asg	16,TM2_SCORE


 SUBR	update_team_stats_records


	move	@PSTATUS2,a0
	andi	011b,a0					;human plyr 1 or 2 ?
	jrz	utsr_2					;br=nope

	move	@team1,a0
	jrn	utsr_2
	callr	get_cmos_team_record_into_ram
	movi	tm_stat_ram,a6,L

	movi	scores,a1				;addr of team scores
	move	*a1(TM1_SCORE),a0			;score from team 1
	srl	1,a0					;divide 1/2 (more resoultion)
	move	*a6(TR_PTS_SCORED),a14
	add	a0,a14
	move	a14,*a6(TR_PTS_SCORED)

	move	*a1(TM2_SCORE),a0			;score from team 2
	srl	1,a0					;divide 1/2 (more resoultion)
	move	*a6(TR_PTS_ALLOWED),a14
	add	a0,a14
	move	a14,*a6(TR_PTS_ALLOWED)

	move	*a1(TM1_SCORE),a0			;score from team 1
	move	*a1(TM2_SCORE),a14			;score from team 2
	cmp	a14,a0					;did team1 win ?
	jrlo	utsr_1					;br=no
	move	*a6(TR_WINS),a0
	inc	a0
	move	a0,*a6(TR_WINS)
utsr_1
	move	@team1,a1
	callr	put_team_record_in_cmos

utsr_2
	move	@PSTATUS2,a0
	andi	01100b,a0				;human plyr 3 or 4 ?
	jrz	utsr_4					;br=nope

	move	@team2,a0
	jrn	utsr_4
	callr	get_cmos_team_record_into_ram
	movi	tm_stat_ram,a6,L

	movi	scores,a1				;addr of team scores
	move	*a1(TM2_SCORE),a0			;score from team 2
	srl	1,a0					;divide 1/2 (more resoultion)
	move	*a6(TR_PTS_SCORED),a14
	add	a0,a14
	move	a14,*a6(TR_PTS_SCORED)

	move	*a1(TM1_SCORE),a0			;score from team 1
	srl	1,a0					;divide 1/2 (more resoultion)
	move	*a6(TR_PTS_ALLOWED),a14
	add	a0,a14
	move	a14,*a6(TR_PTS_ALLOWED)

	move	*a1(TM2_SCORE),a0			;score from team 1
	move	*a1(TM1_SCORE),a14			;score from team 2
	cmp	a14,a0					;did team1 win ?
	jrlo	utsr_3					;br=no
	move	*a6(TR_WINS),a0
	inc	a0
	move	a0,*a6(TR_WINS)
utsr_3
	move	@team2,a1
	callr	put_team_record_in_cmos
utsr_4 	rets


 SUBRP	put_team_record_in_cmos

	movi	packed_tm_record,a2

	move	*a6(TR_PTS_SCORED),a0
	andi	_16BITS,a0
	move	a0,*a2(PKDTR_PTS_SCORED)	;total points scored

	move	*a6(TR_PTS_ALLOWED),a0
	andi	_16BITS,a0
	move	a0,*a2(PKDTR_PTS_ALLOWED)	;total points allowed

	move	*a6(TR_WINS),a0
	andi	_11BITS,a0
	move	a0,*a2(PKDTR_WINS)		;total team wins

	callr	calc_team_rec_checksum			;8 bit xor checksum
	andi	_8BITS,a0
	move	a0,*a2(PKDTR_TM_CHECKSUM)

	
	movi	TEAM_RECORD_ORIGIN,a7		;start addr. of recs
	move	a1,a1
	jrz	ptrc_1				;dont add a offset if 0th team
ptrc_0	addi	(PKDTR_SIZE*2),a7		;size of rec in words
	dsj	a1,ptrc_0
ptrc_1
	movi	PKDTR_SIZE/8,a3			;nbr of bytes per rec
	movi	packed_tm_record,a2
ptrc_2
	movb	*a2,a0
	calla	WC_BYTEI
	addk	8,a2
	dsj	a3,ptrc_2
 	rets

 SUBRP	calc_team_rec_checksum

	PUSH	a1
	clr	a0
	move	*a6(TR_PTS_SCORED),a1
	xor	a1,a0
	move	*a6(TR_PTS_ALLOWED),a1
	xor	a1,a0
	move	*a6(TR_WINS),a1
	xor	a1,a0
	andi	_8BITS,a0
	PULL	a1
 	rets

 SUBR	compute_team_def_off_rank

	PUSH	a1
	callr	get_cmos_team_record_into_ram	;ret.a6 - ptr to team stat ram

	movi	NUM_TM_RECORDS,a3		;nbr. records to parse
	movi	NUM_TEAMS-1,a0
	movk	NUM_TEAMS,a4			;current off. rank (worst)
	move	a4,a5				;current def. rank (worst)

	move	*a6(TR_PTS_SCORED),a14
	move	*a6(TR_PTS_ALLOWED),a11
ctor_1
	callr	get_team_record_from_cmos	;get teams stats in packed ram

	move	*a2(PKDTR_PTS_SCORED),a1
	andi	_16BITS,a1			;unpack pts. scored
	cmp	a14,a1				;is this team worse ?
	jrgt	ctor_2				;br=yes
	dec	a4				;better rank

ctor_2
	move	*a2(PKDTR_PTS_ALLOWED),a1
	andi	_16BITS,a1			;unpack pts. allowed
	cmp	a11,a1				;is this team worse ?
	jrgt	ctor_3				;br=yes
	dec	a5				;better rank

ctor_3	dsj	a0,ctor_1

	movi	tm_stat_ram,a6,L

	move	a4,a4
	jrgt	ctor_4
	movk	1,a4
ctor_4
	move	a4,*a6(TR_OFF_RANK)

	move	a5,a5
	jrgt	ctor_5
	movk	1,a5
ctor_5
	move	a5,*a6(TR_DEF_RANK)
	PULL	a1
 	rets

 SUBR	award_plr_attrib_pts
 
	movk	3,a10				;start with player 4
	clr	a11
tdkaapap_0	
	move	a10,a0
	sll	5,a0
	addi	tdkaplr_data_tbl,a0
	move	*a0,a0,L
	move	*a0(PR_NAME1),a14
	jrle	tdkanxt
	move	*a0(PR_CREATED_PLYR),a14
	jrle	tdkanxt
	move	*a0(PR_TOTAL_PTS),a14
	cmpi	69,a14				;too many ?
	jrhs	tdkanxt				;br=plyr has too many points

	move	*a0(PR_WON),a5


	move	@scores,a8
	move	@scores+16,a9
	move	a10,a14
	srl	1,a14
	jrz	tdkatm1				;br=team 1
	sub	a9,a8
	jrnn	tdkanxt				;br=lost
	inc	a5
	jruc	tdkatmd
tdkatm1
	sub	a8,a9
	jrnn	tdkanxt				;br=player lost
	inc	a5
tdkatmd	
	movk	3,a1
	modu	a1,a5				;divide by 3
	jrnz	tdkanxt				;br=not third win

	movk	2,a9				;2 pts.
	move	*a0(PR_WON),a14
	subk	12,a14				;12 wins ?
	jrle	tdkawn16				;br=no
	movk	2,a9				;2 pts.
tdkawn16
	move	*a0(PR_TOTAL_PTS),a14
	add	a9,a14
	move	a14,*a0(PR_TOTAL_PTS)

	move	a10,a9
	sll	4,a9
	addi	tdkaplyr_box_xs,a9
	move	*a9,a9
	sll	16,a9
	move	a9,a0
	movi	[150,0],a1

	movi	firstwin,a2,L
	movi	20500,a3				;z pos (sorting)
	movi	DMAWNZ|M_SCRNREL,a4		;DMA flags
	movi	ATTRIB_PLAQ_ID,a5		   		;object ID
	clr	a6				;x vel
	clr	a7				;y vel
	calla	BEGINOBJ2


	move	a9,a0
	movi	[150,0],a1
	movi	GAINED_TXT,a2,L
	movi	20600,a3			;z pos (sorting)
	calla	BEGINOBJ2

	inc	a11
	SOUND1	win_snd

tdkanxt
	dec	a10
	jrge	tdkaapap_0

	move	a11,a11
	jrz	tdkaext				;br=no plyrs reached level

	SLEEP	175

	movi	ATTRIB_PLAQ_ID,a0
	calla	obj_del1c
tdkaext	RETP



tdkaplr_data_tbl
	.long	player1_data
	.long	player2_data
	.long	player3_data
	.long	player4_data


tdkaplyr_box_xs
	.word	1,100,200,300



 SUBRP	save_player_records

	move	@scores,a0			;team 1 scores
	move	@scores+10h,a1			;team 2 scores


	cmpi	80,a0
	jrls	umabvok
	movi	80,a0
umabvok
	cmpi	20,a0
	jrhs	umabvok1
	movk	20,a0
umabvok1
	cmpi	80,a1
	jrls	umabvok2
	movi	80,a1
umabvok2
	cmpi	20,a1
	jrhs	umabvok3
	movk	20,a1
umabvok3
	move	@PSTATUS2,a14
	andi	0011b,a14
	jrz	umabchktm2				;br=no humans plyrs on team 1
	move	@player1_data+PR_PTS_SCORED,a14
	add	a0,a14
	move	a14,@player1_data+PR_PTS_SCORED

	move	@player2_data+PR_PTS_SCORED,a14
	add	a0,a14
	move	a14,@player2_data+PR_PTS_SCORED

	move	@player1_data+PR_PTS_ALLOWED,a14
	add	a1,a14
	move	a14,@player1_data+PR_PTS_ALLOWED

	move	@player2_data+PR_PTS_ALLOWED,a14
	add	a1,a14
	move	a14,@player2_data+PR_PTS_ALLOWED

umabchktm2
	move	@PSTATUS2,a14
	andi	01100b,a14
	jrz	umabchktm				;br=no humans plyrs on team 2
	move	@player3_data+PR_PTS_SCORED,a14
	add	a1,a14
	move	a14,@player3_data+PR_PTS_SCORED

	move	@player4_data+PR_PTS_SCORED,a14
	add	a1,a14
	move	a14,@player4_data+PR_PTS_SCORED

	move	@player3_data+PR_PTS_ALLOWED,a14
	add	a0,a14
	move	a14,@player3_data+PR_PTS_ALLOWED

	move	@player4_data+PR_PTS_ALLOWED,a14
	add	a0,a14
	move	a14,@player4_data+PR_PTS_ALLOWED

umabchktm
	move	@scores,a0
	move	@scores+10h,a1
	cmp	a0,a1
	jrgt	umabt2_wins
	move	@player1_data+PR_WON,a0
	inc	a0
	move	a0,@player1_data+PR_WON
	move	@player1_data+PR_WINSTREAK,a0
	inc	a0
	andi	_6BITS,a0
	jrz	umabno_wrap1
	move	a0,@player1_data+PR_WINSTREAK
umabno_wrap1

	move	@player2_data+PR_WON,a0
	inc	a0
	move	a0,@player2_data+PR_WON
	move	@player2_data+PR_WINSTREAK,a0
	inc	a0
	andi	_6BITS,a0
	jrz	umabno_wrap2
	move	a0,@player2_data+PR_WINSTREAK
umabno_wrap2

	clr	a0
	move	a0,@player3_data+PR_WINSTREAK
	move	a0,@player4_data+PR_WINSTREAK

	move	@team2,a0
	movk	1,a1
	sll	a0,a1

	move	@PSTATUS2,a0		;if opponent is human then don't
	andi	01100b,a0		;count wins for top five teams
	jrz	umabt2cpu
	andni	(1<<_CHI) | (1<<_SEA) | (1<<_ORL) | (1<<_SAN) | (1<<_UTA),a1
umabt2cpu
	move	@player1_data+PR_TEAMSDEF,a0,L
	or	a1,a0
	move	a0,@player1_data+PR_TEAMSDEF,L
	move	@player2_data+PR_TEAMSDEF,a0,L
	or	a1,a0
	move	a0,@player2_data+PR_TEAMSDEF,L
	jruc	umabcont1

umabt2_wins
	move	@player3_data+PR_WON,a0
	inc	a0
	move	a0,@player3_data+PR_WON
	move	@player3_data+PR_WINSTREAK,a0
	inc	a0
	andi	_6BITS,a0
	jrz	umabno_wrap3
	move	a0,@player3_data+PR_WINSTREAK
umabno_wrap3

	move	@player4_data+PR_WON,a0
	inc	a0
	move	a0,@player4_data+PR_WON
	move	@player4_data+PR_WINSTREAK,a0
	inc	a0
	andi	_6BITS,a0
	jrz	umabno_wrap4
	move	a0,@player4_data+PR_WINSTREAK
umabno_wrap4

	clr	a0
	move	a0,@player1_data+PR_WINSTREAK
	move	a0,@player2_data+PR_WINSTREAK

	move	@team1,a0
	movk	1,a1
	sll	a0,a1

	move	@PSTATUS2,a0		;if opponent is human then don't
	andi	011b,a0			;count wins for top five teams
	jrz	umabt1cpu
	andni	(1<<_CHI) | (1<<_SEA) | (1<<_ORL) | (1<<_SAN) | (1<<_UTA),a1
umabt1cpu
	move	@player3_data+PR_TEAMSDEF,a0,L
	or	a1,a0
	move	a0,@player3_data+PR_TEAMSDEF,L
	move	@player4_data+PR_TEAMSDEF,a0,L
	or	a1,a0
	move	a0,@player4_data+PR_TEAMSDEF,L
umabcont1

	calla	dec_lastplay

	move	*a13(PC_DATADDR),a0,L
	PUSHP	a0

	move	@PSTATUS,a0
	btst	0,a0
	jrz	umabno1
	move	@player1_data+PR_NAME1,a0
	jrle	umabno1
	movi	player1_data,a6
	calla	save_record
umabno1
	move	@PSTATUS,a0
	btst	1,a0
	jrz	umabno2
	move	@player2_data+PR_NAME1,a0
	jrle	umabno2
	movi	player2_data,a6
	calla	save_record
umabno2
	move	@PSTATUS,a0
	btst	2,a0
	jrz	umabno3
	move	@player3_data+PR_NAME1,a0
	jrle	umabno3
	movi	player3_data,a6
	calla	save_record
umabno3
	move	@PSTATUS,a0
	btst	3,a0
	jrz	umabno4
	move	@player4_data+PR_NAME1,a0
	jrle	umabno4
	movi	player4_data,a6
	calla	save_record
umabno4
	calla	get_all_records			;resort players
	calla	sort_wins			;for new ranking


	move	@PSTATUS,a0
	btst	0,a0
	jrz	umabno1b
	move	@player1_data+PR_NAME1,a0
	jrle	umabno1b
	movi	player1_data,a0
	move	a0,*a13(PC_DATADDR),L		;start of player data
	callr	get_player_record		;re-calc rank etc..
umabno1b

	move	@PSTATUS,a0
	btst	1,a0
	jrz	umabno2b
	move	@player2_data+PR_NAME1,a0
	jrle	umabno2b
	movi	player2_data,a0
	move	a0,*a13(PC_DATADDR),L		;start of player data
	callr	get_player_record		;re-calc rank etc..
umabno2b

	move	@PSTATUS,a0
	btst	2,a0
	jrz	umabno3b
	move	@player3_data+PR_NAME1,a0
	jrle	umabno3b
	movi	player3_data,a0
	move	a0,*a13(PC_DATADDR),L		;start of player data
	callr	get_player_record		;re-calc rank etc..
umabno3b

	move	@PSTATUS,a0
	btst	3,a0
	jrz	umabno4b
	move	@player4_data+PR_NAME1,a0
	jrle	umabno4b
	movi	player4_data,a0
	move	a0,*a13(PC_DATADDR),L		;start of player data
	callr	get_player_record		;re-calc rank etc..
umabno4b
	PULLP	a0
	move	a0,*a13(PC_DATADDR),L
	rets




 SUBR	clear_player_stats

	clr	a0
	movi	player_stats,a1
	movi	PS_SIZE*4,b0
mffzclear_next
	move	a0,*a1+
	dsj	b0,mffzclear_next
	rets


 SUBR	get_player_stat

	movi	PS_SIZE,a14
	mpyu	a14,a1			;player number * PS_SIZE
	add	a1,a0			;+ stat offset
	sll	4,a0			;x 16 bits
	addi	player_stats,a0		;+ base address
	move	*a0,a14
	rets


 SUBR	inc_player_stat

	movi	PS_SIZE,a14
	mpyu	a14,a1			;player number * PS_SIZE
	add	a1,a0			;+ stat offset
	sll	4,a0			;x 16 bits
	addi	player_stats,a0		;+ base address
	move	*a0,a14
	inc	a14
	move	a14,*a0
	rets


 SUBR	dec_player_stat

	movi	PS_SIZE,a14
	mpyu	a14,a1			;player number * PS_SIZE
	add	a1,a0			;+ stat offset
	sll	4,a0			;x 16 bits
	addi	player_stats,a0		;+ base address
	move	*a0,a14
	dec	a14
	move	a14,*a0
	rets



 SUBRP	calc_checksum

	PUSH	a1
	clr	a0

	move	*a6(PR_COUNT),a1
	xor	a1,a0
	move	*a6(PR_WON),a1
	xor	a1,a0
	move	*a6(PR_LOST),a1
	xor	a1,a0
	move	*a6(PR_LASTPLAY),a1
	xor	a1,a0
	move	*a6(PR_NAME1),a1
	xor	a1,a0
	move	*a6(PR_NAME2),a1
	xor	a1,a0
	move	*a6(PR_NAME3),a1
	xor	a1,a0
	move	*a6(PR_NAME4),a1
	xor	a1,a0
	move	*a6(PR_NAME5),a1
	xor	a1,a0
	move	*a6(PR_NAME6),a1
	xor	a1,a0
	move	*a6(PR_PIN_NBR1),a1
	xor	a1,a0
	move	*a6(PR_PIN_NBR2),a1
	xor	a1,a0
	move	*a6(PR_PIN_NBR3),a1
	xor	a1,a0
	move	*a6(PR_PIN_NBR4),a1
	xor	a1,a0
	move	*a6(PR_TEAMSDEF),a1
	xor	a1,a0
	move	*a6(PR_TEAMSDEF+10h),a1
	xor	a1,a0
	move	*a6(PR_WINSTREAK),a1
	xor	a1,a0
	move	*a6(PR_TOTAL_PTS),a1
	xor	a1,a0
	move	*a6(PR_HEIGHT_PTS),a1
	xor	a1,a0
	move	*a6(PR_WEIGHT_PTS),a1
	xor	a1,a0
	move	*a6(PR_SPEED_PTS),a1
	xor	a1,a0
	move	*a6(PR_POWER_PTS),a1
	xor	a1,a0
	move	*a6(PR_SHOOT_PTS),a1
	xor	a1,a0
	move	*a6(PR_DUNKS_PTS),a1
	xor	a1,a0
	move	*a6(PR_STEAL_PTS),a1
	xor	a1,a0
	move	*a6(PR_BLOCKS_PTS),a1
	xor	a1,a0
	move	*a6(PR_HEAD_NBR),a1
	xor	a1,a0
	move	*a6(PR_CREATED_PLYR),a1
	xor	a1,a0
	move	*a6(PR_NICKNAME_NBR),a1
	xor	a1,a0
	move	*a6(PR_PTS_SCORED),a1
	xor	a1,a0
	move	*a6(PR_PTS_ALLOWED),a1
	xor	a1,a0
	move	*a6(PR_UNIFORM_NBR),a1
	xor	a1,a0
	move	*a6(PR_TRIVIA_PTS),a1
	xor	a1,a0
	move	*a6(PR_PRIVILEGES),a1
	xor	a1,a0
	andi	_8BITS,a0
	PULL	a1
	rets


 SUBRP	get_temp_record

	PUSH	a6,a7
 	movi	temp_record,a6
	jruc	trtfstart

 SUBRP	get_plr_record

	PUSH	a6,a7				;a6 = * player data
trtfstart
	movi	RECORD_SELECT,A1
	calla	SET_PAGE

	move	a10,a7

	movi	PKDPR_SIZE/8,a3			;number bytes to fetch
	movi	packed_record,a2
trtfnext_word
	calla	RC_BYTEI
	movb	a0,*a2
	addk	8,a2
	dsj	a3,trtfnext_word

	movi	packed_record,a2

	move	*a2(PKDPR_COUNT),a1		;total plays count
	andi	_10BITS,a1
	move	a1,*a6(PR_COUNT)

	move	*a2(PKDPR_WON),a0
	andi	_10BITS,a0
	move	a0,*a6(PR_WON)

	sub	a0,a1				;total plays - wins = losses

	move	a1,*a6(PR_LOST)

	move	*a2(PKDPR_LASTPLAY),a0
	andi	_11BITS,a0
	move	a0,*a6(PR_LASTPLAY)

	move	*a2(PKDPR_NAME1),a0
	andi	_5BITS,a0
	move	a0,*a6(PR_NAME1)

	move	*a2(PKDPR_NAME2),a0
	andi	_5BITS,a0
	move	a0,*a6(PR_NAME2)

	move	*a2(PKDPR_NAME3),a0
	andi	_5BITS,a0
	move	a0,*a6(PR_NAME3)

	move	*a2(PKDPR_NAME4),a0
	andi	_5BITS,a0
	move	a0,*a6(PR_NAME4)

	move	*a2(PKDPR_NAME5),a0
	andi	_5BITS,a0
	move	a0,*a6(PR_NAME5)

	move	*a2(PKDPR_NAME6),a0
	andi	_5BITS,a0
	move	a0,*a6(PR_NAME6)

	move	*a2(PKDPR_PIN_NBR1),a0
	andi	_5BITS,a0
	move	a0,*a6(PR_PIN_NBR1)

	move	*a2(PKDPR_PIN_NBR2),a0
	andi	_5BITS,a0
	move	a0,*a6(PR_PIN_NBR2)

	move	*a2(PKDPR_PIN_NBR3),a0
	andi	_5BITS,a0
	move	a0,*a6(PR_PIN_NBR3)

	move	*a2(PKDPR_PIN_NBR4),a0
	andi	_5BITS,a0
	move	a0,*a6(PR_PIN_NBR4)

	move	*a2(PKDPR_TEAMSDEF),a1,L
	andi	_30BITS,a1
	move	a1,*a6(PR_TEAMSDEF),L

	move	*a2(PKDPR_WINSTREAK),a0
	andi	_6BITS,a0
	move	a0,*a6(PR_WINSTREAK)

	move	*a2(PKDPR_TOTAL_PTS),a0
	andi	_7BITS,a0
	move	a0,*a6(PR_TOTAL_PTS)

	move	*a2(PKDPR_HEIGHT_PTS),a0
	andi	_4BITS,a0
	move	a0,*a6(PR_HEIGHT_PTS)

	move	*a2(PKDPR_WEIGHT_PTS),a0
	andi	_4BITS,a0
	move	a0,*a6(PR_WEIGHT_PTS)

	move	*a2(PKDPR_SPEED_PTS),a0
	andi	_4BITS,a0
	move	a0,*a6(PR_SPEED_PTS)

	move	*a2(PKDPR_POWER_PTS),a0
	andi	_4BITS,a0
	move	a0,*a6(PR_POWER_PTS)

	move	*a2(PKDPR_SHOOT_PTS),a0
	andi	_4BITS,a0
	move	a0,*a6(PR_SHOOT_PTS)

	move	*a2(PKDPR_DUNKS_PTS),a0
	andi	_4BITS,a0
	move	a0,*a6(PR_DUNKS_PTS)

	move	*a2(PKDPR_STEAL_PTS),a0
	andi	_4BITS,a0
	move	a0,*a6(PR_STEAL_PTS)

	move	*a2(PKDPR_BLOCKS_PTS),a0
	andi	_4BITS,a0
	move	a0,*a6(PR_BLOCKS_PTS)

	move	*a2(PKDPR_HEAD_NBR),a0
	andi	_8BITS,a0
	move	a0,*a6(PR_HEAD_NBR)

	move	*a2(PKDPR_CREATED_PLYR),a0
	andi	_1BIT,a0
	move	a0,*a6(PR_CREATED_PLYR)

	move	*a2(PKDPR_NICKNAME_NBR),a0
	andi	_6BITS,a0
	move	a0,*a6(PR_NICKNAME_NBR)

	move	*a2(PKDPR_PTS_SCORED),a0
	andi	_16BITS,a0
	move	a0,*a6(PR_PTS_SCORED)

	move	*a2(PKDPR_PTS_ALLOWED),a0
	andi	_16BITS,a0
	move	a0,*a6(PR_PTS_ALLOWED)

	move	*a2(PKDPR_UNIFORM_NBR),a0
	andi	_7BITS,a0
	move	a0,*a6(PR_UNIFORM_NBR)

	move	*a2(PKDPR_TRIVIA_PTS),a0
	andi	_8BITS,a0
	move	a0,*a6(PR_TRIVIA_PTS)

	move	*a2(PKDPR_PRIVILEGES),a0
	andi	_7BITS,a0
	move	a0,*a6(PR_PRIVILEGES)

	PUSH	a2
	clr	a0
	movi	NUM_TEAMS,a2
trtfnext_team
	srl	1,a1
	jrnc	trtfnot_def
	inc	a0			;teams defeated count ++
trtfnot_def
	dsj	a2,trtfnext_team
	move	a0,*a6(PR_NUMDEF)	;number teams defeated
	PULL	a2

	move	*a2(PKDPR_CHECKSUM),a0
	andi	_8BITS,a0
	move	a0,*a6(PR_CHECKSUM)
	move	a0,a1
	callr	calc_checksum
	cmp	a0,a1
	jreq	trtfchecksum_ok

	.if	DEBUG
	LOCKUP
	eint
	.endif

	callr	clear_record		;bad checksum, so delete record
trtfchecksum_ok
	PULL	a6,a7
	rets



 SUBRP	put_temp_record

	PUSH	a6
	movi	temp_record,a6
	jruc	xcqmstart

 SUBRP	put_plr_record

	PUSH	a6
xcqmstart

	movi	RECORD_SELECT,A1
	calla	SET_PAGE

	movi	packed_record,a2

	move	*a6(PR_COUNT),a1
	andi	_10BITS,a1
	move	a1,*a2(PKDPR_COUNT)

	move	*a6(PR_WON),a0
	andi	_10BITS,a0
	move	a0,*a2(PKDPR_WON)

	sub	a0,a1
	move	a1,*a6(PR_LOST)			;used for calc checksum

	move	*a6(PR_LASTPLAY),a0
	andi	_11BITS,a0
	move	a0,*a2(PKDPR_LASTPLAY)

	move	*a6(PR_NAME1),a0
	andi	_5BITS,a0
	move	a0,*a2(PKDPR_NAME1)

	move	*a6(PR_NAME2),a0
	andi	_5BITS,a0
	move	a0,*a2(PKDPR_NAME2)
	
	move	*a6(PR_NAME3),a0
	andi	_5BITS,a0
	move	a0,*a2(PKDPR_NAME3)

	move	*a6(PR_NAME4),a0
	andi	_5BITS,a0
	move	a0,*a2(PKDPR_NAME4)

	move	*a6(PR_NAME5),a0
	andi	_5BITS,a0
	move	a0,*a2(PKDPR_NAME5)

	move	*a6(PR_NAME6),a0
	andi	_5BITS,a0
	move	a0,*a2(PKDPR_NAME6)

	move	*a6(PR_PIN_NBR1),a0
	andi	_5BITS,a0
	move	a0,*a2(PKDPR_PIN_NBR1)

	move	*a6(PR_PIN_NBR2),a0
	andi	_5BITS,a0
	move	a0,*a2(PKDPR_PIN_NBR2)

	move	*a6(PR_PIN_NBR3),a0
	andi	_5BITS,a0
	move	a0,*a2(PKDPR_PIN_NBR3)

	move	*a6(PR_PIN_NBR4),a0
	andi	_5BITS,a0
	move	a0,*a2(PKDPR_PIN_NBR4)

	move	*a6(PR_TEAMSDEF),a0,L
	andi	_30BITS,a0
	move	a0,*a2(PKDPR_TEAMSDEF),L

	move	*a6(PR_WINSTREAK),a0
	andi	_6BITS,a0
	move	a0,*a2(PKDPR_WINSTREAK)

	move	*a6(PR_TOTAL_PTS),a0
	andi	_7BITS,a0
	move	a0,*a2(PKDPR_TOTAL_PTS)

	move	*a6(PR_HEIGHT_PTS),a0
	andi	_4BITS,a0
	move	a0,*a2(PKDPR_HEIGHT_PTS)

	move	*a6(PR_WEIGHT_PTS),a0
	andi	_4BITS,a0
	move	a0,*a2(PKDPR_WEIGHT_PTS)

	move	*a6(PR_SPEED_PTS),a0
	andi	_4BITS,a0
	move	a0,*a2(PKDPR_SPEED_PTS)

	move	*a6(PR_POWER_PTS),a0
	andi	_4BITS,a0
	move	a0,*a2(PKDPR_POWER_PTS)

	move	*a6(PR_SHOOT_PTS),a0
	andi	_4BITS,a0
	move	a0,*a2(PKDPR_SHOOT_PTS)

	move	*a6(PR_DUNKS_PTS),a0
	andi	_4BITS,a0
	move	a0,*a2(PKDPR_DUNKS_PTS)

	move	*a6(PR_STEAL_PTS),a0
	andi	_4BITS,a0
	move	a0,*a2(PKDPR_STEAL_PTS)

	move	*a6(PR_BLOCKS_PTS),a0
	andi	_4BITS,a0
	move	a0,*a2(PKDPR_BLOCKS_PTS)

	move	*a6(PR_HEAD_NBR),a0
	andi	_8BITS,a0
	move	a0,*a2(PKDPR_HEAD_NBR)

	move	*a6(PR_CREATED_PLYR),a0
	andi	_1BIT,a0
	move	a0,*a2(PKDPR_CREATED_PLYR)

	move	*a6(PR_NICKNAME_NBR),a0
	andi	_6BITS,a0
	move	a0,*a2(PKDPR_NICKNAME_NBR)

	move	*a6(PR_PTS_SCORED),a0
	andi	_16BITS,a0
	move	a0,*a2(PKDPR_PTS_SCORED)

	move	*a6(PR_PTS_ALLOWED),a0
	andi	_16BITS,a0
	move	a0,*a2(PKDPR_PTS_ALLOWED)

	move	*a6(PR_UNIFORM_NBR),a0
	andi	_7BITS,a0
	move	a0,*a2(PKDPR_UNIFORM_NBR)

	move	*a6(PR_TRIVIA_PTS),a0
	andi	_8BITS,a0
	move	a0,*a2(PKDPR_TRIVIA_PTS)

	move	*a6(PR_PRIVILEGES),a0
	andi	_7BITS,a0
	move	a0,*a2(PKDPR_PRIVILEGES)

	callr	calc_checksum			;8 bit xor checksum
	andi	_8BITS,a0
	move	a0,*a2(PKDPR_CHECKSUM)

	PUSH	a7
	move	a10,a7

	movi	PKDPR_SIZE/8,a3			;number bytes to write
	movi	packed_record,a2
xcqmnext_word
	movb	*a2,a0
	calla	WC_BYTEI
	addk	8,a2
	dsj	a3,xcqmnext_word

	PULL	a7
	PULL	a6
	rets


 SUBRP	find_record

	movi	RECORD_SELECT,A1
	calla	SET_PAGE

	clr	a11
	movi	RECORD_ORIGIN,a10
plqasearch_loop
	callr	get_temp_record		;data in temp_record
	callr	compare_record
	jrne	plqano_match
	rets

plqano_match
	addi	PKDPR_SIZE*2,a10	;cmos words

	inc	a11
	cmpi	NUM_PRECORDS-1,a11
	jrlo	plqasearch_loop
	clr	a10
 	rets


 SUBRP	get_free_record

	movi	RECORD_SELECT,A1
	calla	SET_PAGE

	movi	1024,a8			;last play count (max)
	movi	NUM_PRECORDS,a11
	movi	RECORD_ORIGIN,a10
	move	a10,a9			;least used record to date
bagesearch_loop
	callr	get_temp_record

	move	@temp_record+PR_COUNT,a0
	jrnz	bageplyd
	move	@temp_record+PR_CREATED_PLYR,a0
	jrle	bagefree_record			;br=!created plr & no gme plyd
bageplyd
	move	@temp_record+PR_LASTPLAY,a0

	cmp	a8,a0			;a0-a8
	jrhs	bageskip			;skip if a0 >= a8
	move	a0,a8
	move	a10,a9			;least used record to date
bageskip					;(lowest lastplay count)
	addi	PKDPR_SIZE*2,a10	;cmos words
	dsj	a11,bagesearch_loop
	move	a9,a10
	rets

bagefree_record
 	rets


 SUBRP	compare_record

	move	@temp_record+PR_COUNT,a1	;valid record?
	jrnz	kobomybe				;br=so far...

	move	@temp_record+PR_CREATED_PLYR,a1	;created player ?
	jrle	kobono_match			;br=yes, and no games played

kobomybe	move	*a6(PR_NAME1),a0
	move	@temp_record+PR_NAME1,a1
	cmp	a0,a1
	jrne	kobono_match

	move	*a6(PR_NAME2),a0
	move	@temp_record+PR_NAME2,a1
	cmp	a0,a1
	jrne	kobono_match

	move	*a6(PR_NAME3),a0
	move	@temp_record+PR_NAME3,a1
	cmp	a0,a1
	jrne	kobono_match

	move	*a6(PR_NAME4),a0
	move	@temp_record+PR_NAME4,a1
	cmp	a0,a1
	jrne	kobono_match

	move	*a6(PR_NAME5),a0
	move	@temp_record+PR_NAME5,a1
	cmp	a0,a1
	jrne	kobono_match

	move	*a6(PR_NAME6),a0
	move	@temp_record+PR_NAME6,a1
	cmp	a0,a1
	jrne	kobono_match

	move	*a6(PR_PIN_NBR1),a0		;just entered pin number kobo1
	move	@temp_record+PR_PIN_NBR1,a1	;number in players record
	cmp	a0,a1				;do they match ?
	jrne	kobono_match			;br=no

	move	*a6(PR_PIN_NBR2),a0		;just entered pin number kobo2
	move	@temp_record+PR_PIN_NBR2,a1	;number in players record
	cmp	a0,a1				;do they match ?
	jrne	kobono_match			;br=no

	move	*a6(PR_PIN_NBR3),a0		;just entered pin number kobo3
	move	@temp_record+PR_PIN_NBR3,a1	;number in players record
	cmp	a0,a1				;do they match ?
	jrne	kobono_match			;br=no

	move	*a6(PR_PIN_NBR4),a0		;just entered pin number kobo4
	move	@temp_record+PR_PIN_NBR4,a1	;number in players record
	cmp	a0,a1				;do they match ?
	jrne	kobono_match			;br=no
	rets					;Z set

kobono_match
	movi	1,a0				;clear Z
	rets

 SUBR	get_plr_rank

	PUSH	a8
	movk	1,a2
	movi	record_sort_ptrs,a9
qpnwloop
	move	*a9,a8,L
	move	*a8(RS_RECORD_NUM),a0
	cmp	a4,a0
	jreq	qpnwfound_match

	addi	20h,a9
	inc	a2
	cmpi	NUM_PRECORDS,a2
	jrls	qpnwloop
qpnwfound_match
	PULL	a8
	rets

 SUBRP	get_player_record

	move	*a13(PC_DATADDR),a6,L		;start of player data

	callr	find_record
	move	a10,a10
	jrz	rijsno_match
	callr	get_plr_record


	move	a11,a4

	callr	get_plr_rank
	move	*a13(PC_DATADDR),a6,L		;start of player data
	move	a2,*a6(PR_RANK)
	rets

rijsno_match
	clr	a0
	move	a0,*a6(PR_COUNT)
	move	a0,*a6(PR_WON)
	move	a0,*a6(PR_LOST)
	move	a0,*a6(PR_LASTPLAY)
	move	a0,*a6(PR_TEAMSDEF),L
	move	a0,*a6(PR_NUMDEF)
	move	a0,*a6(PR_NUMDEFOLD)
	move	a0,*a6(PR_WINSTREAK)
	move	a0,*a6(PR_TOTAL_PTS)
	move	a0,*a6(PR_HEIGHT_PTS)
	move	a0,*a6(PR_WEIGHT_PTS)
	move	a0,*a6(PR_SPEED_PTS)
	move	a0,*a6(PR_POWER_PTS)
	move	a0,*a6(PR_SHOOT_PTS)
	move	a0,*a6(PR_DUNKS_PTS)
	move	a0,*a6(PR_STEAL_PTS)
	move	a0,*a6(PR_BLOCKS_PTS)
	move	a0,*a6(PR_HEAD_NBR)
	move	a0,*a6(PR_CREATED_PLYR)
	move	a0,*a6(PR_NICKNAME_NBR)
	move	a0,*a6(PR_PTS_SCORED)
	move	a0,*a6(PR_PTS_ALLOWED)
	move	a0,*a6(PR_UNIFORM_NBR)
	move	a0,*a6(PR_TRIVIA_PTS)
	move	a0,*a6(PR_PRIVILEGES)
	movi	NUM_PRECORDS,a0
	move	a0,*a6(PR_RANK)
	rets


 SUBRP	save_record

	callr	find_record
	move	a10,a10
	jrnz	wsxvfound_match
	movk	1,a0			;1st game
	move	a0,*a6(PR_COUNT)
	movi	50,a0
	move	a0,*a6(PR_LASTPLAY)
	callr	get_free_record
	callr	put_plr_record
	rets

wsxvfound_match

	move	*a6(PR_COUNT),a0
	cmpi	1023,a0
	jrhs	wsxvat_max
	inc	a0			;play count (check for wrap!!!)
	move	a0,*a6(PR_COUNT)
wsxvat_max
	move	*a6(PR_LASTPLAY),a0
	addi	50,a0
	cmpi	1023,a0
	jrle	wsxvok
	movi	1023,a0
wsxvok
	move	a0,*a6(PR_LASTPLAY)	;zero lastplay count
	move	*a6(PR_NUMDEF),a0
	move	a0,*a6(PR_NUMDEFOLD)
	callr	put_plr_record
	rets


 SUBRP	dec_lastplay

	movi	NUM_PRECORDS,a11
	movi	RECORD_ORIGIN,a10
fkfqdec_loop
	PUSH	a10,a11

	callr	get_temp_record		;read record
	move	@temp_record+PR_LASTPLAY,a0
	jrz	fkfqat_min
	dec	a0
	move	a0,@temp_record+PR_LASTPLAY
	callr	put_temp_record		;write out record
fkfqat_min

	PULL	a10,a11
	addi	PKDPR_SIZE*2,a10	;cmos words
	dsj	a11,fkfqdec_loop
	rets


 SUBR	get_all_records

	PUSH	a12

	movi	record_sort_ptrs,a12
	clr	a11
	movi	RECORD_ORIGIN,a10
	movi	record_sort_ram,a9
lefnget_next
	PUSH	a9,a10,a11,a12

	callr	get_temp_record		;read record

	PULL	a9,a10,a11,a12

	move	a11,*a9(RS_RECORD_NUM)

	move	@temp_record+PR_COUNT,a0
	subk	REC_MINGAMES,a0
	jrle	lefninval
	move	@temp_record+PR_NAME1,a0
	jrgt	lefnvldnme
lefninval
	movi	500,a14
	move	a14,*a9(RS_OFF_RANK)		;AVG. PTS scored
	movi	7000,a14
	move	a14,*a9(RS_DEF_RANK)		;AVG. PTS allowed
	clr	a14
	move	a14,*a9(RS_TRIVIA_PTS)
	move	a14,*a9(RS_WINS)
	jruc	lefnnonme
lefnvldnme
	move	@temp_record+PR_TRIVIA_PTS,a0
	move	a0,*a9(RS_TRIVIA_PTS)

	move	@temp_record+PR_PTS_SCORED,a0
	movi	100,a1				;2 decimal place purcision
	mpyu	a0,a1				;wins*1000
	move	@temp_record+PR_COUNT,a0	;games played
	divu	a0,a1				;wins*
	move	a1,*a9(RS_OFF_RANK)		;AVG. PTS scored

	move	@temp_record+PR_PTS_ALLOWED,a0
	movi	100,a1
	mpyu	a0,a1				;*1000
	move	@temp_record+PR_COUNT,a0	;games played
	divu	a0,a1				;wins*1000/played
	move	a1,*a9(RS_DEF_RANK)		;AVG. PTS allowed

	move	@temp_record+PR_WON,a0		;wins
	move	a0,*a9(RS_WINS)
	jrnz	lefnhas_wins
lefnnonme
	move	@temp_record+PR_COUNT,a0	;games played
	move	a0,*a9(RS_GAMES_PLAYED)
	clr	a0
	move	a0,*a9(RS_AVERAGE)
	move	a0,*a9(RS_TEAMSDEF)
	move	a0,*a9(RS_STREAK)
	jruc	lefncont1

lefnhas_wins
	movi	1000,a1
	mpyu	a0,a1				;wins*1000
	move	@temp_record+PR_COUNT,a0	;games played
	move	a0,*a9(RS_GAMES_PLAYED)
	divu	a0,a1				;wins*1000/played
	move	a1,*a9(RS_AVERAGE)

	move	@temp_record+PR_NUMDEF,a0	;number teams defeated
	move	a0,*a9(RS_TEAMSDEF)

	move	@temp_record+PR_WINSTREAK,a0
	move	a0,*a9(RS_STREAK)

lefncont1
	move	a9,*a12+,L
	addi	RS_SIZE,a9
	addi	PKDPR_SIZE*2,a10	;cmos words
	inc	a11
	cmpi	NUM_PRECORDS,a11
	jrlo	lefnget_next

	PULL	a12			;process SP
	rets


 SUBR	compute_plyr_def_rank

	PUSH	a2,a9,a10

	movi	record_sort_ptrs,a10,L
	movi	NUM_PRECORDS-1,a2			;loop count
	movi	NUM_PRECORDS-1,a1			;start as worst
cpdr_1
	move	*a10+,a14,L
	move	*a14(RS_DEF_RANK),a14
	cmpi	7000,a14			;brand new record ?
	jreq	cpdr_1a				;br=yep
	cmp	a14,a0				;is this player better ?
	jrgt	cpdr_2				;br=worse rank
cpdr_1a
	dec	a1				;new rank
cpdr_2
	dsj	a2,cpdr_1
	addk	1,a1				;not ZERO rank allowed
	move	a1,a0
cpdr_3	PULL	a2,a9,a10
 	rets

 SUBR	compute_plyr_off_rank

	PUSH	a2,a9,a10

	movi	record_sort_ptrs,a10,L
	movi	NUM_PRECORDS-1,a2			;loop count
	movi	NUM_PRECORDS-1,a1			;start as worst
cpor_1
	move	*a10+,a14,L
	move	*a14(RS_OFF_RANK),a14
	cmp	a14,a0				;is this player better ?
	jrlo	cpor_2				;br=
	dec	a1				;new rank
cpor_2
	dsj	a2,cpor_1
	addk	1,a1				;not ZERO rank allowed
	move	a1,a0
cpor_3	PULL	a2,a9,a10
 	rets



 SUBRP	sort_wins

	movi	NUM_PRECORDS-1,a11
zetkloop1
	movi	NUM_PRECORDS-1,a10

	movi	record_sort_ptrs,a9

	clr	a14
zetkloop2
	move	*a9,a4,L
	move	*a9(20h),a5,L

	move	*a4(RS_WINS),a0
	move	*a5(RS_WINS),a1
	cmp	a1,a0				;a0-a1
	jrhi	zetkno_swap
	jrlo	zetkswap

	move	*a4(RS_AVERAGE),a0
	move	*a5(RS_AVERAGE),a1
	cmp	a1,a0				;a0-a1
	jrhi	zetkno_swap
	jrlo	zetkswap


	move	*a4(RS_TEAMSDEF),a0
	move	*a5(RS_TEAMSDEF),a1
	cmp	a1,a0				;a0-a1
	jrhs	zetkno_swap

zetkswap
	movk	1,a14

	move	a5,*a9,L
	move	a4,*a9(20h),L

zetkno_swap
	addi	20h,a9

	dsj	a10,zetkloop2
	move	a14,a14
	jrz	zetkdone
	dsj	a11,zetkloop1
zetkdone
	rets

 SUBRP	sort_streak

	movi	NUM_PRECORDS-1,a11
iydtloop1
	movi	NUM_PRECORDS-1,a10
	movi	record_sort_ptrs,a9
	clr	a14
iydtloop2
	move	*a9,a4,L
	move	*a9(20h),a5,L

	move	*a4(RS_STREAK),a0
	move	*a5(RS_STREAK),a1
	cmp	a1,a0				;a0-a1
	jrhi	iydtno_swap
	jrlo	iydtswap

	move	*a4(RS_WINS),a0
	move	*a5(RS_WINS),a1
	cmp	a1,a0				;a0-a1
	jrhi	iydtno_swap
	jrlo	iydtswap

	move	*a4(RS_AVERAGE),a0
	move	*a5(RS_AVERAGE),a1
	cmp	a1,a0				;a0-a1
	jrhi	iydtno_swap
	jrlo	iydtswap


	move	*a4(RS_TEAMSDEF),a0
	move	*a5(RS_TEAMSDEF),a1
	cmp	a1,a0				;a0-a1
	jrhs	iydtno_swap

iydtswap
	movk	1,a14
	move	a5,*a9,L
	move	a4,*a9(20h),L
iydtno_swap
	addi	20h,a9
	dsj	a10,iydtloop2
	move	a14,a14
	jrz	iydtdone
	dsj	a11,iydtloop1
iydtdone
	rets

 SUBRP	sort_exp

	movi	NUM_PRECORDS-1,a11
axdoloop1
	movi	NUM_PRECORDS-1,a10
	movi	record_sort_ptrs,a9
	clr	a14
axdoloop2
	move	*a9,a4,L
	move	*a9(20h),a5,L
	move	*a4(RS_GAMES_PLAYED),a0
	move	*a5(RS_GAMES_PLAYED),a1
	cmp	a1,a0				;a0-a1
	jrhi	axdono_swap
	jrlo	axdoswap

	move	*a4(RS_WINS),a0
	move	*a5(RS_WINS),a1
	cmp	a1,a0				;a0-a1
	jrhi	axdono_swap
	jrlo	axdoswap

	move	*a4(RS_AVERAGE),a0
	move	*a5(RS_AVERAGE),a1
	cmp	a1,a0				;a0-a1
	jrhi	axdono_swap
	jrlo	axdoswap


	move	*a4(RS_TEAMSDEF),a0
	move	*a5(RS_TEAMSDEF),a1
	cmp	a1,a0				;a0-a1
	jrhs	axdono_swap

axdoswap
	movk	1,a14
	move	a5,*a9,L
	move	a4,*a9(20h),L
axdono_swap
	addi	20h,a9
	dsj	a10,axdoloop2
	move	a14,a14
	jrz	axdodone
	dsj	a11,axdoloop1
axdodone
	rets

 SUBRP	sort_champs

	movi	NUM_PRECORDS-1,a11
zaxgloop1
	movi	NUM_PRECORDS-1,a10
	movi	record_sort_ptrs,a9
	clr	a14
zaxgloop2
	move	*a9,a4,L
	move	*a9(20h),a5,L
	move	*a4(RS_TEAMSDEF),a0
	move	*a5(RS_TEAMSDEF),a1
	cmp	a1,a0				;a0-a1
	jrhi	zaxgno_swap
	jrlo	zaxgswap

	move	*a4(RS_WINS),a0
	move	*a5(RS_WINS),a1
	cmp	a1,a0				;a0-a1
	jrhi	zaxgno_swap
	jrlo	zaxgswap

	move	*a4(RS_AVERAGE),a0
	move	*a5(RS_AVERAGE),a1
	cmp	a1,a0				;a0-a1
	jrhs	zaxgno_swap
zaxgswap
	movk	1,a14
	move	a5,*a9,L
	move	a4,*a9(20h),L
zaxgno_swap
	addi	20h,a9
	dsj	a10,zaxgloop2
	move	a14,a14
	jrz	zaxgdone
	dsj	a11,zaxgloop1
zaxgdone
	rets


 SUBR	calc_num_defeated

	PUSH	a1,a2
	clr	a0
	movi	NUM_TEAMS,a2
prlknext_team
	srl	1,a1
	jrnc	prlknot_def
	inc	a0			;teams defeated count ++
prlknot_def
	dsj	a2,prlknext_team
	PULL	a1,a2
	rets

 SUBRP	clear_player_records

	clr	a0
	movi	PR_SIZE/16,a1
	movi	temp_record,a2
jqggclrit
	move	a0,*a2+
	dsj	a1,jqggclrit

	movi	NUM_PRECORDS,a11
	movi	RECORD_ORIGIN,a10
jqggclear_loop
	PUSH	a10,a11

	callr	put_temp_record		;write out record

	PULL	a10,a11
	addi	PKDPR_SIZE*2,a10	;cmos words
	dsj	a11,jqggclear_loop

	movk	8,a11			;23 lines in 'team_inits' table

	movi	RECORD_ORIGIN,a10
	movi	jqggdefault_records,a9
jqgginit_loop
	PUSH	a9,a10,a11

	movb	*a9(NAME1),a0
	subi	'@',a0
	move	a0,@temp_record+PR_NAME1
	movb	*a9(NAME2),a0
	subi	'@',a0
	move	a0,@temp_record+PR_NAME2
	movb	*a9(NAME3),a0
	subi	'@',a0
	move	a0,@temp_record+PR_NAME3
	movb	*a9(NAME4),a0
	subi	'@',a0
	move	a0,@temp_record+PR_NAME4
	movb	*a9(NAME5),a0
	subi	'@',a0
	move	a0,@temp_record+PR_NAME5
	movb	*a9(NAME6),a0
	subi	'@',a0
	move	a0,@temp_record+PR_NAME6

	movb	*a9(PIN1),a0
	subi	'0',a0
	move	a0,@temp_record+PR_PIN_NBR1

	movb	*a9(PIN2),a0
	subi	'0',a0
	move	a0,@temp_record+PR_PIN_NBR2

	movb	*a9(PIN3),a0
	subi	'0',a0
	move	a0,@temp_record+PR_PIN_NBR3

	movb	*a9(PIN4),a0
	subi	'0',a0
	move	a0,@temp_record+PR_PIN_NBR4

	move	*a9(GAMPLYD),a0
	move	a0,@temp_record+PR_COUNT	;games played

	move	*a9(WINS),a0
	move	a0,@temp_record+PR_WON		;wins

	move	*a9(WINSTRK),a0
	move	a0,@temp_record+PR_WINSTREAK

	clr	a0
	move	a0,@temp_record+PR_NICKNAME_NBR
	move	a0,@temp_record+PR_CREATED_PLYR
	move	a0,@temp_record+PR_TRIVIA_PTS
	move	a0,@temp_record+PR_PRIVILEGES
	movi	150,a0
	move	a0,@temp_record+PR_PTS_SCORED
	movi	350,a0
	move	a0,@temp_record+PR_PTS_ALLOWED

	move	*a9(TMSDEF),a0,L
	move	a0,@temp_record+PR_TEAMSDEF,L

	movi	1023,a0
	move	a0,@temp_record+PR_LASTPLAY


	callr	put_temp_record
	PULL	a9,a10,a11

	addi	10*10h,a9
	addi	PKDPR_SIZE*2,a10	;cmos words
	dsj	a11,jqgginit_loop
	rets


RECMAC	.macro	NAME,PIN_NUM,PLAYED,WINS,STREAK,DEFEATED
	.string	":NAME:"
	.string ":PIN_NUM:"
	.word	:PLAYED:,:WINS:,:STREAK:
	.long	:DEFEATED:
	.endm
	.even
jqggdefault_records
	RECMAC	"TURMEL", "0000", 5,4,4,000001001000000100010000000000b
	RECMAC	"JAPPLE", "0000", 5,4,4,000001010010000100000000000000b
	RECMAC	"DIVITA", "0000", 5,1,0,000000000000000000000100000000b
	RECMAC	"EUGENE", "0000", 5,3,0,000000000001010100000000000000b
	RECMAC	"JENIFR", "0000", 5,3,2,000010010000010000000000000000b
	RECMAC	"DANIEL", "0000", 5,2,2,000001000010010100000000000000b
	RECMAC	"CARLTN", "0000", 5,2,1,000000001000010000000000000000b
	RECMAC	"CARLOS", "0000", 5,2,0,000000000000000000000000101000b
	RECMAC	"MARTIN", "0000", 5,3,3,000000000010000000001000000001b
	.even



 SUBRP	clear_record

	clr	a0
	move	a0,@temp_record+00h,L
	move	a0,@temp_record+20h,L
	move	a0,@temp_record+40h,L
	callr	put_temp_record		;write out record
	rets

	.asg	24,YOFF
	.asg	61,COL0			;#
	.asg	COL0+23,COL0b		;1-8
	.asg	160,COL1		;initials
	.asg	253,COL2		;wins
	.asg	COL2+2,COL3		;dash
	.asg	COL3+15,COL4		;losses
	.asg	318,COL5		;average

 SUBR	show_hiscore

	andi	7,a0
	move	a0,@hiscore_type

	callr	get_all_records

	calla	display_blank
	calla	WIPEOUT			;CLEAN SYSTEM OUT

	movk	1,a0			;page flipping on
	move	a0,@dpageflip

	clr	a0
	move	a0,@IRQSKYE

	movi	SCRNEND,a0		;[256,405]
	move	a0,@SCRNLR,L

	clr	a0
	move	a0,@WORLDTLX,L
	move	a0,@WORLDTLY,L

	SLEEPK	2

	movi	amyvhiscore_mod,a0
	move	a0,@BAKMODS,L
	calla	BGND_UD1

	movk	1,a0
	calla	create_title_bar
	calla	create_hi_score_page_objs

	movi	[1,31],a8			;START COLOR,# COLORS TO CYCLE
	movi	BST18B2_P,a9			;PAL NAME
	movi	BSTCYCB_P,a10
	movk	2,a11				;RATE OF CYCLE IN TICKS
	CREATE	CYCPID,CYCLE_TABLE		;START PROCESS TO DO CYCLE

	clr	a0
amyvloopit
	move	a0,@hiscore_type

	movi	TYPTEXT,a0			;delete text
	calla	obj_del1c
	movi	TYPTEXT+1,a0			;delete text
	calla	obj_del1c
	movi	TYPTEXT+2,a0			;delete text
	calla	obj_del1c
	movi	TYPTEXT+3,a0			;delete text
	calla	obj_del1c
	movi	TYPTEXT+4,a0			;delete text
	calla	obj_del1c
	movi	TYPTEXT+5,a0			;delete text
	calla	obj_del1c
	movi	TYPTEXT+6,a0			;delete text
	calla	obj_del1c
	movi	TYPTEXT+7,a0			;delete text
	calla	obj_del1c
	movi	TYPTEXT+8,a0			;delete text
	calla	obj_del1c

	callr	print_hiscore_heading

	move	@hiscore_type,a0
	sll	5,a0				;x 32 bits
	addi	amyvsort_routines,a0
	move	*a0,a0,L
	call	a0

	move	@hiscore_type,a0
	sll	5,a0				;x 32 bits
	addi	amyvprint_methods,a0
	move	*a0,a0,L
	JSRPR	a0

	move	@hiscore_type,a0
	jrnz	amyvno_unblank


	movk	1,a0
	move	a0,@DISPLAYON
	calla	display_unblank
amyvno_unblank

	move	@hiscore_type,a0		;get 'showing' hiscore page
	cmpi	2,a0				;no trans. for first 3 pages
	jrls	amyvskipt

	movi	3*TSEC,a10
amyvwaitt
	SLEEPK	1
	dsj	a10,amyvwaitd
	move	@hiscore_cnt,a14		;wait until done sliding on
	jrgt	amyvwaitt

amyvwaitd	movi	TYPTEXT+8,a8
	movi	TYPTEXT+1,a9
	CREATE	HISCR_SCALE_PID,create_scale_processes
amyvskipt
	SLEEPK	25
	movi	6*TSEC,a10
amyvdelay
	SLEEPK	1
	calla	get_all_buttons_cur2
	jrnz	amyvexit0
	dsj	a10,amyvdelay
	jruc	amyvexit
amyvexit0
	movi	HISCR_SCALE_PID,a0
	calla	KIL1C
	clr	a0
	move	a0,@SOUNDSUP		;turn all sounds on
	SOUND1	bounce_snd
	movk	1,a0
	move	a0,@SOUNDSUP		;turn all sounds off
	jruc	amyvskipt2			;br=dont do obj. transition
amyvexit
	movi	HISCR_SCALE_PID,a0
	calla	KIL1C

	move	@hiscore_type,a0	;get 'showing' hiscore page
	cmpi	2,a0			;no trans. for first 3 pages
	jrls	amyvskipt2


	movi	2*TSEC,a10
amyvdelay1
	SLEEPK	1
	calla	get_all_buttons_cur2
	jrnz	amyvskipt2
	dsj	a10,amyvdelay1
amyvexit1
	movi	TYPTEXT+1,a8
	movi	TYPTEXT+8,a9
	JSRP	slide_lines_right

amyvskipt2	move	@hiscore_type,a0
	inc	a0
	cmpi	HISCORE_TABLES,a0
	jrle	amyvloopit

	movi	CYCPID,a0
	calla	KIL1C
	RETP

print_hiscore_heading

	movi	amyvheading1_setup,a2
	calla	setup_message
	move	@hiscore_type,a0
	sll	5,a0				;x 32 bits
	addi	amyvheadings1,a0
	move	*a0,a4,L
	calla	print_string_C2

	movi	amyvheading2_setup,a2
	calla	setup_message
	move	@hiscore_type,a0
	sll	5,a0				;x 32 bits
	addi	amyvheadings2,a0
	move	*a0,a4,L
	calla	print_string_C2
	rets


	.def	COLTAB2
COLTAB2
	.word   0079fh,0077eh,0077eh,0035eh,0033eh,0031eh,002feh
	.word   002feh,002deh,002beh,002beh,0029eh,0029eh,0027dh,0025dh
	.word   0025dh,0023dh,0023dh,0021eh,0023eh,0025eh,0027eh,0029eh
	.word   0029eh,002beh,002deh,002feh,0033eh,0035eh,0077eh,0079eh
	.word   0079eh,0037eh,0037eh,0035eh,0033eh,0033eh,0031eh,0031eh
	.word   002feh,002feh,0131eh,0273eh,03b5eh,04f9fh,063bfh,077ffh
	.word   063bfh,04f9fh,03b5eh,0273eh,0131eh,002feh,002feh,0031eh
	.word   0031eh,0033eh,0033eh,0035eh,0037eh,0037eh,0079eh,0079eh

	.word   0079fh,0077eh,0077eh,0035eh,0033eh,0031eh,002feh
	.word   002feh,002deh,002beh,002beh,0029eh,0029eh,0027dh,0025dh
	.word   0025dh,0023dh,0023dh,0021eh,0023eh,0025eh,0027eh,0029eh
	.word   0029eh,002beh,002deh,002feh,0033eh,0035eh,0077eh,0079eh
	.word   0079eh,0037eh,0037eh,0035eh,0033eh,0033eh,0031eh,0031eh
	.word   002feh,002feh,0131eh,0273eh,03b5eh,04f9fh,063bfh,077ffh
	.word   063bfh,04f9fh,03b5eh,0273eh,0131eh,002feh,002feh,0031eh
	.word   0031eh,0033eh,0033eh,0035eh,0037eh,0037eh,0079eh,0079eh
	.word	-1


   .def	BSTCYCB_P,BSTCYCY_P

BSTCYCY_P
   .word   07f00h,07f20h,07f40h,07f60h,07fa0h,07fe0h,07fefh
   .word   07fffh,07fefh,07fe0h,07f80h,07f20h,07ec0h,07e40h,07de0h
   .word   07e00h,07e40h,07e60h,07ea0h,07ec0h,07f00h,07f20h,07f00h
   .word   07ec0h,07ea0h,07a80h,07a60h,07a20h,07a00h,079e0h,075a0h
   .word   07580h,07560h,075a0h,075c0h,07600h,07a21h,07a61h,07a82h
   .word   07ac3h,07ae3h,07b24h,07b44h,07f65h,07fa6h,07fc6h,07fe7h
   .word   07fe0h,07fe5h,07fech,07ff2h,07ff9h,07fffh,07fdch,07fd8h
   .word   07fb5h,07f91h,07f6eh,07f6ah,07f47h,07f23h,07f20h,07f00h

   .word   07f00h,07f20h,07f40h,07f60h,07fa0h,07fe0h,07fefh
   .word   07fffh,07fefh,07fe0h,07f80h,07f20h,07ec0h,07e40h,07de0h
   .word   07e00h,07e40h,07e60h,07ea0h,07ec0h,07f00h,07f20h,07f00h
   .word   07ec0h,07ea0h,07a80h,07a60h,07a20h,07a00h,079e0h,075a0h
   .word   07580h,07560h,075a0h,075c0h,07600h,07a21h,07a61h,07a82h
   .word   07ac3h,07ae3h,07b24h,07b44h,07f65h,07fa6h,07fc6h,07fe7h
   .word   07fe0h,07fe5h,07fech,07ff2h,07ff9h,07fffh,07fdch,07fd8h
   .word   07fb5h,07f91h,07f6eh,07f6ah,07f47h,07f23h,07f20h,07f00h
   .word   -1


BSTCYCB_P
   .word   001f9h,0023ah,0027bh,002bch,0031ch,0035dh,0039eh
   .word   003ffh,003ffh,003dfh,0039fh,0037fh,0035fh,0031fh,002ffh
   .word   002dfh,0029fh,0027fh,0025fh,0025fh,0027fh,0029fh,002bfh
   .word   002dfh,002ffh,0031fh,0033fh,0035fh,0037fh,0039fh,0035fh
   .word   0031fh,002ffh,002bfh,0027fh,0025fh,0025fh,0027fh,0029fh
   .word   0029fh,002bfh,002dfh,002ffh,002ffh,0031fh,0033fh,0033fh
   .word   0035fh,0037fh,0039fh,0039fh,003bfh,0039fh,0035eh,0033dh
   .word   0031dh,002dch,002bch,0029bh,0025bh,0023ah,0021ah,0021ah

   .word   001f9h,0023ah,0027bh,002bch,0031ch,0035dh,0039eh
   .word   003ffh,003ffh,003dfh,0039fh,0037fh,0035fh,0031fh,002ffh
   .word   002dfh,0029fh,0027fh,0025fh,0025fh,0027fh,0029fh,002bfh
   .word   002dfh,002ffh,0031fh,0033fh,0035fh,0037fh,0039fh,0035fh
   .word   0031fh,002ffh,002bfh,0027fh,0025fh,0025fh,0027fh,0029fh
   .word   0029fh,002bfh,002dfh,002ffh,002ffh,0031fh,0033fh,0033fh
   .word   0035fh,0037fh,0039fh,0039fh,003bfh,0039fh,0035eh,0033dh
   .word   0031dh,002dch,002bch,0029bh,0025bh,0023ah,0021ah,0021ah
   .word   -1










	.even
amyvprint_methods
	.long	amyvmethod0		;0 (best overall player)
	.long	amyvmethod2b		;1 (grand champions)
	.long	amyvmethod6		;2 (world records)
	.long	amyvmethod1		;3 (best win %)
	.long	amyvmethod1		;4 (most games won)
	.long	amyvmethod4		;5 (best offensive player)
	.long	amyvmethod5		;6 (best defensive player)
	.long	amyvmethod2		;7 (experienced players)
	.long	amyvmethod1b		;8 (win streak)
	.long	amyvmethod8		;9 (most trivia points)
	.long	amyvmethod3		;10 (most popular teams)


	.asg	50,TOP_LINE

	.asg	75,STAT1_X
	.asg	166,STAT1_Y

	.asg	150,STAT2_X
	.asg	166,STAT2_Y

	.asg	213,STAT3_X
	.asg	166,STAT3_Y

	.asg	271,STAT4_X
	.asg	166,STAT4_Y

	.asg	346,STAT5_X
	.asg	166,STAT5_Y

	.asg	70,STAT6_X
	.asg	220,STAT6_Y

	.asg	150,STAT7_X
	.asg	220,STAT7_Y

	.asg	256,STAT8_X
	.asg	220,STAT8_Y

	.asg	341,STAT9_X
	.asg	220,STAT9_Y

amyvmethod0

	movi	record_sort_ptrs,a9
	move	*a9,a8,L			;get first rec. sort ptr.
	move	*a8(RS_RECORD_NUM),a0
	movi	PKDPR_SIZE*2,a1			;cmos words
	mpyu	a0,a1
	addi	RECORD_ORIGIN,a1
	move	a1,a10
	callr	get_temp_record

	movi	temp_record+PR_NAME1,a4
	movi	message_buffer,a3		;* string dest
	calla	get_name_string
	movi	name_str_setup,a2
	calla	setup_message
	calla	print_string_C

 	movi	temp_record,a6

	movi	stats_msg_setup,a2
	calla	setup_message

	movk	11,a0
	move	a0,@mess_line_spacing
	movi	stats_msg,a4,L
	calla	print_string_C2


	movi	BAST_W_P,a14
	move	a14,@message_palette,L

	movi	STAT1_X,a0
	move	a0,@mess_cursx
	movi	STAT1_Y,a0
	move	a0,@mess_cursy

	move	*a8(RS_WINS),a0
	movi	1024,a1				;max value
	calla	dec_to_asc
	calla	copy_string

	movi	str_sl,a4
	calla	concat_rom_string

	move	*a8(RS_GAMES_PLAYED),a0
	move	*a8(RS_WINS),a14
	sub	a14,a0
	movi	1024,a1				;max value
	calla	dec_to_asc
	calla	concat_string
	calla	print_string_C


	movi	STAT2_X,a0
	move	a0,@mess_cursx
	movi	STAT2_Y,a0
	move	a0,@mess_cursy

	move	*a8(RS_STREAK),a0
	movi	1024,a1				;max value
	calla	dec_to_asc
	calla	copy_string
	calla	print_string_C


	movi	STAT3_X,a0
	move	a0,@mess_cursx
	movi	STAT3_Y,a0
	move	a0,@mess_cursy

	movi	str_per,a4,L
	calla	copy_rom_string

	move	*a8(RS_AVERAGE),a0
	cmpi	1000,a0
	jrlo	amyvnmax

	movi	amyvstr_1000,a4
	calla	copy_rom_string
	jruc	amyvskp2
amyvnmax
	movi	999,a1			;max value
	calla	dec_to_asc
	calla	concat_string
amyvskp2	calla	print_string_C


	movi	STAT4_X,a0
	move	a0,@mess_cursx
	movi	STAT4_Y,a0
	move	a0,@mess_cursy

	move	*a8(RS_DEF_RANK),a0
	callr	compute_plyr_def_rank
	movi	NUM_PRECORDS,a1				;max value
	calla	dec_to_asc
	calla	copy_string
	calla	print_string_C


	movi	STAT5_X,a0
	move	a0,@mess_cursx
	movi	STAT5_Y,a0
	move	a0,@mess_cursy

	move	*a8(RS_OFF_RANK),a0
	callr	compute_plyr_off_rank
	movi	NUM_PRECORDS,a1				;max value
	calla	dec_to_asc
	calla	copy_string
	calla	print_string_C

	
	movi	STAT6_X,a0
	move	a0,@mess_cursx
	movi	STAT6_Y,a0
	move	a0,@mess_cursy

	move	*a8(RS_OFF_RANK),a7
	callr	print_playing_rank

	
	movi	STAT7_X,a0
	move	a0,@mess_cursx
	movi	STAT7_Y,a0
	move	a0,@mess_cursy

	move	*a8(RS_DEF_RANK),a7
	callr	print_playing_rank


	movi	STAT8_X,a0
	move	a0,@mess_cursx
	movi	STAT8_Y,a0
	move	a0,@mess_cursy

	move	*a8(RS_TEAMSDEF),a0
	movi	NUM_TEAMS,a1				;max value
	calla	dec_to_asc
	calla	copy_string
	calla	print_string_C
	

	movi	STAT9_X,a0
	move	a0,@mess_cursx
	movi	STAT9_Y,a0
	move	a0,@mess_cursy

	move	*a8(RS_GAMES_PLAYED),a0
	movi	2048,a1				;max value
	calla	dec_to_asc
	calla	copy_string
	calla	print_string_C

	RETP


name_str_setup
	PRINT_STR	brush50_ascii,10,0,200,60,BRSH50G_P,0

stats_msg_setup
	PRINT_STR	bast8_ascii,6,0,215,140,BAST_Y_P,0

stats_msg
	.string	"  WIN         WIN      WIN   DEFENSIVE  OFFENSIVE",1
	.string	"RECORD    STREAK   AVG.     RANK       RANK  ",1
	.string	"",1
	.string	"",1
	.string	"",1
	.string	"AVG. PTS.   AVG. PTS.      TEAMS       GAMES  ",1
	.string	" SCORED     ALLOWED    DEFEATED     PLAYED  ",0
	.even

str_sl
	.string	"/",0
	.even

str_per
	.string	".",0
	.even


amyvmethod8
	
	.asg	96,OFFX

	movi	LN0_setup,a2
	calla	setup_message

	movi	260,a0
	move	a0,@mess_cursy			;draw data off-screen

	movk	8,a10
	move	a10,@hiscore_cnt

	movi	record_sort_ptrs,a9

	movi	TOP_LINE,a11			;start Y (rank amyv1)

amyvnxt_plr
	PUSHP	a9,a10

	move	@mess_objid,a0
	addk	1,a0
	move	a0,@mess_objid			;ID+1 from hiscore heading

    	movk	9,a0
	sub	a10,a0				;1-8
	move	a0,a14

	sll	5,a14
	addi	amyvwinpals-20h,a14
	move	*a14,a14,L
	move	a14,@message_palette,L

	movk	8,a1				;max value
	calla	dec_to_asc
	calla	copy_string
	movi	COL0b,a0
	move	a0,@mess_cursx
	calla	print_string_C

	movi	COL0,a0
	move	a0,@mess_cursx
	movi	amyvstr_num,a4
	calla	print_string2

	move	*a9,a8,L
	move	*a8(RS_RECORD_NUM),a0
	movi	PKDPR_SIZE*2,a1			;cmos words
	mpyu	a0,a1
	addi	RECORD_ORIGIN,a1
	move	a1,a10
	callr	get_temp_record

	movi	temp_record+PR_NAME1,a4		;* src initials
	movi	message_buffer,a3		;* string dest
	calla	get_name_string
	movi	COL1,a0
	move	a0,@mess_cursx
	calla	print_string_C

	movi	COL4+23,a0
	move	a0,@mess_cursx
	move	@temp_record+PR_TRIVIA_PTS,a0
	movi	999,a1				;max value (6 bits in record)
	calla	dec_to_asc
	calla	copy_string
	movi	amyvstr_pts,a4
	calla	concat_rom_string
	calla	print_string_C


	move	@mess_objid,a8
	CREATE0	slide_line_up

	addi	YOFF,a11

	PULLP	a9,a10
	addi	20h,a9
	dsj	a10,amyvnxt_plr
	RETP

amyvstr_pts
	.string	"  PTS.",0
	.even


amyvmethod4

	movi	LN0_setup,a2
	calla	setup_message

	movi	260,a0
	move	a0,@mess_cursy			;draw data off-screen

	movk	8,a10
	move	a10,@hiscore_cnt

	movi	record_sort_ptrs,a9

	movi	TOP_LINE,a11			;start Y (rank amyv1)
amyvmeth4
	PUSHP	a9,a10

	move	@mess_objid,a0
	addk	1,a0
	move	a0,@mess_objid			;ID+1 from hiscore heading

    	movk	9,a0
	sub	a10,a0				;1-8

	move	a0,a14
	sll	5,a14			;x 32 bits
	addi	amyvwinpals-20h,a14
	move	*a14,a14,L
	move	a14,@message_palette,L

	movk	8,a1				;max value
	calla	dec_to_asc
	calla	copy_string
	movi	COL0b,a0
	move	a0,@mess_cursx
	calla	print_string_C

	movi	COL0,a0
	move	a0,@mess_cursx
	movi	amyvstr_num,a4
	calla	print_string2

	move	*a9,a8,L
	move	*a8(RS_RECORD_NUM),a0
	movi	PKDPR_SIZE*2,a1			;cmos words
	mpyu	a0,a1
	addi	RECORD_ORIGIN,a1
	move	a1,a10
	callr	get_temp_record

	movi	temp_record+PR_NAME1,a4		;* src initials
	movi	message_buffer,a3		;* string dest
	calla	get_name_string
	movi	COL1,a0
	move	a0,@mess_cursx
	calla	print_string_C

	movi	COL4,a0
	move	a0,@mess_cursx

	calla	clear_buffers

	move	*a8(RS_OFF_RANK),a7
	callr	print_playing_rank

	move	@mess_objid,a8
	CREATE0	slide_line_up

	addi	YOFF,a11

	PULLP	a9,a10
	addi	20h,a9
	dsj	a10,amyvmeth4
	RETP

 SUBRP	print_playing_rank

	calla	clear_buffers

	clr	a6
	movi	100,a1				;max value
	divu	a1,a6

	move	a6,a0
	movi	99,a1				;max value
	calla	dec_to_asc
	calla	concat_string

	movi	amyvstr_dot,a4
	calla	concat_rom_string

	move	a7,a0
	movi	99,a1				;max value
	calla	dec_to_asc2
	calla	concat_string
	calla	print_string
	rets



amyvmethod5

	movi	LN0_setup,a2
	calla	setup_message

	movi	260,a0
	move	a0,@mess_cursy			;draw data off-screen

	movk	8,a10
	move	a10,@hiscore_cnt

	movi	record_sort_ptrs,a9

	movi	TOP_LINE,a11			;start Y (rank amyv1)
amyvmeth5
	PUSHP	a9,a10

	move	@mess_objid,a0
	addk	1,a0
	move	a0,@mess_objid			;ID+1 from hiscore heading

    	movk	9,a0
	sub	a10,a0				;1-8

	move	a0,a14
	sll	5,a14			;x 32 bits
	addi	amyvwinpals-20h,a14
	move	*a14,a14,L
	move	a14,@message_palette,L

	movk	8,a1				;max value
	calla	dec_to_asc
	calla	copy_string
	movi	COL0b,a0
	move	a0,@mess_cursx
	calla	print_string_C

	movi	COL0,a0
	move	a0,@mess_cursx
	movi	amyvstr_num,a4
	calla	print_string2

	move	*a9,a8,L
	move	*a8(RS_RECORD_NUM),a0
	movi	PKDPR_SIZE*2,a1			;cmos words
	mpyu	a0,a1
	addi	RECORD_ORIGIN,a1
	move	a1,a10
	callr	get_temp_record

	movi	temp_record+PR_NAME1,a4		;* src initials
	movi	message_buffer,a3		;* string dest
	calla	get_name_string
	movi	COL1,a0
	move	a0,@mess_cursx
	calla	print_string_C

	movi	COL4,a0
	move	a0,@mess_cursx

	calla	clear_buffers

	move	*a8(RS_DEF_RANK),a7
	callr	print_playing_rank

	move	@mess_objid,a8
	CREATE0	slide_line_up

	addi	YOFF,a11

	PULLP	a9,a10
	addi	20h,a9
	dsj	a10,amyvmeth5
	RETP



	.asg	200,WINSTRK_X
	.asg	58,WINSTRK_Y
	.asg	200,PTS_X
	.asg	WINSTRK_Y+40,PTS_Y
	.asg	200,ASSISTS_X
	.asg	PTS_Y+40,ASSISTS_Y
	.asg	200,REBNDS_X
	.asg	ASSISTS_Y+40,REBNDS_Y

amyvmethod6

	movi	winstrk_msg_setup1,a2
	calla	setup_message
	movi	wrld_rec_msg1,a4,L
	calla	print_string_C2


	movi	PTS_Y,a0
	move	a0,@mess_cursy
	movi	wrld_rec_msg2,a4,L
	calla	print_string_C2

	movi	ASSISTS_Y,a0
	move	a0,@mess_cursy
	movi	wrld_rec_msg3,a4,L
	calla	print_string_C2

	movi	REBNDS_Y,a0
	move	a0,@mess_cursy
	movi	wrld_rec_msg4,a4,L
	calla	print_string_C2

	callr	get_world_record_from_cmos

	movi	wrld_recrd_ram+WR_NAME1A,a4	;* src NAME
	movi	message_buffer,a3		;* string dest
	calla	get_name_string

	movi	winstrk_msg_setup2,a2
	calla	setup_message
	calla	print_string_C

	movi	message_buffer,a3		;* string dest
	clr	a0
	move	a0,*a3,L

	move	@mess_cursx,a0
	addi	100,a0
	move	a0,@mess_cursx

	move	@wrld_recrd_ram+WR_WINSTREAK,a0	;* src NAME
	movi	256,a1
	calla	dec_to_asc
	calla	concat_string
	calla	print_string_C

	movi	wrld_recrd_ram+WR_NAME1B,a4	;* src NAME
	movi	message_buffer,a3		;* string dest
	calla	get_name_string

	movi	pts_game_msg_setup2,a2
	calla	setup_message
	calla	print_string_C

	movi	message_buffer,a3		;* string dest
	clr	a0
	move	a0,*a3,L

	move	@mess_cursx,a0
	addi	100,a0
	move	a0,@mess_cursx

	move	@wrld_recrd_ram+WR_PTS_IN_GAME,a0	;* src NAME
	movi	256,a1
	calla	dec_to_asc
	calla	concat_string
	calla	print_string_C

	movi	wrld_recrd_ram+WR_NAME1D,a4	;* src NAME
	movi	message_buffer,a3		;* string dest
	calla	get_name_string

	movi	assists_msg_setup2,a2
	calla	setup_message
	calla	print_string_C

	movi	message_buffer,a3		;* string dest
	clr	a0
	move	a0,*a3,L

	move	@mess_cursx,a0
	addi	100,a0
	move	a0,@mess_cursx

	move	@wrld_recrd_ram+WR_ASSISTS_IN_GAME,a0	;* src NAME
	movi	256,a1
	calla	dec_to_asc
	calla	concat_string
	calla	print_string_C

	movi	wrld_recrd_ram+WR_NAME1C,a4	;* src NAME
	movi	message_buffer,a3		;* string dest
	calla	get_name_string

	movi	rebnd_msg_setup2,a2
	calla	setup_message
	calla	print_string_C

	movi	message_buffer,a3		;* string dest
	clr	a0
	move	a0,*a3,L

	move	@mess_cursx,a0
	addi	100,a0
	move	a0,@mess_cursx

	move	@wrld_recrd_ram+WR_REBNDS_IN_GAME,a0	;* src NAME
	movi	256,a1
	calla	dec_to_asc
	calla	concat_string
	calla	print_string_C
	RETP



winstrk_msg_setup1
	PRINT_STR	bast8_ascii,6,0,WINSTRK_X,WINSTRK_Y,BAST_W_P,0

winstrk_msg_setup2
	PRINT_STR	brush20_ascii,6,0,WINSTRK_X,WINSTRK_Y+10,BRSHGYGP,0

pts_game_msg_setup2
	PRINT_STR	brush20_ascii,6,0,PTS_X,PTS_Y+10,BRSHGYGP,0

assists_msg_setup2
	PRINT_STR	brush20_ascii,6,0,ASSISTS_X,ASSISTS_Y+10,BRSHGYGP,0

rebnd_msg_setup2
	PRINT_STR	brush20_ascii,6,0,REBNDS_X,REBNDS_Y+10,BRSHGYGP,0


wrld_rec_msg1
	.string	"WINSTREAK",0
	.even

wrld_rec_msg2
	.string	"POINTS IN GAME",0
	.even

wrld_rec_msg3
	.string	"ASSISTS IN GAME",0
	.even

wrld_rec_msg4
	.string	"REBOUNDS IN GAME",0
	.even

amyvmethod1

	movi	LN0_setup,a2
	calla	setup_message

	movi	260,a0
	move	a0,@mess_cursy			;draw data off-screen

	movk	8,a10				;nbr. of lines (8 ranks)
	move	a10,@hiscore_cnt

	movi	record_sort_ptrs,a9
	
	movi	TOP_LINE,a11			;start Y (rank amyv1)

amyvnext_player
	PUSHP	a9,a10

	move	@mess_objid,a0
	addk	1,a0
	move	a0,@mess_objid			;ID+1 from hiscore heading

	movk	9,a0
	sub	a10,a0				;1-8
	move	a0,a14

	sll	5,a14
	addi	amyvwinpals-20h,a14
	move	*a14,a14,L
	move	a14,@message_palette,L

	movk	8,a1				;max value
	calla	dec_to_asc
	calla	copy_string
	movi	COL0b,a0
	move	a0,@mess_cursx
	calla	print_string_C

	movi	COL0,a0
	move	a0,@mess_cursx
	movi	amyvstr_num,a4
	calla	print_string2

	move	*a9,a8,L
	move	*a8(RS_RECORD_NUM),a0
	movi	PKDPR_SIZE*2,a1			;cmos words
	mpyu	a0,a1
	addi	RECORD_ORIGIN,a1
	move	a1,a10
	callr	get_temp_record

	movi	temp_record+PR_NAME1,a4		;* src NAME
	movi	message_buffer,a3		;* string dest
	calla	get_name_string
	movi	COL1,a0
	move	a0,@mess_cursx
	calla	print_string_C

	move	@temp_record+PR_WON,a0
	movi	999,a1			;max value
	calla	dec_to_asc
	calla	copy_string
	movi	COL2,a0
	move	a0,@mess_cursx
	calla	print_string_R

	movi	COL3,a0
	move	a0,@mess_cursx
	movi	amyvstr_dash,a4
	calla	print_string2

	move	@temp_record+PR_LOST,a0
	movi	999,a1			;max value
	calla	dec_to_asc
	calla	copy_string
	movi	COL4,a0
	move	a0,@mess_cursx
	calla	print_string

	movi	amyvstr_dot,a4
	calla	copy_rom_string

	move	*a8(RS_AVERAGE),a0
	jrnz	amyvnot_zip

	movi	amyvstr_0,a4
	calla	copy_rom_string
	jruc	amyvskip1
amyvnot_zip
	cmpi	1000,a0
	jrlo	amyvnot_max

	movi	amyvstr_1000,a4
	calla	copy_rom_string
	movi	COL5-9,a0
	move	a0,@mess_cursx
	jruc	amyvskip2
amyvnot_max
	movi	999,a1			;max value
	calla	dec_to_pct
	calla	concat_string
amyvskip1	movi	COL5,a0
	move	a0,@mess_cursx
amyvskip2	calla	print_string

	move	@mess_objid,a8
	CREATE0	slide_line_up

	addi	YOFF,a11

	PULLP	a9,a10
	addi	20h,a9
	dsj	a10,amyvnext_player
	RETP


amyvwinpals
	.long	BST18B2_P
	.long	BSTGWW_P
	.long	BSTGWW_P
	.long	BSTGWW_P
	.long	BSTGWW_P
	.long	BSTGWW_P
	.long	BSTGWW_P
	.long	BSTGWW_P

 SUBR	slide_lines_right

	PUSHP	a1,a2,a3

	clr	a11
	move	a8,a10
slr_00
	movi	OBJLST,a2
	move	*a2,a2,L			;get next obj. ptr
	jrz	slr_5				;br=no obj. list
slr_0
	move	*a2(OID),a14
	cmp	a10,a14				;is ID > than range start ?
	jrne	slr_1				;br=nope

	inc	a11				;count nbr. of matching ID's

	movi	[30,0],a14
	move	a14,*a2(OXVEL),L
	movi	[0,0],a14
	move	a14,*a2(OYVEL),L

slr_1	move	*a2,a2,L
	jrnz	slr_0

	SLEEPK	5

	inc	a10
	cmp	a9,a10
	jrls	slr_00



	movi	40,a10				;MAX time (40 ticks)
slr_2
	SLEEPK	1
	dec	a10
	jrle	slr_5				;br=exceeded max loop count

	movi	OBJLST,a2
slr_3
	move	*a2,a2,L			;get next obj. ptr
	jrz	slr_2				;br=no obj. lst

	move	*a2(OID),a14
	cmp	a8,a14				;is ID > than range start ?
	jrlo	slr_3				;br=nope
	cmp	a9,a14				;is ID <= than range end ?
	jrhi	slr_3				;br=nope

	move	*a2(OXPOS),a14			;get obj X
	cmpi	460,a14				;obj off rght edge of screen ?
	jrlo	slr_3				;br=nope

	move	*a2(OXVEL),a14,L
	jrz	slr_3				;br=vel. already cleared

	clr	a14
	move	a14,*a2(OXVEL),L		;stop obj. from moving
	dsj	a11,slr_3			;br=more objs. to watch
slr_5
	PULLP	a1,a2,a3
	RETP

 SUBRP	create_scale_processes

amyvcscl	SLEEPK	10

	CREATE	HISCR_SCALE_PID,scale_hiscore_lines
	dec	a8
	cmp	a8,a9
	jrls	amyvcscl
 	DIE

 SUBRP	scale_hiscore_lines

	SLEEP	27				;delay before start

	movk	2,a10				;do scale effect twice
shl_0a
	movi	hiscr_scl_tbl,a11,L		;table of scale steps
shl_0b
	movi	OBJLST,a0
	move	*a0,a0,L			;get next obj. ptr
	jrz	shl_5				;br=no obj. list
shl_0
	move	*a0(OID),a14
	cmp	a8,a14				;does ID match ?
	jrne	shl_1				;br=nope

	move	*a11,a14,L			;get new scale factor
	move	a14,*a0(OSCALE),L


shl_1
	move	*a0,a0,L
	jrnz	shl_0
shl_5
	SLEEPK	2

	addi	32,a11
	move	*a11,a0,L			;point to next line in table
	jrnz	shl_0b

	SLEEP	85

	dsj	a10,shl_0a			;next obj. ID
 	DIE


hiscr_scl_tbl
	.long	01140114h
	.long	01280128h
	.long	013c013ch
	.long	01500150h
	.long	01640164h
	.long	01780178h
	.long	01640164h
	.long	01500150h
	.long	013c013ch
	.long	01280128h
	.long	01140114h
	.long	01000100h	;back to reg. size (1 to 1)
	.long	0



 SUBR	slide_line_up
 	

	movi	OBJLST,a0
	move	*a0,a0,L			;get next obj. ptr
	jrz	sinl_5				;br=no obj. list
sinl_0
	move	*a0(OID),a14
	cmp	a14,a8
	jrne	sinl_1
	movi	[-10,0],a14
	move	a14,*a0(OYVEL),L
sinl_1
	move	*a0,a0,L
	jrnz	sinl_0


sinl_1a
	SLEEPK	1
	movi	OBJLST,a0
sinl_2
	move	*a0,a0,L			;get next obj. ptr
	jrz	sinl_5				;br=no ID match found, exit
	move	*a0(OID),a14
	cmp	a14,a8				;do ID's match ?
	jrne	sinl_2				;br=no
	move	*a0(OYPOS),a14			;get obj Y
	cmp	a14,a11				;any obj. at dest. ?
	jrlt	sinl_1a				;br=no


	movi	OBJLST,a0
sinl_3
	move	*a0,a0,L			;get next obj. ptr
	jrz	sinl_5				;br=no ID match found, exit
	move	*a0(OID),a14
	cmp	a14,a8				;do ID's match ?
	jrne	sinl_3				;br=no
	clr	a14
	move	a14,*a0(OYVEL),L		;stop obj. from moving

	move	*a0(OIMG),a14,L
	move	*a14(IANIOFFY),a14
	move	a11,a9
	sub	a14,a9
	move	a9,*a0(OYPOS)			;set Y coor.
	jruc	sinl_3
sinl_5	
	move	@hiscore_cnt,a14
	dec	a14
	move	a14,@hiscore_cnt
	DIE




amyvmethod1b

	.asg	96,OFFX

	movi	LN0_setup,a2
	calla	setup_message

	movi	260,a0
	move	a0,@mess_cursy			;draw data off-screen

	movk	8,a10
	move	a10,@hiscore_cnt

	movi	record_sort_ptrs,a9

	movi	TOP_LINE,a11			;start Y (rank amyv1)

amyvnext_player1b
	PUSHP	a9,a10

	move	@mess_objid,a0
	addk	1,a0
	move	a0,@mess_objid			;ID+1 from hiscore heading

    	movk	9,a0
	sub	a10,a0				;1-8
	move	a0,a14

	sll	5,a14
	addi	amyvwinpals-20h,a14
	move	*a14,a14,L
	move	a14,@message_palette,L

	movk	8,a1				;max value
	calla	dec_to_asc
	calla	copy_string
	movi	COL0b,a0
	move	a0,@mess_cursx
	calla	print_string_C

	movi	COL0,a0
	move	a0,@mess_cursx
	movi	amyvstr_num,a4
	calla	print_string2

	move	*a9,a8,L
	move	*a8(RS_RECORD_NUM),a0
	movi	PKDPR_SIZE*2,a1			;cmos words
	mpyu	a0,a1
	addi	RECORD_ORIGIN,a1
	move	a1,a10
	callr	get_temp_record

	movi	temp_record+PR_NAME1,a4		;* src initials
	movi	message_buffer,a3		;* string dest
	calla	get_name_string
	movi	COL1,a0
	move	a0,@mess_cursx
	calla	print_string_C

	movi	COL4+22,a0
	move	a0,@mess_cursx
	move	@temp_record+PR_WINSTREAK,a0
	movi	64,a1				;max value (6 bits in record)
	calla	dec_to_asc
	calla	copy_string
	movi	amyvstr_wins,a4
	calla	concat_rom_string
	calla	print_string_C

	move	@mess_objid,a8
	CREATE0	slide_line_up

	addi	YOFF,a11

	PULLP	a9,a10
	addi	20h,a9
	dsj	a10,amyvnext_player1b
	RETP


amyvstr_wins
	.string	"  WINS",0
	.even


amyvstreakpals
	.long	BST18B2_P
	.long	BSTGWW_P
	.long	BSTGWW_P
	.long	BSTGWW_P
	.long	BSTGWW_P
	.long	BSTGWW_P
	.long	BSTGWW_P
	.long	BSTGWW_P

amyvmethod2

	movi	LN0_setup,a2
	calla	setup_message

	movi	260,a0
	move	a0,@mess_cursy			;draw data off-screen

	movk	8,a10
	move	a10,@hiscore_cnt

	movi	record_sort_ptrs,a9

	movi	TOP_LINE,a11			;start Y (rank amyv1)

amyvnext_player2
	PUSHP	a9,a10

	move	@mess_objid,a0
	addk	1,a0
	move	a0,@mess_objid			;ID+1 from hiscore heading

	movk	9,a0
	sub	a10,a0				;1-8
	move	a0,a14

	sll	5,a14			;x 32 bits
	addi	amyvexppals-20h,a14
	move	*a14,a14,L
	move	a14,@message_palette,L

	movk	8,a1				;max value
	calla	dec_to_asc
	calla	copy_string
	movi	COL0b,a0
	move	a0,@mess_cursx
	calla	print_string_C

	movi	COL0,a0
	move	a0,@mess_cursx
	movi	amyvstr_num,a4
	calla	print_string2

	move	*a9,a8,L
	move	*a8(RS_RECORD_NUM),a0
	movi	PKDPR_SIZE*2,a1			;cmos words
	mpyu	a0,a1
	addi	RECORD_ORIGIN,a1
	move	a1,a10
	callr	get_temp_record

	movi	temp_record+PR_NAME1,a4		;* src NAME
	movi	message_buffer,a3		;* string dest
	calla	get_name_string
	movi	COL1,a0
	move	a0,@mess_cursx
	calla	print_string_C

	move	@temp_record+PR_COUNT,a0
	movi	999,a1			;max value
	calla	dec_to_asc
	calla	copy_string
	movi	COL3,a0
	move	a0,@mess_cursx
	calla	print_string_C

	movi	amyvstr_dot,a4
	calla	copy_rom_string

	move	*a8(RS_AVERAGE),a0
	jrnz	amyvnot_zip2

	movi	amyvstr_0,a4
	calla	copy_rom_string
	jruc	amyvskip1b
amyvnot_zip2
	cmpi	1000,a0
	jrlo	amyvnot_max2

	movi	amyvstr_1000,a4
	calla	copy_rom_string
	movi	COL5-9,a0
	move	a0,@mess_cursx
	jruc	amyvskip2b

amyvnot_max2
	movi	999,a1			;max value
	calla	dec_to_pct
	calla	concat_string
amyvskip1b
	movi	COL5,a0
	move	a0,@mess_cursx
amyvskip2b
	calla	print_string

	move	@mess_objid,a8
	CREATE0	slide_line_up

	addi	YOFF,a11

	PULLP	a9,a10
	addi	20h,a9
	dsj	a10,amyvnext_player2
	RETP

amyvexppals
	.long	BST18B2_P
	.long	BSTGWW_P
	.long	BSTGWW_P
	.long	BSTGWW_P
	.long	BSTGWW_P
	.long	BSTGWW_P
	.long	BSTGWW_P
	.long	BSTGWW_P

amyvmethod2b

	.asg	112,LCOL0
	.asg	132,LCOL1
	.asg	209,LCOL1a
	.asg	267,LCOL2
	.asg	70,YOFF2

	movi	LN0b_setup,a2
	calla	setup_message

	movk	3,a10
	movi	record_sort_ptrs,a9

amyvnext_player2b
	PUSHP	a9,a10

	movk	4,a0
	sub	a10,a0				;1-3
	move	a0,a14

	sll	5,a14			;x 32 bits
	addi	amyvchampals-20h,a14
	move	*a14,a14,L
	move	a14,@message_palette,L


	move	*a9,a8,L
	move	*a8(RS_RECORD_NUM),a0
	movi	PKDPR_SIZE*2,a1			;cmos words
	mpyu	a0,a1
	addi	RECORD_ORIGIN,a1
	move	a1,a10
	callr	get_temp_record

	movi	LCOL1a,a0
	move	a0,@mess_cursx

	move	@temp_record+PR_NUMDEF,a0
	cmpi	NUM_TEAMS,a0
	jrge	amyvis_champ

	movi	amyvstr_none,a4
	calla	print_string_C2
	jruc	amyvnot_champ
amyvis_champ
	movi	temp_record+PR_NAME1,a4		;* src initials
	movi	message_buffer,a3		;* string dest
	calla	get_name_string
	calla	print_string_C

amyvnot_champ
	move	@mess_cursy,a0
	addi	YOFF2,a0
	move	a0,@mess_cursy

	PULLP	a9,a10
	addi	20h,a9
	dsj	a10,amyvnext_player2b
	RETP

amyvstr_none
	.string	".   .   .   .   .   .",0
	.even


amyvchampals
	.long	BRSH50G_P
	.long	BRSH50W_P
	.long	BRSH50W_P


amyvmethod3

	.asg	115,TCOL1
	movi	LN0_setup,a2
	calla	setup_message

	movi	260,a0
	move	a0,@mess_cursy			;draw data off-screen

	movk	8,a10
	move	a10,@hiscore_cnt

	movi	sorted_teams,a9

	movi	TOP_LINE,a11			;start Y (rank amyv1)

amyvnext_team
	PUSHP	a9,a10

	move	@mess_objid,a0
	addk	1,a0
	move	a0,@mess_objid			;ID+1 from hiscore heading

	PUSHP	a9
	movk	9,a0
	sub	a10,a0				;1-8

	move	a0,a14
	sll	5,a14			;x 32 bits
	addi	amyvwinpals-20h,a14
	move	*a14,a14,L
	move	a14,@message_palette,L

	movk	8,a1				;max value
	calla	dec_to_asc
	calla	copy_string
	movi	COL0b,a0
	move	a0,@mess_cursx
	calla	print_string_C

	movi	COL0,a0
	move	a0,@mess_cursx
	movi	amyvstr_num,a4
	calla	print_string2

	movi	TCOL1,a0
	move	a0,@mess_cursx
	PULLP	a9
	move	*a9,a0				;team number (0-29)
	sll	5,a0
	addi	amyvteam_names,a0
	move	*a0,a4,L
	calla	print_string2

	move	@mess_objid,a8
	CREATE0	slide_line_up

	addi	YOFF,a11

	PULLP	a9,a10
	addi	10h,a9
	dsj	a10,amyvnext_team
	RETP




amyvsort_routines
	.long	amyvsort_best		;0 (best overall player)
	.long	amyvsort_champs		;1 (grand champions)
	.long	amyvsort_world_records	;2 (world records)
	.long	amyvsort_win_prcnt		;3 (greatest win %)
	.long	amyvsort_wins		;4 (most wins)
	.long	amyvsort_offensive		;5 (best offensive players)
	.long	amyvsort_defensive		;6 (best defensive players)
	.long	amyvsort_exp		;7 (experienced players)
	.long	amyvsort_streak		;8 (win streaks)
	.long	amyvsort_trivia_pts	;9 (most trivia points)
	.long	amyvsort_teams		;10 (most popular teams)



amyvsort_win_prcnt

	movi	NUM_PRECORDS-1,a11
amyvlop1
	movi	NUM_PRECORDS-1,a10

	movi	record_sort_ptrs,a9

	clr	a14
amyvlop2
	move	*a9,a4,L
	move	*a9(20h),a5,L

	move	*a4(RS_AVERAGE),a0
	move	*a5(RS_AVERAGE),a1
	cmp	a1,a0				;a0-a1
	jrhi	amyvno_swp
	jrlo	amyvswp

	move	*a4(RS_WINS),a0
	move	*a5(RS_WINS),a1
	cmp	a1,a0				;a0-a1
	jrhi	amyvno_swp
	jrlo	amyvswp

	move	*a4(RS_TEAMSDEF),a0
	move	*a5(RS_TEAMSDEF),a1
	cmp	a1,a0				;a0-a1
	jrhs	amyvno_swp

amyvswp
	movk	1,a14

	move	a5,*a9,L
	move	a4,*a9(20h),L

amyvno_swp
	addi	20h,a9

	dsj	a10,amyvlop2
	move	a14,a14
	jrz	amyvdne
	dsj	a11,amyvlop1
amyvdne
	rets


amyvsort_world_records
	rets

amyvsort_trivia_pts

	movi	NUM_PRECORDS-1,a11
amyvloop1	movi	NUM_PRECORDS-1,a10
	movi	record_sort_ptrs,a9
	clr	a14
amyvloop2
	move	*a9,a4,L
	move	*a9(20h),a5,L

	move	*a4(RS_TRIVIA_PTS),a0
	move	*a5(RS_TRIVIA_PTS),a1
	cmp	a1,a0				;a0-a1
	jrhi	amyvno_swap
	jrlo	amyvswap

	move	*a4(RS_WINS),a0
	move	*a5(RS_WINS),a1
	cmp	a1,a0				;a0-a1
	jrhi	amyvno_swap
	jrlo	amyvswap

	move	*a4(RS_TEAMSDEF),a0
	move	*a5(RS_TEAMSDEF),a1
	cmp	a1,a0				;a0-a1
	jrhs	amyvno_swap
amyvswap
	movk	1,a14

	move	a5,*a9,L
	move	a4,*a9(20h),L

amyvno_swap
	addi	20h,a9

	dsj	a10,amyvloop2
	move	a14,a14
	jrz	amyvdone
	dsj	a11,amyvloop1
amyvdone
	rets
	
amyvsort_best

	movi	NUM_PRECORDS-1,a11
bst_1
	movi	NUM_PRECORDS-1,a10
	movi	record_sort_ptrs,a9
	clr	a14
bst_2
	move	*a9,a4,L
	move	*a9(20h),a5,L

	move	*a4(RS_AVERAGE),a0
	sll	2,a0
	move	*a5(RS_AVERAGE),a1
	sll	2,a1				;weight the average

	move	*a4(RS_WINS),a0
	add	a2,a0
	move	*a5(RS_WINS),a1
	add	a2,a1

	move	*a4(RS_STREAK),a2
	add	a2,a0
	move	*a5(RS_STREAK),a2
	add	a2,a1

	move	*a4(RS_TEAMSDEF),a2
	add	a2,a0
	move	*a5(RS_TEAMSDEF),a2
	add	a2,a1
	cmp	a1,a0
	jrhi	noswap_bst
	jrlo	swap_bst

	move	*a4(RS_GAMES_PLAYED),a0
	move	*a5(RS_GAMES_PLAYED),a1
	cmp	a1,a0				;a0-a1
	jrhs	noswap_bst
swap_bst
	movk	1,a14
	move	a5,*a9,L
	move	a4,*a9(20h),L
noswap_bst
	addi	20h,a9
	dsj	a10,bst_2
	move	a14,a14
	jrz	done_so
	dsj	a11,bst_1
done_bst
	rets

amyvsort_offensive

	movi	NUM_PRECORDS-1,a11
so_1
	movi	NUM_PRECORDS-1,a10
	movi	record_sort_ptrs,a9
	clr	a14
so_2
	move	*a9,a4,L
	move	*a9(20h),a5,L

	move	*a4(RS_OFF_RANK),a0
	move	*a5(RS_OFF_RANK),a1
	cmp	a1,a0				;a0-a1
	jrhi	noswap_so
	jrlo	swap_so

	move	*a4(RS_WINS),a0
	move	*a5(RS_WINS),a1
	cmp	a1,a0				;a0-a1
	jrhi	noswap_so
	jrlo	swap_so

	move	*a4(RS_TEAMSDEF),a0
	move	*a5(RS_TEAMSDEF),a1
	cmp	a1,a0				;a0-a1
	jrhs	noswap_so
swap_so
	movk	1,a14
	move	a5,*a9,L
	move	a4,*a9(20h),L
noswap_so
	addi	20h,a9
	dsj	a10,so_2
	move	a14,a14
	jrz	done_so
	dsj	a11,so_1
done_so
	rets

amyvsort_defensive

	movi	NUM_PRECORDS-1,a11
sd_1
	movi	NUM_PRECORDS-1,a10
	movi	record_sort_ptrs,a9
	clr	a14
sd_2
	move	*a9,a4,L
	move	*a9(20h),a5,L

	move	*a4(RS_GAMES_PLAYED),a0
	jrz	noswap_sd
	move	*a5(RS_GAMES_PLAYED),a0
	jrz	noswap_sd

	move	*a4(RS_DEF_RANK),a0
	move	*a5(RS_DEF_RANK),a1
	cmp	a1,a0				;a0-a1
	jrlo	noswap_sd
	jrhi	swap_sd

	move	*a4(RS_WINS),a0
	move	*a5(RS_WINS),a1
	cmp	a1,a0				;a0-a1
	jrhi	noswap_sd
	jrlo	swap_sd

	move	*a4(RS_TEAMSDEF),a0
	move	*a5(RS_TEAMSDEF),a1
	cmp	a1,a0				;a0-a1
	jrhs	noswap_sd
swap_sd
	movk	1,a14
	move	a5,*a9,L
	move	a4,*a9(20h),L
noswap_sd
	addi	20h,a9
	dsj	a10,sd_2
	move	a14,a14
	jrz	done_sd
	dsj	a11,sd_1
done_sd
	rets

amyvsort_wins
	callr	sort_wins
	rets

amyvsort_exp
	callr	sort_exp
	rets

amyvsort_champs
	callr	sort_champs
	rets


amyvsort_teams
	calla	get_teams_pop
	rets

amyvsort_streak
	calla	sort_streak
	rets

LN0_setup
	PRINT_STR	bast18_ascii,6,0,200,50,BSTGYG_P,0
LN0b_setup
	PRINT_STR	brush50_ascii,6,2,200,50,BRSH50G_P,0
amyvheading1_setup
	PRINT_STR	brush20_ascii,6,0,200,7,BRSHGYOP,0
amyvheading2_setup
	PRINT_STR	bast8_ascii,7,0,200,29+3,BAST_Y_P,0

amyvhiscore_mod
	.long	ATTRACTBMOD
	.word	0,0
	.long	0

amyvheadings1
	.long	amyvhd0,amyvhd1,amyvhd2,amyvhd3,amyvhd4,amyvhd5
	.long	amyvhd6,amyvhd7,amyvhd8,amyvhd9,amyvhda,amyvhd1

amyvheadings2
	.long	amyvhd20,amyvhd21,amyvhd22,amyvhd23,amyvhd24,amyvhd25
	.long	amyvhd26,amyvhd27,amyvhd28,amyvhd29,amyvhd30,amyvhd21

amyvhd0	.string	"BEST OVERALL PLAYER",0
amyvhd1	.string	"GRAND CHAMPIONS",0
amyvhd2	.string	"WORLD RECORDS",0
amyvhd3	.string	"GREATEST PLAYERS",0
amyvhd4	.string	"BIGGEST WINNERS",0
amyvhd5	.string	"BEST OFFENSIVE PLAYERS",0
amyvhd6	.string	"BEST DEFENSIVE PLAYERS",0
amyvhd7	.string	"EXPERIENCED PLAYERS",0
amyvhd8	.string	"CURRENT WINNING STREAK",0
amyvhd9	.string	"TRIVIA MASTERS",0
amyvhda	.string	"MOST POPULAR TEAMS",0

amyvhd20	.string	"(all stats based on 4 games minimum)",0
amyvhd21	.string	"(defeated all 29 nba teams)",0
amyvhd22	.string	"(best individual records)",0
amyvhd23	.string	"(best win percentage)",0
amyvhd24	.string	"(most games won)",0
amyvhd25	.string	"(avg. team pts. scored per game)",0
amyvhd26	.string	"(avg. team pts. allowed per game)",0
amyvhd27	.string	"(most games played)",0
amyvhd28	.string	"(consecutive wins)",0
amyvhd29	.string	"(best NBA knowledge)",0
amyvhd30	.string	"(at this location)",0

amyvstr_dash
	.string	"-",0
amyvstr_dot
	.string	".",0
amyvstr_1000
	.string	"1.000",0
amyvstr_0
	.string	".000",0
amyvstr_num
	.string	"#",0

	.even

amyvteam_names
	.long	amyvt0,amyvt1,amyvt2,amyvt3
	.long	amyvt4,amyvt5,amyvt6,amyvt7	
	.long	amyvt8,amyvt9,amyvt10,amyvt11
	.long	amyvt12,amyvt13,amyvt14,amyvt15
	.long	amyvt16,amyvt17,amyvt18,amyvt19
	.long	amyvt20,amyvt21,amyvt22,amyvt23
	.long	amyvt24,amyvt25,amyvt26,amyvt27,amyvt28


amyvt0	.string	"ATLANTA HAWKS",0
amyvt1	.string	"BOSTON CELTICS",0
amyvt2	.string	"CHARLOTTE HORNETS",0
amyvt3	.string	"CHICAGO BULLS",0
amyvt4	.string	"CLEVELAND CAVALIERS",0
amyvt5	.string	"DALLAS MAVERICKS",0
amyvt6	.string	"DENVER NUGGETS",0
amyvt7	.string	"DETROIT PISTONS",0
amyvt8	.string	"GOLDEN ST. WARRIORS",0
amyvt9	.string	"HOUSTON ROCKETS",0
amyvt10	.string	"INDIANA PACERS",0
amyvt11	.string	"L.A. CLIPPERS",0
amyvt12	.string	"L.A. LAKERS",0
amyvt13	.string	"MIAMI HEAT",0
amyvt14	.string	"MILWAUKEE BUCKS",0
amyvt15	.string	"MINNESOTA TIMBERWLVS",0
amyvt16	.string	"NEW JERSEY NETS",0
amyvt17	.string	"NEW YORK KNICKS",0
amyvt18	.string	"ORLANDO MAGIC",0
amyvt19	.string	"PHILADELPHIA 76ERS",0
amyvt20	.string	"PHOENIX SUNS",0
amyvt21	.string	"PORTLAND TRAILBLZERS",0
amyvt22	.string	"SACRAMENTO KINGS",0
amyvt23	.string	"SAN ANTONIO SPURS",0
amyvt24	.string	"SEATTLE SUPERSONICS",0
amyvt25	.string	"TORONTO RAPTORS",0
amyvt26	.string	"UTAH JAZZ",0
amyvt27	.string	"VANCOUVER GRIZZLIES",0
amyvt28	.string	"WASHINGTON BULLETS",0
	.even



RECORDS_ONSCREEN	equ	10

 SUBRP	show_player_records

	calla	display_blank
	calla	WIPEOUT			;CLEAN SYSTEM OUT

	movk	1,a0			;page flipping on
	move	a0,@dpageflip

	movi	SCRNEND,a0		;[256,405]
	move	a0,@SCRNLR,L

	clr	a0
	move	a0,@WORLDTLX,L
	move	a0,@WORLDTLY,L

	.asg	80,COL0
	.asg	90,COL1
	.asg	170,COL2
	.asg	215,COL3
	.asg	280,COL4
	.asg	310,COL5
	.asg	22,YOFF

	movi	bast18_ascii,a0
	move	a0,@message_ascii,L	;* ascii lookup table

	movi	TYPTEXT,a0
	move	a0,@mess_objid

	movk	3,a0
	move	a0,@mess_space_width	;space char width
	clr	a0
	move	a0,@mess_spacing	;spacing between chars

	movi	BST18G_P,a0
	move	a0,@message_palette,L

	clr	a4
difsdisplay_loop
	PUSHP	a4
	callr	display_audits

	movk	1,a0
	move	a0,@DISPLAYON

	SLEEPK	2
	calla	display_unblank

	movk	6,a10
difsloopy
	SLEEPK	1
	calla	get_all_sticks_down2
	move	a0,a0
	jrnz	difsgot_stick
	dsj	a10,difsloopy

difswait_for_input
	SLEEPK	1
	calla	get_all_buttons_cur2
	jrnz	difsexit

difsgot_stick
	PULLP	a4
	calla	get_all_sticks_cur2
	btst	1,a0
	jrz	difsno_down
	move	a4,a1
	addi	RECORDS_ONSCREEN,a1
	cmpi	NUM_PRECORDS,a1
	jrhs	difsno_down
	addi	RECORDS_ONSCREEN,a4
	jruc	difsdisplay_loop
difsno_down
	btst	0,a0
	jrz	difsno_up
	move	a4,a4
	jrz	difsno_up
	subi	RECORDS_ONSCREEN,a4
	jruc	difsdisplay_loop
difsno_up
	PUSHP	a4
	jruc	difswait_for_input
difsexit
	PULLP	a4
	RETP

 SUBRP	display_audits

	movi	TYPTEXT,a0		;delete text
	calla	obj_del1c

	movi	20,a0
	move	a0,@mess_cursy		;message cursor pos Y

	movi	PKDPR_SIZE*2,a1		;cmos words
	mpyu	a4,a1
	movi	RECORD_ORIGIN,a10
	add	a1,a10
	movi	RECORDS_ONSCREEN,a6
mlgksearch_loop
	cmpi	NUM_PRECORDS,a4
	jrhs	mlgkdone

	PUSH	a6,a10
	PUSH	a4
	
	callr	get_temp_record		;data in temp_record

	movi	str_obr,a4
	calla	copy_rom_string
	clr	a0
	move	a0,@mess_cursx		;message cursor pos X

	PULL	a1
	move	a1,a0
	inc	a1
	PUSH	a1
	movi	999,a1			;max value
	calla	dec_to_asc
	calla	concat_string
	movi	str_cbr,a4
	calla	concat_rom_string
	calla	print_string

	movi	temp_record+PR_NAME1,a4		;* src initials
	movi	message_buffer,a3		;* string dest
	calla	get_name_string

	movi	COL2,a0
	move	a0,@mess_cursx		;message cursor pos X

	move	@temp_record+PR_COUNT,a0
	jrnz	mlgknot_empty

	movi	str_unused,a4
	calla	print_string_C2
	jruc	mlgkskipit
mlgknot_empty
	calla	print_string_C		;centered

	movi	COL0,a0
	move	a0,@mess_cursx		;message cursor pos X
	move	@temp_record+PR_COUNT,a0
	movi	1023,a1			;max value
	calla	dec_to_asc
	calla	copy_string
	calla	print_string

	movi	COL4,a0
	move	a0,@mess_cursx		;message cursor pos X
	move	@temp_record+PR_LASTPLAY,a0
	movi	1023,a1			;max value
	calla	dec_to_asc
	calla	copy_string
	calla	print_string_R

mlgkskipit

	move	@mess_cursy,a0		;message cursor pos Y
	addi	YOFF,a0
	move	a0,@mess_cursy		;message cursor pos Y

	PULL	a4
	PULL	a6,a10
	addi	PKDPR_SIZE*2,a10	;cmos words
	dsj	a6,mlgksearch_loop
mlgkdone
	rets

str_num	.string "#",0
str_obr	.string	"(",0
str_cbr	.string	")",0
str_sp	.string	" ",0
str_2sp	.string	"  ",0
	.even

str_unused
	.string	"UNUSED",0
	.even


 	RETP


	.end

