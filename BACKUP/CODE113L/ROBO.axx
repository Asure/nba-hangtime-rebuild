
	.file	"robo.asm"
	.title	"robotron game"
	.width	132
	.option	b,d,l,t
	.mnolist


	.include	"mproc.equ"		;Mproc equates
	.include	"disp.equ"		;Display proc equates
	.include	"gsp.equ"		;Gsp asm equates
	.include	"sys.equ"
	.include	"game.equ"
	.include	"audit.equ"
	.include	"macros.h"
	.include	"link.equ"

	.include	"roboimg.tbl"
	.include	"fontsimg.glo"

	;kludge
	.ref	robo_p


	;from ADJUST.ASM
	.ref	BINBCD

	;from COLL2.ASM
	.ref	collisions,CCCCount

	;from DCSSOUND.ASM
	.ref	nosounds,SNDSND

	;from DISPLAY.ASM
	.ref	pal_getf,STOPOBJS,fg2bg

	;from MAIN.ASM
	.ref	dpageflip,IRQSKYE

	;from MPROC.ASM
	.ref	KIL1C

	;from STRING.ASM
	.ref	setup_message,print_string_R,mess_objid,copy_string
	.ref	dec_to_asc

	;from UTIL.ASM
	.ref	get_all_buttons_cur,get_stick_val_cur,RNDRNG0,get_start_cur
	.ref	WIPEOUT,CYCLE_TABLE,civani,civanic

	;from WRESTLE.ASM	
	.if DEBUG
	.ref	CPULEFT
	.endif
	.ref	HALT,PCNT

	;for WRESTLE.ASM
	.def	RE_DEADPLAYER,RE_WAVEDONE,RE_ABORT,RE_BACKUP

	.ref	_switch_addr,_switch2_addr,ADD_VOICE


	BSSX	robo_end,	16	;reason for wave end
	BSSX	robotron_score,	32	;UHL score
	.bss	player_dead,	16
	.bss	starts_down,	16	;are both starts down?
	.bss	player_object,	32	;pointer to char1 obj
	.bss	gun_proc,	32	;gun process address
	.bss	robo_wave,	16	;which wave to perform?
	.bss	live_badguys,	16	;wave-preserving badguy count
	.bss	forward,	16	;skip wave
	.bss	backward,	16	;drop back a wave


ROBO_DEBUG	equ	0
WAVE_CONTROL	equ	0
BOG_MONITOR	equ	0

ROBO_PAGE	equ	0*256

ROBJ_MOM	equ	1
ROBJ_DAD	equ	2
ROBJ_KID	equ	3

RE_DEADPLAYER	equ	1
RE_WAVEDONE	equ	2
RE_ABORT	equ	3
RE_BACKUP	equ	4


	.ref	robo_icon_trigger
	.ref	p1icon_total
	.ref	p2icon_total


 SUBR	robo_check

	.if DEBUG
	jruc	bfhdrobo_ok
	.endif
	jruc	bfhdrobo_end

	move	@p1icon_total,a0,L
	move	@robo_icon_trigger,a14
	cmp	a0,a14
	jrle	bfhdrobo_ok
	move	@p2icon_total,a0,L
	cmp	a0,a14
	jrgt	bfhdrobo_end
bfhdrobo_ok
	sll	1,a14
	move	a14,@robo_icon_trigger
	callr	reset_roboscore
	callr	robo_sound_init


	clr	a0
bfhdrobo_loop
	JSRP	robo_game
	move	@robo_end,a14
	cmpi	RE_DEADPLAYER,a14
	jreq	bfhdplayer_died
	cmpi	RE_WAVEDONE,a14
	jreq	bfhdwave_successful
	cmpi	RE_ABORT,a14
	jreq	bfhdwave_aborted
	cmpi	RE_BACKUP,a14
	jreq	bfhdback_up
	jruc	bfhdrobo_end

bfhdplayer_died
	jruc	bfhdrobo_loop

bfhdwave_successful
	inc	a0
	cmpi	16,a0
	jrne	bfhdrobo_loop
	jruc	bfhdrobo_end

bfhdwave_aborted
	jruc	bfhdrobo_end

bfhdback_up
	dec	a0
	jrnn	bfhdrobo_loop
	clr	a0
	jruc	bfhdrobo_loop

bfhdrobo_end
	RETP



 SUBRP	reset_roboscore

	clr	a14
	move	a14,@robotron_score,L
	rets



 SUBR	robo_game

	sla	4,a0
	move	a0,@robo_wave,W

	calla	display_blank
	calla	WIPEOUT			;CLEAN SYSTEM OUT

	clr	a0
	move	a0,@HALT
	move	a0,@dtype		;2d mode
	move	a0,@IRQSKYE
	move	a0,@CCCCount

	movk	1,a0			;page flipping on
	move	a0,@dpageflip

	SLEEPK	1

	movi	SCRNEND,a0		;[256,405]
	move	a0,@SCRNLR,L

	clr	a0
	move	a0,@WORLDTLX,L
	move	a0,@WORLDTLY,L

	SLEEPK	2

	calla	nosounds		;kill the select music

	;draw the frame
	move	@robo_wave,a0
	addi	qbhqborder_colors,a0
	move	*a0,a0,W
	callr	draw_frame

	movk	1,a0
	move	a0,@DISPLAYON

	SLEEPK	2

	clr	a14
	move	a14,@player_dead,W	;clear the done flag

	;initialize the robo palette color cycles
	callr	robo_pal_cycles

	;initialize the badguy count
	clr	a14
	move	a14,@live_badguys,W

	;place the wave count
	callr	wave_count

	;create the score monitor
	CREATE	ROBOSCORE_PID,score

	;set up the player object
	CREATE	ROBOMAN_PID,our_hero		;start the little guy up
	CREATE	PLYRGUN_PID,player_gun	;give him a weapon
	move	a0,@gun_proc,L		;save the address

	;set up some grunts
	move	@robo_wave,a0
	addi	qbhqwave_grunts,a0
	move	*a0,a0,W
	move	@robo_wave,a2
	addi	qbhqgrunt_speeds,a2
	move	*a2,a2,W
	callr	make_grunts

	;make some hulks
	move	@robo_wave,a0
	addi	qbhqwave_hulks,a0
	move	*a0,a0,W
	callr	make_hulks

	;sphereoids
	move	@robo_wave,a0
	addi	qbhqwave_sphereoids,a0
	move	*a0,a0,W
	callr	make_sphereoids

	;quarks
	move	@robo_wave,a0
	addi	qbhqwave_quarks,a0
	move	*a0,a0,W
	callr	make_quarks

	;make a few posts
	move	@robo_wave,a0
	addi	qbhqwave_posts,a0
	move	*a0,a0,W

	move	@robo_wave,a1
	addi	qbhqpost_types,a1
	move	*a1,a1,W

	move	@robo_wave,a2
	addi	qbhqpost_colors,a2
	move	*a2,a2,W

	callr	make_posts

	;and some people
	move	@robo_wave,a0
	move	a0,a1
	move	a0,a2
	addi	qbhqwave_moms,a0
	addi	qbhqwave_dads,a1	
	addi	qbhqwave_kids,a2
	move	*a0,a0,W
	move	*a1,a1,W
	move	*a2,a2,W
	callr	make_humans

	;start the collision checker
	CREATE	COLL_PID,collisions

	;create the both-start-btn watcher
	clr	a0
	move	a0,@starts_down,W
	move	a0,@forward,W
	move	a0,@backward,W
	CREATE	MISC_PID,watch_both_starts

	.if	WAVE_CONTROL
	CREATE	MISC_PID,wave_mover
	.endif

	.if DEBUG
	.if BOG_MONITOR
	CREATE	MISC_PID,bog_o_meter
	.endif
	.endif

	calla	display_unblank

qbhqnot_done
	SLEEPK	1
	move	@live_badguys,a14
	jrz	qbhqwave_done

	move	@player_dead,a14
	jrnz	qbhqdead_hero

	move	@starts_down,a14
	jrnz	qbhqwave_abort

	move	@forward,a14
	jrnz	qbhqwave_done

	move	@backward,a14
	jrnz	qbhqback_up
	jruc	qbhqnot_done


qbhqwave_done
	movi	RE_WAVEDONE,a14
	jruc	qbhqquit
qbhqdead_hero
	movi	RE_DEADPLAYER,a14
	jruc	qbhqquit
qbhqwave_abort
	movi	RE_ABORT,a14
	jruc	qbhqquit

qbhqback_up
	movi	RE_BACKUP,a14
	jruc	qbhqquit

qbhqquit
	move	a14,@robo_end,W

	;put the wave back in a0 just like we found it
	move	@robo_wave,a0,W
	sra	4,a0
	RETP


qbhqborder_colors
	.if	ROBO_DEBUG
	.word	1
	.endif
	.word	01,06,01,14,07,03,02,08
	.word	00,10,01,06,01,14,07,03

qbhqwave_grunts
	.if	ROBO_DEBUG
	.word	4
	.endif

	.word	15,17,22,34,20,32,00,35
	.word	60,25,35,00,35,27,25,35

qbhqgrunt_speeds
	.if	ROBO_DEBUG
	.word	1000
	.endif
	.word	20,15,15,15,15,15,15,15
	.word	15,15,14,14,14,14,14,13

qbhqwave_posts
	.if	ROBO_DEBUG
	.word	15
	.endif
	.word	05,15,25,25,20,25,00,25
	.word	00,20,25,00,25,05,20,25

qbhqpost_types
	.if	ROBO_DEBUG
	.word	0
	.endif
	.word	0,1,3,8,4,2,0,7
	.word	0,5,0,1,3,8,4,2

qbhqpost_colors
	.if	ROBO_DEBUG
	.word	0Fh
	.endif
	.word	15,14,11,13,14,15,14,11
	.word	14,10,15,14,11,13,14,15

qbhqwave_hulks
	.if	ROBO_DEBUG
	.word	0
	.endif
	.word	00,05,06,07,00,07,12,08
	.word	04,00,08,13,08,20,02,03

qbhqwave_sphereoids
	.if	ROBO_DEBUG
	.word	0
	.endif
	.word	00,01,03,04,01,04,00,05
	.word	05,01,05,00,05,02,01,05

qbhqwave_quarks
	.if	ROBO_DEBUG
	.word	0
	.endif
	.word	00,00,00,00,00,00,10,00
	.word	00,00,00,12,00,00,00,00

qbhqwave_moms
	.if	ROBO_DEBUG
	.word	2
	.endif
	.word	01,01,02,02,15,03,04,03
	.word	03,00,03,03,03,05,00,03

qbhqwave_dads
	.if	ROBO_DEBUG
	.word	2
	.endif
	.word	01,01,02,02,00,03,04,03
	.word	03,22,03,03,03,05,00,03

qbhqwave_kids
	.if	ROBO_DEBUG
	.word	2
	.endif
	.word	00,01,02,02,01,03,04,03
	.word	03,00,03,03,03,05,22,03



	;reg use
	; a4  - current position in animation script
	; a5  - head of current animation script
	; a6  - tail of current animation script
	; a8  - player object
	; a9  - motion count accumulator
	; a10 - direction of motion

 SUBRP	our_hero

	;create the player object
	movi	[uuoestart_x,0],a0
	movi	[uuoestart_y,0],a1
	movi	man_d1,a2
	clr	a3
	movi	DMAWNZ,a4
	movi	CLSPLYR|TYPPLYR,a5
	clr	a6
	clr	a7
	calla	BEGINOBJW

	;set the global pointer
	move	a8,@player_object,L

	; initiailize direction of motion
	clr	a10

uuoenot_done
	PUSHP	a4,a5,a6
	SLEEPK	1
	PULLP	a4,a5,a6

	; move him first
	callr	uuoemove_player

	; change his animation frame, if neccesary
	callr	uuoechange_frame

	jruc	uuoenot_done

uuoeplayer_dead
	;kill the gun process
	move	@gun_proc,a0,L
	calla	KILL

	movi	BULLET_PID,a0
	calla	KIL1C

	movi	GRUNT_PID,a0
	calla	KIL1C

	movi	HULK_PID,a0
	calla	KIL1C

	movi	HUMAN_PID,a0
	calla	KIL1C

	movi	SPHEREOID_PID,a0
	calla	KIL1C

	movi	ENFORCER_PID,a0
	calla	KIL1C

	movi	SPARK_PID,a0
	calla	KIL1C

	movi	QUARK_PID,a0
	calla	KIL1C

	movi	TANK_PID,a0
	calla	KIL1C

	movi	SHELL_PID,a0
	calla	KIL1C

	calla	STOPOBJS

	;switch frames
	movi	robo_dead,a0,L
	calla	civanic

	;death sound
	movi	RS_DIE,a0
	calla	robo_sound

	SLEEP	120
	movk	1,a14
	move	a14,@player_dead,W

	DIE


 SUBRP	uuoemove_player

	clr	a0
	calla	get_stick_val_cur
	btst	JOYDN,a0
	jrnz	uuoemove_down
	btst	JOYUP,a0
	jrnz	uuoemove_up
	btst	JOYRGT,a0
	jrnz	uuoemove_right
	btst	JOYLFT,a0
	jrnz	uuoemove_left
	jruc	uuoeno_move

uuoemove_down
	btst	JOYRGT,a0
	jrnz	uuoemove_downright
	btst	JOYLFT,a0
	jrnz	uuoemove_downleft

	;increment Y
	move	*a8(OYPOS),a14,W
	inc	a14
	move	a14,*a8(OYPOS),W
	jruc	uuoemove_done

uuoemove_up
	btst	JOYRGT,a0
	jrnz	uuoemove_upright
	btst	JOYLFT,a0
	jrnz	uuoemove_upleft

	;decrement Y
	move	*a8(OYPOS),a14,W
	dec	a14
	move	a14,*a8(OYPOS),W
	jruc	uuoemove_done

uuoemove_right
	;increment X
	move	*a8(OXPOS),a14,W
	inc	a14
	move	a14,*a8(OXPOS),W
	jruc	uuoemove_done

uuoemove_left
	;decrement X
	move	*a8(OXPOS),a14,W
	dec	a14
	move	a14,*a8(OXPOS),W
	jruc	uuoemove_done

uuoemove_upright
	; decrement Y and increment X
	move	*a8(OYPOS),a14,W
	dec	a14
	move	a14,*a8(OYPOS),W
	move	*a8(OXPOS),a14,W
	inc	a14
	move	a14,*a8(OXPOS),W
	jruc	uuoemove_done

uuoemove_upleft
	; decrement Y and decrement X
	move	*a8(OYPOS),a14,W
	dec	a14
	move	a14,*a8(OYPOS),W
	move	*a8(OXPOS),a14,W
	dec	a14
	move	a14,*a8(OXPOS),W
	jruc	uuoemove_done

uuoemove_downright
	; increment Y and increment X
	move	*a8(OYPOS),a14,W
	inc	a14
	move	a14,*a8(OYPOS),W
	move	*a8(OXPOS),a14,W
	inc	a14
	move	a14,*a8(OXPOS),W
	jruc	uuoemove_done

uuoemove_downleft
	; increment Y and decrement X
	move	*a8(OYPOS),a14,W
	inc	a14
	move	a14,*a8(OYPOS),W
	move	*a8(OXPOS),a14,W
	dec	a14
	move	a14,*a8(OXPOS),W
	jruc	uuoemove_done

uuoemove_done
	; check bounds
	move	*a8(OXPOS),a14,W
	cmpi	uuoelow_x,a14,W
	jrgt	uuoenot_lowx
	; too low on x
	inc	a14
	move	a14,*a8(OXPOS),W

uuoenot_lowx
	cmpi	uuoehigh_x,a14,W
	jrle	uuoenot_highx
	; too high on x
	dec	a14
	move	a14,*a8(OXPOS),W

uuoenot_highx

	move	*a8(OYPOS),a14,W
	cmpi	uuoelow_y,a14,W
	jrgt	uuoenot_lowy
	; too low on y
	inc	a14
	move	a14,*a8(OYPOS),W

uuoenot_lowy
	cmpi	uuoehigh_y,a14,W
	jrle	uuoenot_highy
	; too high on y
	dec	a14
	move	a14,*a8(OYPOS),W

uuoenot_highy
uuoeno_move

uuoedone_moving
	rets



 SUBRP	uuoechange_frame
	;reg use
	; a0  scratch
	; a1  sctatch
	; a3  new direction of motion
	; a10 old direction of motion - update

	clr	a0
	clr	a2
	calla	get_stick_val_cur
	move	a0,a3

	cmp	a0,a10
	jreq	uuoesame_direction
	jruc	uuoenew_direction

uuoenew_direction
	; start a new script.  first use the joystick bits to compute an
	; offset into the script table.
	X32	a0		;multiply by 32
	addi	uuoescript_map,a0	;add the address of the script table
	move	*a0,a0,L	;get the address of the script

	; get the tail and head of the image list for this script
	move	*a0+,a6,L
	move	a0,a5

	;a5 now points to the first image in the script.  change to it.
	move	*a5,a0,L
	calla	civanic

	;set the new direction thingie and script pointer
	move	a3,a10
	move	a5,a4

	;set the motion count
	movi	uuoemotion_count,a9
	jruc	uuoedone_changing

uuoesame_direction
	;check the motion count
	dec	a9
	jrnz	uuoedone_changing

	;reset the motion count
	movi	uuoemotion_count,a9

	;increment the pointer, wrap if neccesary
	addi	20h,a4
	cmp	a4,a6
	jrne	uuoeno_wrap
	move	a5,a4

uuoeno_wrap
	;a4 is the new image.  change to it.
	move	*a4,a0,L
	calla	civanic

	jruc	uuoedone_changing

uuoedone_changing
	rets



 SUBR	player_die
	PUSH	a1,a7

	;we hit some kind of bad guy and are dead
	movi	CLSDEAD,a14
	move	a14,*a8(OID),W
	move	*a8(OPLINK),a0,L
	movi	DEADPLAYER_PID,a1
	movi	uuoeplayer_dead,a7
	calla	XFERPROC

	PULL	a1,a7
	rets



uuoestart_x	equ	197
uuoestart_y	equ	123

uuoelow_x		equ	53
uuoehigh_x		equ	347-7
uuoelow_y		equ	45
uuoehigh_y		equ	231-12

uuoemotion_count	equ	2	;there will be trouble if this is zero

uuoeani_holdstill
	.long	uuoeani_holdstillx
	.long	man_d1
uuoeani_holdstillx

uuoeani_walkup
	.long	uuoeani_walkupx
	.long	man_u1
	.long	man_u2
	.long	man_u1
	.long	man_u3
uuoeani_walkupx

uuoeani_walkdown
	.long	uuoeani_walkdownx
	.long	man_d1
	.long	man_d2
	.long	man_d1
	.long	man_d3
uuoeani_walkdownx

uuoeani_walkright
	.long	uuoeani_walkrightx
	.long	man_r1
	.long	man_r2
	.long	man_r1
	.long	man_r3
uuoeani_walkrightx

uuoeani_walkleft
	.long	uuoeani_walkleftx
	.long	man_l1
	.long	man_l2
	.long	man_l1
	.long	man_l3
uuoeani_walkleftx

uuoeani_bad
	.long	uuoeani_badx
	.long	robo_bad
uuoeani_badx

uuoescript_map
	.long	uuoeani_holdstill
	.long	uuoeani_walkup
	.long	uuoeani_walkdown
	.long	uuoeani_bad
	.long	uuoeani_walkleft
	.long	uuoeani_walkleft
	.long	uuoeani_walkleft
	.long	uuoeani_bad
	.long	uuoeani_walkright
	.long	uuoeani_walkright
	.long	uuoeani_walkright
	.long	uuoeani_bad
	.long	uuoeani_bad
	.long	uuoeani_bad
	.long	uuoeani_bad
	.long	uuoeani_bad
uuoescript_mapx



	;reg use
	;a9  time till next shot is allowed

 SUBRP	player_gun

	clr	a9
	jruc	blnzsleep

blnzcheck_shot
	movk	1,a0
	calla	get_stick_val_cur
	jrz	blnzsleep			;no shot

	;fire in the indicated direction
	move	a0,a10
	CREATE	BULLET_PID,bullet
	movi	blnzrate_of_fire,a9

	;shoot sound
	movi	RS_SHOOT,a0
	callr	robo_sound

	jruc	blnzsleep
	
blnztoo_soon
	dec	a9
	jruc	blnzsleep

blnzsleep
	SLEEPK	1
	move	a9,a9
	jrnz	blnztoo_soon
	jruc	blnzcheck_shot

blnzdone
	DIE

blnzrate_of_fire	equ	6	;min ticks between shots



	;reg use
	; a4 velocity accumulator (used to pick the correct bullet)
	; a5 vert indicator
	; a8 bullet object
	;a10 (in) stick bits

 SUBRP	bullet

	;create a bullet object
	movi	[500,0],a0
	clr	a1
	movi	bullet_hrz,a2
	clr	a3
	movi	DMAWNZ,a4
	movi	CLSPLYR|TYPBULLET,a5
	clr	a6
	clr	a7
	calla	BEGINOBJW

	;set the speed and start position
	move	@player_object,a9,L
	clr	a4
	clr	a5
	move	*a9(OXPOS),a0,W
	addk	ogtzbstart_xoff,a0
	move	a0,*a8(OXPOS),W
	move	*a9(OYPOS),a0,W
	addk	ogtzbstart_yoff,a0
	move	a0,*a8(OYPOS),W

	btst	JOYRGT,a10
	jrz	ogtznot_right
	move	*a8(OXPOS),a14,W	;pos
	addi	ogtzbstart_radj,a14
	move	a14,*a8(OXPOS),W
	movi	ogtzbullet_speed,a0	;speed
	move	a0,*a8(OXVEL),L
	inc	a4

ogtznot_right

	btst	JOYLFT,a10
	jrz	ogtznot_left
	move	*a8(OXPOS),a14,W	;pos
	addi	ogtzbstart_ladj,a14
	move	a14,*a8(OXPOS),W
	movi	-ogtzbullet_speed,a0	;speed
	move	a0,*a8(OXVEL),L
	dec	a4

ogtznot_left

	btst	JOYUP,a10
	jrz	ogtznot_up
	move	*a8(OYPOS),a14,W	;pos
	addi	ogtzbstart_uadj,a14
	move	a14,*a8(OYPOS),W
	movi	-ogtzbullet_speed,a0	;speed
	move	a0,*a8(OYVEL),L
	dec	a4
	inc	a5

ogtznot_up

	btst	JOYDN,a10
	jrz	ogtznot_down
	move	*a8(OYPOS),a14,W	;pos
	addi	ogtzbstart_dadj,a14
	move	a14,*a8(OYPOS),W
	movi	ogtzbullet_speed,a0	;speed
	move	a0,*a8(OYVEL),L
	inc	a4
	inc	a5

ogtznot_down

	;set the image
	movi	bullet_hrz,a0
	move	a5,a5
	jrz	ogtzhoriz
	movi	bullet_vrt,a0
ogtzhoriz

	;vert/horz is set.  check for diagonal instead
	cmpi	1,a4
	jreq	ogtzimage_set
	cmpi	-1,a4
	jreq	ogtzimage_set

	;it's a diagonal.  if a4 is 0, use frontslash
	move	a4,a4
	jrz	ogtzfront_slash
	movi	bullet_bck,a0
	jruc	ogtzimage_set

ogtzfront_slash
	movi	bullet_fnt,a0

ogtzimage_set
	calla	civanic

ogtzloop
	callr	bounds_check
	move	a0,a0
	jrnz	ogtzhit_wall
	SLEEPK	1
	jruc	ogtzloop

ogtzhit_wall
	;zoinks!  We've hit a wall. back up to be flush against it.
	; a2 holds the number of pixels we have to back up.

	;well, we can overlap on the wall a LITTLE.  say, 2 pixels.
	subk	2,a2

	move	*a8(OXVEL),a0,L
	jrz	ogtzy_adjust
	jrn	ogtzneg_xvel
	move	*a8(OXPOS),a0,W
	sub	a2,a0
	move	a0,*a8(OXPOS),W
	jruc	ogtzy_adjust
ogtzneg_xvel
	move	*a8(OXPOS),a0,W
	add	a2,a0
	move	a0,*a8(OXPOS),W

ogtzy_adjust
	move	*a8(OYVEL),a0,L
	jrz	ogtzkill_bullet
	jrn	ogtzneg_yvel
	move	*a8(OYPOS),a0,W
	sub	a2,a0
	move	a0,*a8(OYPOS),W
	jruc	ogtzkill_bullet
ogtzneg_yvel
	move	*a8(OYPOS),a0,W
	add	a2,a0
	move	a0,*a8(OYPOS),W

ogtzkill_bullet
	SLEEPK	1
	calla	DELOBJA8
	DIE



 SUBR	bullet_die
	PUSH	a1,a7,a9,a10,a11

	;we hit some kind of bad guy and are stopped.
	movi	CLSDEAD,a14
	move	a14,*A8(OID)
	move	*a8(OPLINK),a0,L
	movi	DEADBULLET_PID,a1
	movi	ogtzkill_bullet,a7
	calla	XFERPROC

	PULL	a1,a7,a9,a10,a11
	rets


ogtzbullet_speed	equ	00080000h	;pixels per frame

ogtzlow_x		equ	53
ogtzhigh_x		equ	346
ogtzlow_y		equ	45
ogtzhigh_y		equ	230

ogtzbstart_xoff	equ	3
ogtzbstart_yoff	equ	5

ogtzbstart_radj	equ	7
ogtzbstart_ladj	equ	-13
ogtzbstart_uadj	equ	-14
ogtzbstart_dadj	equ	8



	;reg use
	; a0 (in) # of grunts
	; a1 scratch
	; a2 (in) initial speed

 SUBRP	make_grunts

	move	a0,a0
	jrz	ywhfdone

ywhfanother_grunt
	PUSHP	a0

ywhfget_pos
	movi	ywhfmax_x-ywhfmin_x,a0
	calla	RNDRNG0
	move	a0,a9
	movi	ywhfmax_y-ywhfmin_y,a0
	calla	RNDRNG0
	move	a0,a10

	addi	ywhfmin_x,a9
	addi	ywhfmin_y,a10

	cmpi	ywhfmid_x1,a9
	jrle	ywhfplace_grunt
	cmpi	ywhfmid_x2,a9
	jrge	ywhfplace_grunt
	cmpi	ywhfmid_y1,a10
	jrle	ywhfplace_grunt
	cmpi	ywhfmid_y2,a10
	jrge	ywhfplace_grunt
	jruc	ywhfget_pos

ywhfplace_grunt
	;assign a random starting position
	move	a2,a11
	CREATE	GRUNT_PID,grunt
	PULLP	a0
	dsj	a0,ywhfanother_grunt

ywhfdone
	rets


ywhfmin_x	equ	53	;grunt start outer boundaries
ywhfmax_x	equ	347-9
ywhfmin_y	equ	45
ywhfmax_y	equ	231-13

ywhfmid_x1	equ	200-60	;grunt start inner boundaries
ywhfmid_x2	equ	200+60
ywhfmid_y1	equ	138-60
ywhfmid_y2	equ	138+60



	STRUCTPD
	WORD	mevxACCEL_TIMER	;UHW accelerator count
	LONG	mevxDEATH_SEQUENCE	;UHL anim to use when dying
				;    (set by coll routines)

	;reg use
	; a8 object handle
	; a9 (in)  starting x
	; a9 (use) ticks between moves
	;a10 (in)  starting y
	;a10 (use) ticks until next move
	;a11 (in)  initial speed
	;a11 (use) frame count

 SUBRP	grunt

	;increment the badguy count
	move	@live_badguys,a14,W
	inc	a14
	move	a14,@live_badguys,W

	;create a grunt object
	move	a9,a0
	sla	16,a0
	move	a10,a1
	sla	16,a1
	movi	grunt_1,a2
	clr	a3
	movi	DMAWNZ,a4
	movi	CLSENMY|TYPGRUNT,a5
	clr	a6
	clr	a7
	calla	BEGINOBJW

	;initialize move timer
	move	a11,a9

	;initialize time till next move
	move	a9,a0
	calla	RNDRNG0
	add	a11,a0
	move	a0,a10

	;initialize accel counter
	movi	mevxacceleration,a14
	move	a14,*a13(mevxACCEL_TIMER),W

	;initialize frame counter
	clr	a11

mevxloop
	move	*a13(mevxACCEL_TIMER),a14,W
	dec	a14
	jrnz	mevxno_accel

	movi	mevxacceleration,a14
	cmpi	mevxtop_speed,a9
	jreq	mevxno_accel
	dec	a9

mevxno_accel
	move	a14,*a13(mevxACCEL_TIMER),W
	SLEEPK	1

	dsj	a10,mevxloop
	callr	mevxmove_grunt
	move	a9,a10
	jruc	mevxloop

mevxdie
	;we've croaked
	;decrement the badguy count
	move	@live_badguys,a14,W
	dec	a14
	move	a14,@live_badguys,W

	;set up the animation
	move	*a13(mevxDEATH_SEQUENCE),a9,L
	move	*a8(OCTRL),a0

mevxdieloop
	move	*a9+,a0,L
	jrz	mevxdead_n_buried
	calla	civanic
	sleepk	mevxdeath_speed
	jruc	mevxdieloop

mevxdead_n_buried
	calla	DELOBJA8

	DIE


 SUBRP	mevxmove_grunt
	move	@player_object,a14,L

	;move in X
	move	*a14(OXPOS),a0,W
	move	*a8(OXPOS),a1,W
	sub	a1,a0
	jrz	mevxdone_movex
	jrn	mevxmove_left
	jruc	mevxmove_right

mevxmove_left
	move	*a8(OXPOS),a1,W
	addi	-mevxxmotion_inc,a1
	move	a1,*a8(OXPOS),W
	jruc	mevxdone_movex

mevxmove_right
	move	*a8(OXPOS),a1,W
	addi	mevxxmotion_inc,a1
	move	a1,*a8(OXPOS),W
	jruc	mevxdone_movex

mevxdone_movex

	move	*a14(OYPOS),a0,W
	move	*a8(OYPOS),a1,W
	sub	a1,a0
	jrz	mevxdone_movey
	jrn	mevxmove_up
	jruc	mevxmove_down

mevxmove_up
	move	*a8(OYPOS),a1,W
	addi	-mevxymotion_inc,a1
	move	a1,*a8(OYPOS),W
	jruc	mevxdone_movey

mevxmove_down
	move	*a8(OYPOS),a1,W
	addi	mevxymotion_inc,a1
	move	a1,*a8(OYPOS),W
	jruc	mevxdone_movey

mevxdone_movey

	;step through the animation
	inc	a11
	cmpi	4,a11
	jrne	mevxno_wrap
	clr	a11

mevxno_wrap
	move	a11,a14
	X32	a14
	addi	mevxwalk_script,a14
	move	*a14,a0,L
	calla	civanic

	;sound
	movi	RS_GRUNT,a0
	callr	robo_sound
	rets



 SUBR	grunt_shot
	;hit by player gunfire
	PUSH	a1,a7

	;jeepers.  we're dead.
	movi	CLSDEAD,a14
	move	a14,*a8(OID),W

	move	*a0(OXVEL),a14,L
	jrz	mevxvert_bullet
	move	*a0(OYVEL),a1,L
	jrz	mevxhorz_bullet

	add	a1,a14
	jrz	mevxdiag_13
	jruc	mevxdiag_24

mevxhorz_bullet
	movi	mevxdie_vert,a14
	jruc	mevxdeath_set
mevxvert_bullet
	movi	mevxdie_horz,a14
	jruc	mevxdeath_set
mevxdiag_13
	movi	mevxdie_diag24,a14
	jruc	mevxdeath_set
mevxdiag_24
	movi	mevxdie_diag13,a14
	jruc	mevxdeath_set

mevxdeath_set

	move	*a8(OPLINK),a0,L
	move	a14,*a0(mevxDEATH_SEQUENCE),L
	movi	DEADGRUNT_PID,a1
	movi	mevxdie,a7

	move	*a0(PA9),a9,L
	move	*a0(PA10),a10,L
	calla	XFERPROC

	movi	mevxgrunt_points,a0
	callr	score_points

	;die sound
	movi	RS_HIT,a0
	calla	robo_sound

	PULL	a1,a7
	rets


 SUBR	grunt_die
	;hit a mine or something

	PUSH	a1,a7

	movi	CLSDEAD,a14
	move	a14,*a8(OID),W
	move	*a8(OPLINK),a0,L
	movi	mevxdie_vert,a14
	move	a14,*a0(mevxDEATH_SEQUENCE),L
	movi	DEADGRUNT_PID,a1
	movi	mevxdie,a7
	move	*a0(PA9),a9,L
	move	*a0(PA10),a10,L
	calla	XFERPROC

	PULL	a1,a7
	rets




mevxwalk_script
	.long	grunt_1
	.long	grunt_2
	.long	grunt_1
	.long	grunt_3
mevxwalk_scriptx

mevxdie_vert
	.long	grunt_xv1
	.long	grunt_xv2
	.long	grunt_xv3
	.long	grunt_xv4
	.long	0
mevxdie_vertx

mevxdie_horz
	.long	grunt_xh1
	.long	grunt_xh2
	.long	grunt_xh3
	.long	grunt_xh4
	.long	0
mevxdie_horzx

mevxdie_diag13
	.long	grunt_xdf1
	.long	grunt_xdf2
	.long	grunt_xdf3
	.long	grunt_xdf4
	.long	0
mevxdie_diag13x

mevxdie_diag24
	.long	grunt_xdb1
	.long	grunt_xdb2
	.long	grunt_xdb3
	.long	grunt_xdb4
	.long	0
mevxdie_diag24x

mevxdeath_speed	equ	3		;death seq anim speed

mevxacceleration	equ	100		;decrement motion clock every X cycles
mevxtop_speed	equ	3		;as fast as they get
mevxxmotion_inc	equ	0004h
mevxymotion_inc	equ	0004h

mevxgrunt_points	equ	100		;points for killing a grunt

	;reg use
	; a0 - (in) # of posts to create
	; a1 - (in) type (0-8)
	; a2 - (in) color (0-F)

 SUBRP	make_posts

	move	a0,a9		;move the inputs to safer spots
	jrz	dzxydone

	move	a1,a10		;type

	move	a2,a11		;color
	sla	8,a11
	or	a2,a11

dzxyanother_post
dzxyget_pos
	movi	dzxymax_y-dzxymin_y,a0
	calla	RNDRNG0
	move	a0,a2			;hide a0
	movi	dzxymax_x-dzxymin_x,a0
	calla	RNDRNG0
	move	a2,a1			;put it back

	addi	dzxymin_x,a0
	addi	dzxymin_y,a1

	cmpi	dzxymid_x1,a0
	jrle	dzxyplace_post
	cmpi	dzxymid_x2,a0
	jrge	dzxyplace_post
	cmpi	dzxymid_y1,a1
	jrle	dzxyplace_post
	cmpi	dzxymid_y2,a1
	jrge	dzxyplace_post
	jruc	dzxyget_pos

dzxyplace_post
	sla	16,a0			;X pos
	sla	16,a1			;Y pos

	;create the post object
	move	a10,a14
	X32	a14
	addi	dzxypost_types,a14
	move	*a14,a14,L
	move	*a14,a2,L		;DON'T advance

	clr	a3
	movi	DMACNZ,a4
	movi	CLSNEUT|TYPPOST,a5
	clr	a6
	clr	a7
	calla	BEGINOBJW

	move	a10,*a8(OMISC),W	;stuff the type in the object

	move	a11,*a8(OCONST),W

	movi	robo_p,a0
	calla	pal_getf
	move	a0,*a8(OPAL),W

	dsj	a9,dzxyanother_post

dzxydone
	rets


dzxymin_x	equ	53	;post start outer boundaries
dzxymax_x	equ	347-17
dzxymin_y	equ	45
dzxymax_y	equ	231-10

dzxymid_x1	equ	200-50	;post start inner boundaries
dzxymid_x2	equ	200+50
dzxymid_y1	equ	138-50
dzxymid_y2	equ	138+50



 SUBR	post_die

	movi	CLSDEAD,a14
	move	a14,*a8(OID),W
	CREATE	DEADPOST_PID,kill_post

	rets


	;reg use
	; a8 - * image
	; a9 - anim pointer

 SUBR	kill_post

	move	*a8(OMISC),a0,W
	X32	a0
	addi	dzxypost_types,a0
	move	*a0,a9,L
	move	*a8(OCTRL),a14,W
	xori	DMACNZ,a14
	ori	DMAWNZ,a14
	move	a14,*a8(OCTRL),W
dzxykploop
	move	*a9+,a0,L
	jrz	dzxykpdone
	calla	civanic
	SLEEPK	dzxydie_speed
	jruc	dzxykploop

dzxykpdone
	calla	DELOBJA8
	DIE


dzxydie_speed	equ	3

dzxypost_types
	.long	dzxystar		;0
	.long	dzxycrystal	;1
	.long	dzxydiamond	;2
	.long	dzxysquare		;3
	.long	dzxyrectangle	;4
	.long	dzxyR2084		;5
	.long	dzxypcube		;6
	.long	dzxyspiral		;7
	.long	dzxytriangle	;8
	.long	0
dzxypost_typesx

dzxystar
	.long	star_1,star_2,star_3,0

dzxycrystal
	.long	crystal_1,crystal_2,crystal_3,0

dzxydiamond
	.long	diamond_1,diamond_2,diamond_3,0

dzxysquare
	.long	square_1,square_2,square_3,0

dzxyrectangle
	.long	rectangle_1,rectangle_2,rectangle_3,0

dzxyR2084
	.long	R2084_1,R2084_2,R2084_3,0

dzxypcube
	.long	pcube_1,pcube_2,pcube_3,0

dzxyspiral
	.long	spiral_1,spiral_2,spiral_3,0

dzxytriangle
	.long	triangle_1,triangle_2,triangle_3,0



	.bss	humans_saved,	16

	;reg use
	; a0 # of moms
	; a1 # of dads
	; a2 # of kids 

 SUBRP	make_humans

	;initialize the savecount
	clr	a14
	move	a14,@humans_saved,W

	;first make the moms
	move	a0,a0
	jrz	tveiskip_moms
tveimom_loop
	PUSHP	a0,a1,a2
	callr	tveirand_position
	movi	ROBJ_MOM,a9
	CREATE	HUMAN_PID,human
	PULLP	a0,a1,a2
	dsj	a0,tveimom_loop

tveiskip_moms

	;dads
	move	a1,a1
	jrz	tveiskip_dads
tveidad_loop
	PUSHP	a1,a2
	callr	tveirand_position
	movi	ROBJ_DAD,a9
	CREATE	HUMAN_PID,human
	PULLP	a1,a2
	dsj	a1,tveidad_loop

tveiskip_dads

	;kids
	move	a2,a2
	jrz	tveiskip_kids
tveikid_loop
	PUSHP	a2
	callr	tveirand_position
	movi	ROBJ_KID,a9
	CREATE	HUMAN_PID,human
	PULLP	a2
	dsj	a2,tveikid_loop

tveiskip_kids
	rets


	;reg use
	; no input
	;a10 - (ret) an X val
	;a11 - (ret) a Y val

 SUBRP tveirand_position
	movi	tveimax_x-tveimin_x,a0
	calla	RNDRNG0
	move	a0,a10
	addi	tveimin_x,a10

	movi	tveimax_y-tveimin_y,a0
	calla	RNDRNG0
	move	a0,a11
	addi	tveimin_y,a11

	rets


	STRUCTPD
	LONG	tveiHITPOST	;UHL post we've hit

	;reg use
	; a8 - hObject
	; a9 - (in)  OID
	; a9 - (use) image table address (tveimom_table, tveidad_table...)
	;a10 - (in)  x
	;a10 - (use) direction of motion (1-8)
	;a11 - (in)  y
	;a11 - (use) frame index (0-3)


 SUBRP	human

	cmpi	ROBJ_MOM,a9
	jreq	tveiinit_mom
	cmpi	ROBJ_DAD,a9
	jreq	tveiinit_dad
	cmpi	ROBJ_KID,a9
	jreq	tveiinit_kid

	LOCKUP	;bad objid

tveiinit_mom
	movi	tveimom_table,a9
	jruc	tveimake_obj

tveiinit_dad
	movi	tveidad_table,a9
	jruc	tveimake_obj

tveiinit_kid
	movi	tveikid_table,a9
	jruc	tveimake_obj

tveimake_obj
	;cweate a widdle people object
	move	a10,a0
	sla	16,a0
	move	a11,a1
	sla	16,a1
	move	*a9(tveiwalk_down),a2,L
	clr	a3
	movi	DMAWNZ,a4
	movi	CLSNEUT|TYPHUMAN,a5
	clr	a6
	clr	a7
	calla	BEGINOBJW

	;choose a direction of motion
	movi	7,a0
	calla	RNDRNG0
	inc	a0
	move	a0,a10

	;set the frame index
	movi	3,a11
	callr	tveiadvance_frame

tveimove_loop
	SLEEPK	tveisleep_time
	callr	tveirand_dirchange
	callr	tveimove_onestep
	move	a0,a0
	jrnz	tveihit_wall
	callr	tveiadvance_frame
	jruc	tveimove_loop

tveihit_wall
	;sleep first because: If you move and bump into both a wall and a
	; post at the same time (could happen), and then you immediately
	; reverse direction, you'll then get flipped AGAIN when you hit
	; the post and get forwarded right through the wall.  yuck.  so
	; instead when you hit a wall, wait a frame and let the post
	; collisions sort themselves out, THEN change direction.
	SLEEPK	1
	callr	tveireverse_direction
	callr	tveiadvance_frame
	jruc	tveimove_loop

tveihit_post
	callr	post_adjust
	callr	tveiadvance_frame
	jruc	tveimove_loop

tveisaved
	;sound
	movi	RS_RESCUE,a0
	callr	robo_sound

	;increment the save count
	move	@humans_saved,a14,W
	inc	a14
	move	a14,@humans_saved,W

	cmpi	5,a14
	jrle	tveino_cap
	movi	5,a14
tveino_cap
	dec	a14

	PUSH	a14
	sla	4,a14
	addi	tveiscore_table,a14
	move	*a14,a0,W
	callr	score_points
	PULL	a14

	X32	a14
	addi	tveisaved_table,a14
	move	*a14,a0,L
	calla	civanic

	SLEEP	120
	calla	DELOBJA8
	jruc	tveidone

tveikilled
	movi	skull,a0
	calla	civanic

	SLEEP	120
	calla	DELOBJA8

tveidone
	DIE



	;reg use
	; a0 - X overlap
	; a1 - Y overlap

 SUBRP	post_adjust
	PUSH	a0,a1,a2,a3,a7

	move	*a13(tveiHITPOST),a7,L

	callr	tveireverse_direction

	;calculate degree of X and Y overlap
	move	a10,a2
	X32	a2
	addi	tveiwalk_increments,a2
	move	*a2+,a3,W	;y vel
	jrn	tveiyvel_neg
	jrz	tveiyvel_zero

tveiyvel_pos
	move	*a7(OYPOS),a1
	move	*a7(OSIZEY),a14
	add	a14,a1
	move	*a8(OYPOS),a14
	sub	a14,a1
	jruc	tveido_xvel
tveiyvel_zero
	movi	100h,a1
	jruc	tveido_xvel
tveiyvel_neg
	move	*a8(OYPOS),a1
	move	*a8(OSIZEY),a14
	add	a14,a1
	move	*a7(OYPOS),a14
	sub	a14,a1

tveido_xvel
	move	*a2,a3,W	;x vel
	jrn	tveixvel_neg
	jrz	tveixvel_zero

tveixvel_pos
	move	*a7(OXPOS),a0
	move	*a7(OSIZEX),a14
	add	a14,a0
	move	*a8(OXPOS),a14
	sub	a14,a0
	jruc	tveiovlap_done
tveixvel_zero
	movi	100h,a0
	jruc	tveiovlap_done
tveixvel_neg
	move	*a8(OXPOS),a0
	move	*a8(OSIZEX),a14
	add	a14,a0
	move	*a7(OXPOS),a14
	sub	a14,a0

tveiovlap_done
	;a0 and a1 are the X and Y overlaps, respectively.  We need only
	; worry about the smallest of the two and move that many steps.  Note
	; that if velocity in a given direction is zero, the overlap is
	; set to some outrageously large value so that the other direction
	; is all that counts.
	cmp	a1,a0
	jrle	tveilow_set
	move	a1,a0
tveilow_set
	;a0 is now the smallest.
	move	a0,a1
	move	a10,a2
	X32	a2
	addi	tveiwalk_increments,a2
	move	*a2+,a3,W	;y vel
	mpys	a3,a1
	move	*a2,a3,W	;x vel
	mpys	a0,a3
	move	a3,a0

	;a0 and a1 now hold X and Y adjustments, respectively.
	move	*a8(OXPOS),a14
	add	a0,a14
	move	a14,*a8(OXPOS)
	move	*a8(OYPOS),a14
	add	a1,a14
	move	a14,*a8(OYPOS)
	
	PULL	a0,a1,a2,a3,a7
	rets



	;reg use
	; a0 - scratch
	; a0 (out) - walls hit (0-2)
	; a1 - scratch
	; a8 - (in)  hObject
	; a9 - (in)  image table address (tveimom_table, tveidad_table...)
	;a10 - (in)  direction of motion (1-8)
	;a11 - (in)  frame index (0-3)

 SUBRP	tveimove_onestep

	;move the object
	move	a10,a1
	X32	a1
	addi	tveiwalk_increments,a1
	move	*a1+,a14,W
	move	*a8(OYPOS),a0,W
	add	a14,a0
	move	a0,*a8(OYPOS),W
	move	*a1+,a14,W
	move	*a8(OXPOS),a0,W
	add	a14,a0
	move	a0,*a8(OXPOS),W

	clr	a1
	move	*a8(OXPOS),a0,W

	cmpi	tveimin_x,a0
	jrge	tveinot_lowx

	;low x
	inc	a1
	movi	tveimin_x,a0
	move	a0,*a8(OXPOS),W

tveinot_lowx
	cmpi	tveimax_x,a0
	jrle	tveinot_highx

	;high x
	inc	a1
	movi	tveimax_x,a0
	move	a0,*a8(OXPOS),W

tveinot_highx

	move	*a8(OYPOS),a0,W

	cmpi	tveimin_y,a0
	jrge	tveinot_lowy

	;low y
	inc	a1
	movi	tveimin_y,a0
	move	a0,*a8(OYPOS),W

tveinot_lowy
	cmpi	tveimax_y,a0
	jrle	tveinot_highy

	;high y
	inc	a1
	movi	tveimax_y,a0
	move	a0,*a8(OYPOS),W

tveinot_highy
	move	a1,a0
	rets



 SUBRP	tveirand_dirchange

	;1 chance in tveidirchange_chance of spontaneously switching direction
	movi	tveidirchange_chance,a0
	calla	RNDRNG0
	move	a0,a0
	jrnz	tveidirchange_done
	movi	7,a0
	calla	RNDRNG0
	inc	a0
	move	a0,a10

tveidirchange_done
	rets



 SUBRP	tveireverse_direction

	;reverse direction of motion
	subi	4,a10
	jrp	tveird_done
	addi	8,a10
tveird_done
	rets


 SUBRP	tveiadvance_frame

	;advance the frame and set the new image
	inc	a11
	cmpi	4,a11
	jrne	tveino_wrap
	;wraparound.  reset to start
	clr	a11

tveino_wrap
	;calculate the next frame
	move	a9,a0
	move	a10,a1
	sla	4,a1		;mult by 10h
	addi	tveimotion_table,a1

	;a1 now points to one of the entries in tveimotion table
	move	*a1,a1,W
	add	a1,a0

	;a0 now points to an entry in tveixxx_table
	move	a11,a1
	X32	a1		;mult by 20h
	add	a1,a0
	move	*a0,a0,L

	calla	civanic

	rets



 SUBR	human_saved
	PUSH	a1,a7

	;change the obj id
	movi	CLSDEAD,a14
	move	a14,*a8(OID),W
	move	*a8(OPLINK),a0,L
	movi	SAVEDHUMAN_PID,a1
	movi	tveisaved,a7
	calla	XFERPROC

	PULL	a1,a7
	rets

 SUBR	human_killed
	PUSH	a1,a7

	movi	CLSDEAD,a14
	move	a14,*a8(OID),W
	move	*a8(OPLINK),a0,L
	movi	DEADHUMAN_PID,a1
	movi	tveikilled,a7
	calla	XFERPROC

	PULL	a1,a7
	rets


 SUBR	human_hitpost
	PUSH	a1,a7

	move	a0,a1
	move	*a8(OPLINK),a0,L
	move	a1,*a0(tveiHITPOST),L
	move	*a0(PA8),a8,L
	move	*a0(PA9),a9,L
	move	*a0(PA10),a10,L
	move	*a0(PA11),a11,L
	movi	HUMAN_PID,a1
	movi	tveihit_post,a7
	calla	XFERPROC

	PULL	a1,a7
	rets



tveimin_x	equ	53	;human start/motion outer boundaries
tveimax_x	equ	347-11
tveimin_y	equ	45
tveimax_y	equ	231-13

tveisleep_time	equ	7
tveix_step		equ	1
tveiy_step		equ	1

tveidirchange_chance	equ	40

tveiwalk_increments
	.word	0,0			;because direction is 1-8, not 0-7
	.word	-tveiy_step,0
	.word	-tveiy_step,tveix_step
	.word	0,tveix_step
	.word	tveiy_step,tveix_step
	.word	tveiy_step,0
	.word	tveiy_step,-tveix_step
	.word	0,-tveix_step
	.word	-tveiy_step,-tveix_step
tveiwalk_incrementsx

tveimotion_table
	.word	0			;because direction is 1-8, not 0-7
	.word	tveiwalk_up
	.word	tveiwalk_right
	.word	tveiwalk_right
	.word	tveiwalk_right
	.word	tveiwalk_down
	.word	tveiwalk_left
	.word	tveiwalk_left
	.word	tveiwalk_left
tveimotion_tablex

tveiwalk_left	equ	0000h
tveiwalk_right	equ	tveiwalk_left + (4 * 20h)
tveiwalk_up	equ	tveiwalk_right + (4 * 20h)
tveiwalk_down	equ	tveiwalk_up + (4 * 20h)

tveiscore_table
	.word	1000,2000,3000,4000,5000
tveiscore_tablex

tveimom_table
	.long	mom_l1
	.long	mom_l2
	.long	mom_l1
	.long	mom_l3

	.long	mom_r1
	.long	mom_r2
	.long	mom_r1
	.long	mom_r3

	.long	mom_u1
	.long	mom_u2
	.long	mom_u1
	.long	mom_u3

	.long	mom_d1
	.long	mom_d2
	.long	mom_d1
	.long	mom_d3
tveimom_tablex

tveidad_table
	.long	dad_l1
	.long	dad_l2
	.long	dad_l1
	.long	dad_l3

	.long	dad_r1
	.long	dad_r2
	.long	dad_r1
	.long	dad_r3

	.long	dad_u1
	.long	dad_u2
	.long	dad_u1
	.long	dad_u3

	.long	dad_d1
	.long	dad_d2
	.long	dad_d1
	.long	dad_d3
tveidad_tablex

tveikid_table
	.long	kid_l1
	.long	kid_l2
	.long	kid_l1
	.long	kid_l3

	.long	kid_r1
	.long	kid_r2
	.long	kid_r1
	.long	kid_r3

	.long	kid_u1
	.long	kid_u2
	.long	kid_u1
	.long	kid_u3

	.long	kid_d1
	.long	kid_d2
	.long	kid_d1
	.long	kid_d3
tveikid_tablex

tveisaved_table
	.long	one_k
	.long	two_k
	.long	three_k
	.long	four_k
	.long	five_k
tveisaved_tablex



	;reg use
	; a0 - (in) # of hulks

 SUBRP	make_hulks

	move	a0,a0
	jrz	stdzdone

stdzanother_hulk
	PUSHP	a0

stdzget_pos
	movi	stdzmax_x-stdzmin_x,a0
	calla	RNDRNG0
	move	a0,a9
	movi	stdzmax_y-stdzmin_y,a0
	calla	RNDRNG0
	move	a0,a10

	addi	stdzmin_x,a9
	addi	stdzmin_y,a10

	cmpi	stdzmid_x1,a9
	jrle	stdzplace_hulk
	cmpi	stdzmid_x2,a9
	jrge	stdzplace_hulk
	cmpi	stdzmid_y1,a10
	jrle	stdzplace_hulk
	cmpi	stdzmid_y2,a10
	jrge	stdzplace_hulk
	jruc	stdzget_pos

stdzplace_hulk
	;assign a random starting position
	CREATE	HULK_PID,hulk
	PULLP	a0
	dsj	a0,stdzanother_hulk

stdzdone
	rets


stdzmin_x	equ	53	;hulk start outer boundaries
stdzmax_x	equ	347-13
stdzmin_y	equ	45
stdzmax_y	equ	231-16

stdzmid_x1	equ	200-50	;hulk start inner boundaries
stdzmid_x2	equ	200+50
stdzmid_y1	equ	138-50
stdzmid_y2	equ	138+50



	STRUCTPD
	LONG	xbilPD_SCRIPT	;UHL script head
	WORD	xbilPD_FRAME_NDX	;UHW frame index

	;reg use
	; a8 - object handle
	; a9 - (in)  starting x
	; a9 - (use) frame change count
	;a10 - (in)  starting y
	;a11 - direction of motion (0-3)

 SUBRP	hulk

	;choose a direction of motion
	movi	3,a0
	calla	RNDRNG0
	move	a0,a11

	X32	a0
	addi	xbilanim_list,a0
	move	*a0,a6,L
	move	a6,*a13(xbilPD_SCRIPT),L
	clr	a7
	move	a7,*a13(xbilPD_FRAME_NDX),W

	;create the hulk object
	move	a9,a0		;x pos
	sla	16,a0
	move	a10,a1		;y pos
	sla	16,a1

	move	a7,a14		;img
	X32	a14
	add	a6,a14
	move	*a14,a2,L

	clr	a3
	movi	DMAWNZ,a4
	movi	CLSENMY|TYPHULK,a5
	clr	a6
	clr	a7
	calla	BEGINOBJW

	;set the move counter
	movi	xbilmove_freq/2,a0
	calla	RNDRNG0
	addi	xbilmove_freq,a0
	move	a0,a9

xbilloop
	SLEEPK	1
	dsj	a9,xbilloop
	callr	xbilmove_hulk
	movi	xbilmove_freq,a9
	jruc	xbilloop


xbilbeen_shot	;we immediately wake up here if we've been hit and moved
		; by a player bullet.
	callr	xbildo_bounds_check
	jruc	xbilloop

	DIE



	;reg use
	; a0 scratch
	; a1 scratch
	; a8 object handle
	;a11 direction of motion (0-3)

 SUBRP	xbilmove_hulk
	;move him
	move	a11,a14
	X32	a14
	addi	xbilmove_table,a14
	move	*a14+,a0,W
	move	*a14,a1,W
	move	*a8(OXPOS),a14,W
	add	a0,a14
	move	a14,*a8(OXPOS),W
	move	*a8(OYPOS),a14,W
	add	a1,a14
	move	a14,*a8(OYPOS),W

	;
	;note the fall-through here
	;

	;bounds check
 SUBRP	xbildo_bounds_check
	clr	a1

	clr	a0
	move	*a8(OXPOS),a0,W
	cmpi	xbillow_x,a0
	jrlt	xbiltoo_left
	cmpi	xbilhigh_x,a0
	jrgt	xbiltoo_right
	jruc	xbilvert_check

xbiltoo_left
	movi	xbillow_x,a14
	move	a14,*A8(OXPOS),W
	ori	M_HIT_LEFT,a1
	jruc	xbilvert_check

xbiltoo_right
	movi	xbilhigh_x,a14
	move	a14,*A8(OXPOS),W
	ori	M_HIT_RIGHT,a1

xbilvert_check
	clr	a0
	move	*a8(OYPOS),a0,W
	cmpi	xbillow_y,a0
	jrlt	xbiltoo_high
	cmpi	xbilhigh_y,a0
	jrgt	xbiltoo_low
	jruc	xbildone_boundcheck

xbiltoo_high
	movi	xbillow_y,a14
	move	a14,*A8(OYPOS),W
	ori	M_HIT_TOP,a1
	jruc	xbildone_boundcheck

xbiltoo_low
	movi	xbilhigh_y,a14
	move	a14,*A8(OYPOS),W
	ori	M_HIT_BOTTOM,a1
	jruc	xbildone_boundcheck

xbildone_boundcheck
	move	a1,a1
	jrnz	xbilchange_direction

xbilno_wallhit
	movi	xbilturn_prob,a0
	PUSH	a1
	calla	RNDRNG0
	PULL	a1
	move	a0,a0
	jrnz	xbildone_moving

	;spontaneous direction change.  random for now

xbilchange_direction
	;turn 90 degrees by randomly incrementing or decrementing direction
	movi	1,a0
	PUSH	a1
	calla	RNDRNG0
	PULL	a1
	move	a0,a0
	jrz	xbilinc_direction
	dec	a11
	jruc	xbildir_rangecheck
	
xbilinc_direction
	inc	a11

xbildir_rangecheck
	cmpi	-1,a11
	jrne	xbildir_notlow
	movi	3,a11

xbildir_notlow
	cmpi	4,a11
	jrne	xbildir_changed
	clr	a11

xbildir_changed

	;verify that this is a good direction
	cmpi	0,a11
	jreq	xbilvalidate_up
	cmpi	1,a11
	jreq	xbilvalidate_right
	cmpi	2,a11
	jreq	xbilvalidate_down
	cmpi	3,a11
	jreq	xbilvalidate_left

xbilvalidate_up
	andi	M_HIT_TOP,a1
	jrnz	xbilchange_direction
	jruc	xbilvalid_dir
xbilvalidate_right
	andi	M_HIT_RIGHT,a1
	jrnz	xbilchange_direction
	jruc	xbilvalid_dir
xbilvalidate_down
	andi	M_HIT_BOTTOM,a1
	jrnz	xbilchange_direction
	jruc	xbilvalid_dir
xbilvalidate_left
	andi	M_HIT_LEFT,a1
	jrnz	xbilchange_direction
	jruc	xbilvalid_dir

xbilvalid_dir

	move	a11,a0
	X32	a0
	addi	xbilanim_list,a0
	move	*a0,a0,L
	move	a0,*a13(xbilPD_SCRIPT),L

xbildone_moving
	
xbilnew_frame
	move	*a13(xbilPD_FRAME_NDX),a14,W
	move	*a13(xbilPD_SCRIPT),a6,L
	inc	a14
	cmpi	4,a14
	jrne	xbilno_wrap
	clr	a14
xbilno_wrap
	move	a14,*a13(xbilPD_FRAME_NDX),W
	X32	a14
	add	a6,a14
	move	*a14,a0,L
	calla	civanic

	rets



 SUBR	hulk_pushback
	PUSH	a1,a7,a9,a10,a11,a13

	;immediately move the hulk in the direction of the bullet's motion
	move	*a0(OXVEL),a14,L
	sra	17,a14
	move	*a8(OXPOS),a1,W
	add	a14,a1
	move	a1,*a8(OXPOS),W

	move	*a0(OYVEL),a14,L
	sra	17,a14
	move	*a8(OYPOS),a1,W
	add	a14,a1
	move	a1,*a8(OYPOS),W

	;wake up at the collision check
	move	*a8(OPLINK),a0,L
	move	*a0(PA9),a9,L
	move	*a0(PA10),a10,L
	move	*a0(PA11),a11,L
	movi	HULK_PID,a1
	movi	xbilbeen_shot,a7
	calla	XFERPROC
	PULL	a1,a7,a9,a10,a11,a13

	rets



xbilstep_x		equ	4
xbilstep_y		equ	4

xbillow_x		equ	53	;hulk move boundaries
xbilhigh_x		equ	347-13
xbillow_y		equ	45
xbilhigh_y		equ	231-16

xbilmove_freq	equ	8	;frames between moves

xbilturn_prob	equ	30	;chance per frame of spontaneously changing
				;direction
xbilmove_table
	.word	0,-xbilstep_y
	.word	xbilstep_x,0
	.word	0,xbilstep_y
	.word	-xbilstep_x,0
xbilmove_tablex

xbilanim_list
	.long	xbilanim_vert
	.long	xbilanim_right
	.long	xbilanim_vert
	.long	xbilanim_left
xbilanim_listx

xbilanim_vert
	.long	hulk_ud1
	.long	hulk_ud2
	.long	hulk_ud1
	.long	hulk_ud3
xbilanim_vertx

xbilanim_left
	.long	hulk_l1
	.long	hulk_l2
	.long	hulk_l1
	.long	hulk_l3
xbilanim_leftx

xbilanim_right
	.long	hulk_r1
	.long	hulk_r2
	.long	hulk_r1
	.long	hulk_r3
xbilanim_rightx



	;reg use
	; a0 - (in) # of sphereoids

 SUBRP	make_sphereoids

	move	a0,a0
	jrz	byijdone

byijanother_sphereoid
	PUSHP	a0

byijget_pos
	movi	byijmax_x-byijmin_x,a0
	calla	RNDRNG0
	move	a0,a9
	movi	byijmax_y-byijmin_y,a0
	calla	RNDRNG0
	move	a0,a10

	addi	byijmin_x,a9
	addi	byijmin_y,a10

	cmpi	byijmid_x1,a9
	jrle	byijplace_sphereoid
	cmpi	byijmid_x2,a9
	jrge	byijplace_sphereoid
	cmpi	byijmid_y1,a10
	jrle	byijplace_sphereoid
	cmpi	byijmid_y2,a10
	jrge	byijplace_sphereoid
	jruc	byijget_pos

byijplace_sphereoid
	;assign a random starting position
	CREATE	SPHEREOID_PID,sphereoid
	PULLP	a0
	dsj	a0,byijanother_sphereoid

byijdone
	rets


byijmid_x1	equ	200-80	;sphereoid start inner boundaries
byijmid_x2	equ	200+80
byijmid_y1	equ	138-80
byijmid_y2	equ	138+80



	STRUCTPD
	LONG	byijOXACC		;UHL x acceleration
	LONG	byijOYACC		;UHL y acceleration
	WORD	byijOCHILDREN	;UHW # of children left to spawn
	WORD	byijOSTAGE		;UHW stage in life cycle

	;reg use
	; a7 (use) event timer (related to byijOSTAGE)
	; a8 (use) * object
	; a9 (in)  x pos
	; a9 (use) anim counter
	;a10 (in)  y pos
	;a10 (use) frame pointer
	;a11 (use) time until next vel change

 SUBRP	sphereoid

	;increment the badguy count
	move	@live_badguys,a14,W
	inc	a14
	move	a14,@live_badguys,W

	;create the sphereoid object
	move	a9,a0		;x pos
	sll	16,a0
	move	a10,a1		;y pos
	sll	16,a1
	movi	byijstandard_script,a10
	move	*a10+,a2,L	;img
	clr	a3
	movi	DMAWNZ,a4
	movi	CLSENMY|TYPSPHEREOID,a5
	clr	a6
	clr	a7
	calla	BEGINOBJW

	;initialize anim counter
	movi	byijanim_speed,a9

	;set initial velocities and accelerations
	callr	byijset_va

	;initialize life cycle and event timer
	movi	byijSTAGE_YOUTH,a14
	move	a14,*a13(byijOSTAGE),W
	movi	byijyouth_time/2,a0
	calla	RNDRNG0
	addi	byijyouth_time*3/4,a0
	move	a0,a7

byijloop
	PUSHP	a7
	SLEEPK	1
	PULLP	a7
	dec	a9
	jrnz	byijno_anim

	;advance the frame
	move	*a10+,a0,L
	jrnz	byijnewframe

	;reset script.  depends on the stage
	move	*a13(byijOSTAGE),a14,W
	cmpi	byijSTAGE_PARENT,a14
	jreq	byijset_parent_script
	movi	byijstandard_script,a10
	jruc	byijscript_set
byijset_parent_script
	movi	byijparent_script,a10

byijscript_set
	move	*a10+,a0,L

byijnewframe
	calla	civanic

	;reset the counter
	movi	byijanim_speed,a9

byijno_anim
	;adjust velocities
	callr	byijacc_add

	;bounds check
	callr	byijin_bounds

	;adjust vel and acc if it's time
	dec	a11
	jrnz	byijno_va_change
	callr	byijset_va

byijno_va_change

	;do event?
	dec	a7
	jrnz	byijno_event

	;event.  depends on the stage in the life cycle
	move	*a13(byijOSTAGE),a14,W
	cmpi	byijSTAGE_YOUTH,a14
	jreq	byijyouth_event
	cmpi	byijSTAGE_PARENT,a14
	jreq	byijparent_event
	;default
	jruc	byijdotage_event

byijyouth_event
	;switch to middle age
	movi	byijSTAGE_PARENT,a14
	move	a14,*a13(byijOSTAGE),W

	;set the number of kids to be spawned
	movi	byijmax_kids-byijmin_kids,a0
	calla	RNDRNG0
	addi	byijmin_kids,a0
	move	a0,*a13(byijOCHILDREN),W

	;set the spawn timer
	movi	byijspawn_time/2,a0
	calla	RNDRNG0
	addi	byijspawn_time*3/4,a0
	move	a0,a7
	jruc	byijno_event

byijparent_event
	;spawn a brat
	PUSHP	a10,a11
	move	*a8(OXVAL),a10,L
	move	*a8(OYVAL),a11,L
	CREATE	ENFORCER_PID,enforcer
	PULLP	a10,a11

	;decrement the kid count
	move	*a13(byijOCHILDREN),a14,W
	dec	a14
	jrz	byijbarren
	move	a14,*a13(byijOCHILDREN),W
	movi	byijspawn_time/2,a0
	calla	RNDRNG0
	addi	byijspawn_time*3/4,a0
	move	a0,a7
	jruc	byijno_event

byijbarren
	;that was the last kid.  age
	movi	byijSTAGE_DOTAGE,a14
	move	a14,*a13(byijOSTAGE),W
	movi	byijold_age_time,a7
	jruc	byijno_event

byijdotage_event
	;nothing fancy.  just die.
	jruc	byijdie_peacefully
	
byijno_event
	jruc	byijloop

byijbeen_shot
	;crud.  we've been shot.  score the points
	movi	byijsphereoid_points,a0
	callr	score_points

	;decrement the badguy count
	move	@live_badguys,a14,W
	dec	a14
	move	a14,@live_badguys,W

	;clear the velocity
	clr	a14
	move	a14,*a8(OXVEL),L
	move	a14,*a8(OYVEL),L

	;go through the death routine
	movi	byijparent_script,a10,L
	move	*a8(OCTRL),a14,W
	xori	DMAWNZ,a14
	ori	DMACNZ,a14
	move	a14,*a8(OCTRL),W
	movi	byijdiecolor,a14
	move	a14,*a8(OCONST),W
	movi	robo_p,a0
	calla	pal_getf
	move	a0,*a8(OPAL),W

byijdie_loop
	SLEEPK	byijanim_speed
	move	*a10+,a0,L
	jrz	byijscore_msg
	calla	civanic
	jruc	byijdie_loop

byijscore_msg
	movi	byijscore_image,a0
	move	*a8(OCTRL),a1,W
	xori	DMACNZ,a1
	ori	DMAWNZ,a1
	calla	civani
	movi	byijscore_xoff,a14
	move	a14,*a8(ODXOFF),W
	movi	byijscore_yoff,a14	
	move	a14,*a8(ODYOFF),W
	SLEEP	byijscore_time
	jruc	byijexpire

byijdie_peacefully
	;decrement the badguy count
	move	@live_badguys,a14,W
	dec	a14
	move	a14,@live_badguys,W

byijexpire
	calla	DELOBJA8

	DIE


 SUBRP	byijset_va

	movi	byijhigh_v*2,a0
	calla	RNDRNG0
	subi	byijhigh_v,a0
	move	a0,*a8(OXVEL),L

	movi	byijhigh_v*2,a0
	calla	RNDRNG0
	subi	byijhigh_v,a0
	move	a0,*a8(OYVEL),L

	movi	byijhigh_a*2,a0
	calla	RNDRNG0
	subi	byijhigh_a,a0
	move	a0,*a13(byijOXACC),L

	movi	byijhigh_a*2,a0
	calla	RNDRNG0
	subi	byijhigh_a,a0
	move	a0,*a13(byijOYACC),L

	movi	byijva_change_time,a0
	calla	RNDRNG0
	inc	a0
	move	a0,a11

	rets


 SUBRP	byijacc_add
	move	*a13(byijOXACC),a14,L
	move	*a8(OXVEL),a0,L
	add	a14,a0
	move	a0,*a8(OXVEL),L

	move	*a13(byijOYACC),a14,L
	move	*a8(OYVEL),a0,L
	add	a14,a0
	move	a0,*a8(OYVEL),L

	rets


 SUBRP	byijin_bounds

	move	*a8(OXPOS),a14,W
	movi	byijmin_x,a0
	cmp	a0,a14
	jrlt	byijx_adjust

	movi	byijmax_x,a0
	cmp	a0,a14
	jrgt	byijx_adjust
	jruc	byijy_check

byijx_adjust
	move	a0,*a8(OXPOS),W
	clr	a0
	move	a0,*a8(OXVEL),L
	move	a0,*a13(byijOXACC),L

byijy_check
	move	*a8(OYPOS),a14,W
	movi	byijmin_y,a0
	cmp	a0,a14
	jrlt	byijy_adjust

	movi	byijmax_y,a0
	cmp	a0,a14
	jrgt	byijy_adjust
	jruc	byijdone_check

byijy_adjust
	move	a0,*a8(OYPOS),W
	clr	a0
	move	a0,*a8(OYVEL),L
	move	a0,*a13(byijOYACC),L

byijdone_check
	rets



 SUBR	sphereoid_die
	PUSH	a1,a7

	movi	CLSDEAD,a14
	move	a14,*a8(OID),W
	move	*a8(OPLINK),a0,L
	movi	DEADSPHERE_PID,a1
	movi	byijbeen_shot,a7
	calla	XFERPROC

	PULL	a1,a7
	rets



byijanim_speed	equ	3

byijva_change_time	equ	180

byijsphereoid_points	equ	1000

byijyouth_time	equ	180	;time before we have kids
byijspawn_time	equ	120	;time between kids
byijold_age_time	equ	180	;time between last kid and natural death

byijmin_kids	equ	3	;lower limit on spawned enforcers
byijmax_kids	equ	7	;upper limit

byijhigh_v		equ	00004000h
byijhigh_a		equ	00000C00h

byijmin_x	equ	53	;sphereoid move bounds
byijmax_x	equ	347-15
byijmin_y	equ	45
byijmax_y	equ	231-15

byijscore_image	equ	one_k	;image on being shot
byijdiecolor	equ	0909h	;color on being shot
byijscore_time	equ	60	;time to display score value
byijscore_xoff	equ	-3	;shotimage offset
byijscore_yoff	equ	-5

byijSTAGE_YOUTH 	equ	0000h
byijSTAGE_PARENT	equ	0001h
byijSTAGE_DOTAGE	equ	0002h

byijstandard_script
	.long	circle_1
	.long	circle_2
	.long	circle_3
	.long	circle_4
	.long	circle_5
	.long	0

byijparent_script
	.long	circle_1
	.long	circle_2
	.long	circle_3
	.long	circle_4
	.long	circle_5
	.long	circle_6
	.long	circle_7
	.long	circle_8
	.long	0



	.bss	num_enforcers,		16	;active enforcers
	.bss	picket_duty,		32	;*img of picket enforcer

	;reg use
	;  a8 (use) *img
	;  a9 (use) next move timer (move/fire phase)
	;  a9 (use) frame pointer (death phase)
	; a10 (in)  initial X
	; a10 (use) frame pointer (grow phase)
	; a11 (in)  initial Y
	; a11 (use) next shot timer (move/fire phase)

 SUBRP	enforcer

	;increment the badguy count
	move	@live_badguys,a14,W
	inc	a14
	move	a14,@live_badguys,W
	move	@num_enforcers,a14,W
	inc	a14
	move	a14,@num_enforcers,W

	;create the enforcer object
	move	a10,a0
	move	a11,a1
	movi	vfragrow_script,a10
	move	*a10+,a2,L
	clr	a3
	movi	DMAWNZ,a4
	movi	CLSENMY|TYPENFORCER,a5
	clr	a6
	clr	a7
	calla	BEGINOBJW

	;grow phase

vfragrow_loop
	SLEEPK	vfragrow_speed
	move	*a10+,a0,L
	jrz	vframf_phase
	calla	civanic
	jruc	vfragrow_loop

vframf_phase
	;begin move/fire phase.  set initial course
	callr	vfranew_course
	movi	vfraturn_time,a9
	movi	vfrafire_time/2,a0
	calla	RNDRNG0
	addi	vfrafire_time*3/4,a0
	move	a0,a11

vframain_loop
	SLEEPK	1
	dec	a9
	jrnz	vfrano_turn


	;picket phase
	;two cases: we're on picket duty, or we're not.
	move	@picket_duty,a14,L
	cmp	a14,a8
	jreq	vfraon_picket

	;we're not on picket duty
	;if we're the only enforcer, quit now.
	move	@num_enforcers,a14,W
	cmpi	1,a14
	jreq	vfrapicket_done

	;there are multiple enforcers.   If there is no picket, see if we
	; take the job.  If there is, quit.
	move	@picket_duty,a14,L
	jrnz	vfrapicket_done

	;there is no picket.
	movi	vfrapicket_prob,a0
	calla	RNDRNG0
	move	a0,a0
	jrnz	vfrapicket_done

	;we're going to take picket duty
	move	a8,@picket_duty,L
	jruc	vfrapicket_done

vfraon_picket
	;we are on picket duty
	;if we're the only enforcer, see if we leave picket mode.
	move	@num_enforcers,a14,W
	cmpi	1,a14
	jrne	vframultiple_enforcers

	;we're the only enforcer
	movi	vfrastand_down_prob,a0
	calla	RNDRNG0
	move	a0,a0
	jrnz	vfrapicket_done

	;and we've decided to stand down.
	move	a0,@picket_duty,L
	jruc	vfrapicket_done

vframultiple_enforcers
	;we may abandon our post
	movi	vfraabandon_post_prob,a0
	calla	RNDRNG0
	move	a0,a0
	jrnz	vfrapicket_done

	;yep.  we quit.
	move	a0,@picket_duty,L

vfrapicket_done

	;change course
	callr	vfranew_course
	movi	vfraturn_time,a9

vfrano_turn

	dec	a11
	jrnz	vfrano_shot

	;fire a spark
	PUSHP	a10
	move	*a8(OXVAL),a10,L
	move	*a8(OYVAL),a11,L
	CREATE	SPARK_PID,spark
	PULLP	a10
	movi	vfrafire_time/2,a0
	calla	RNDRNG0
	addi	vfrafire_time*3/4,a0
	move	a0,a11

vfrano_shot

	;bounds check
	callr	vfrain_bounds

	jruc	vframain_loop

vfradie
	;decrement the badguy count
	move	@live_badguys,a14,W
	dec	a14
	move	a14,@live_badguys,W
	move	@num_enforcers,a14,W
	dec	a14
	move	a14,@num_enforcers,W

	;zero our velocity
	clr	a14
	move	a14,*a8(OXVEL),L
	move	a14,*a8(OYVEL),L

	;set up the animation
vfradieloop
	move	*a9+,a0,L
	jrz	vfradead_n_buried
	calla	civanic
	sleepk	vfradeath_speed
	jruc	vfradieloop

vfradead_n_buried
	calla	DELOBJA8

	DIE


 SUBRP	vfranew_course

	;two cases.  picket or !picket
	move	@picket_duty,a14,L
	cmp	a8,a14
	jrne	vfranc_notpicket

vfranc_picket
	;we're on picket duty.  if we're not against a wall, move toward the
	; nearest one.  if we are against a wall but not in a corner, move
	; toward the nearest corner.  if we're in a corner, sit tight.

vfranc_notpicket
	;velocity is the distance between enforcer and player / 64 / 2
	move	@player_object,a0,L
	move	*a0(OXVAL),a14,L
	move	*a8(OXVAL),a1,L
	sub	a1,a14
	sra	7,a14
	
	move	a14,*a8(OXVEL),L

	move	*a0(OYVAL),a14,L
	move	*a8(OYVAL),a1,L
	sub	a1,a14
	sra	7,a14
	move	a14,*a8(OYVEL),L

vfranc_done
	rets

 SUBRP	vfrain_bounds

	move	*a8(OXPOS),a14,W
	movi	vframin_x,a0
	cmp	a0,a14
	jrlt	vfrax_adjust

	movi	vframax_x,a0
	cmp	a0,a14
	jrgt	vfrax_adjust
	jruc	vfray_check

vfrax_adjust
	move	a0,*a8(OXPOS),W
	clr	a0
	move	a0,*a8(OXVEL),L

vfray_check
	move	*a8(OYPOS),a14,W
	movi	vframin_y,a0
	cmp	a0,a14
	jrlt	vfray_adjust

	movi	vframax_y,a0
	cmp	a0,a14
	jrgt	vfray_adjust
	jruc	vfradone_check

vfray_adjust
	move	a0,*a8(OYPOS),W
	clr	a0
	move	a0,*a8(OYVEL),L

vfradone_check
	rets



 SUBR	enforcer_die
	;hit by player gunfire
	PUSH	a1,a7

	;jeepers.  we're dead.
	movi	CLSDEAD,a14
	move	a14,*a8(OID),W

	move	*a0(OXVEL),a14,L
	jrz	vfravert_bullet
	move	*a0(OYVEL),a1,L
	jrz	vfrahorz_bullet

	add	a1,a14
	jrz	vfradiag_13
	jruc	vfradiag_24

vfrahorz_bullet
	movi	vfradie_vert,a9
	jruc	vfradeath_set
vfravert_bullet
	movi	vfradie_horz,a9
	jruc	vfradeath_set
vfradiag_13
	movi	vfradie_diag24,a9
	jruc	vfradeath_set
vfradiag_24
	movi	vfradie_diag13,a9
	jruc	vfradeath_set

vfradeath_set
	move	*a8(OPLINK),a0,L
	movi	DEADNFORCER_PID,a1
	movi	vfradie,a7
	move	*a0(PA10),a10,L
	calla	XFERPROC

	movi	vfraenforcer_points,a0
	callr	score_points

	PULL	a1,a7
	rets



vfraenforcer_points	equ	100

vfrapicket_prob	equ	4	;one chance in X of becoming the picket if
				; there are multiple enforcers and none is
				; on the job already.

vfrastand_down_prob equ	4	;one chance in X of leaving picket duty if
				; we're the only enforcer left.

vfraabandon_post_prob equ	8	;one chance in X of leaving picket duty if
				; there are other enforcers around.

vfraturn_time	equ	150
vfrafire_time	equ	90

vfragrow_speed	equ	6

vframin_x	equ	53	;enforcer move bounds
vframax_x	equ	347-9
vframin_y	equ	45
vframax_y	equ	231-11

vfragrow_script
	.long	enf_g1
	.long	enf_g2
	.long	enf_g3
	.long	enf_g4
	.long	enf_g5
	.long	enf_1
	.long	0
vfragrow_scriptx

vfradie_vert
	.long	enf_xv1
	.long	enf_xv2
	.long	enf_xv3
	.long	enf_xv4
	.long	enf_xv5
	.long	0
vfradie_vertx

vfradie_horz
	.long	enf_xh1
	.long	enf_xh2
	.long	enf_xh3
	.long	enf_xh4
	.long	0
vfradie_horzx

vfradie_diag13
	.long	enf_xf1
	.long	enf_xf2
	.long	enf_xf3
	.long	enf_xf4
	.long	0
vfradie_diag13x

vfradie_diag24
	.long	enf_xb1
	.long	enf_xb2
	.long	enf_xb3
	.long	enf_xb4
	.long	0
vfradie_diag24x

vfradeath_speed	equ	3		;death seq anim speed



	;reg use
	;  a6 (use) x acc
	;  a7 (use) y acc
	;  a8 (use) *image
	;  a9 (use) anim timer
	; a10 (in)  initial X
	; a10 (use) anim pointer
	; a11 (in)  initial Y
	; a11 (use) life timer

 SUBRP	spark

	;create a spark object
	move	a10,a0
	move	a11,a1

	movi	heisscript,a10
	move	*a10+,a2,L
	clr	a3
	movi	DMAWNZ,a4
	movi	CLSENMY|TYPSPARK,a5
	clr	a6
	clr	a7
	calla	BEGINOBJW

	;set the initial velocity.
	move	@player_object,a0,L
	move	*a0(OXVAL),a1,L
	move	*a8(OXVAL),a2,L
	sub	a2,a1
	sra	5,a1
	move	a1,*a8(OXVEL),L

	move	*a0(OYVAL),a1,L
	move	*a8(OYVAL),a2,L
	sub	a2,a1
	sra	5,a1
	move	a1,*a8(OYVEL),L

	;and then add a little 'spin' by giving them some acceleration
	movi	heishigh_acc*2,a0
	calla	RNDRNG0
	subi	heishigh_acc,a0
	move	a0,a6
	movi	heishigh_acc*2,a0
	calla	RNDRNG0
	subi	heishigh_acc,a0
	move	a0,a7

	movi	heisanim_time,a9
	movi	heislife_time,a11

heisloop
	PUSHP	a6,a7
	SLEEPK	1
	PULLP	a6,a7

	;bounds check
	callr	heisin_bounds

	;apply accelerations
	move	*a8(OXVEL),a14,L
	add	a6,a14
	move	a14,*a8(OXVEL),L

	move	*a8(OYVEL),a14,L
	add	a7,a14
	move	a14,*a8(OYVEL),L

	dec	a9
	jrnz	heisno_anim

	move	*a10+,a0,L
	jrnz	heisno_wrap
	movi	heisscript,a10
	move	*a10+,a0,L
heisno_wrap
	calla	civanic
	movi	heisanim_time,a9

heisno_anim
	dec	a11
	jrz	heisexpire
	jruc	heisloop

heisexpire
	calla	DELOBJA8

	DIE


 SUBRP	heisin_bounds

	move	*a8(OXPOS),a14,W
	movi	heismin_x,a0
	cmp	a0,a14
	jrlt	heisx_adjust

	movi	heismax_x,a0
	cmp	a0,a14
	jrgt	heisx_adjust
	jruc	heisy_check

heisx_adjust
	move	a0,*a8(OXPOS),W
	clr	a6
	move	a6,*a8(OXVEL),L

heisy_check
	move	*a8(OYPOS),a14,W
	movi	heismin_y,a0
	cmp	a0,a14
	jrlt	heisy_adjust

	movi	heismax_y,a0
	cmp	a0,a14
	jrgt	heisy_adjust
	jruc	heisdone_check

heisy_adjust
	move	a0,*a8(OYPOS),W
	clr	a7
	move	a7,*a8(OYVEL),L

heisdone_check
	rets



 SUBR	spark_die
	PUSH	a1,a7

	movi	CLSDEAD,a14
	move	a14,*a8(OID),W
	move	*a8(OPLINK),a0,L
	movi	DEADSPARK_PID,a1
	movi	heisexpire,a7
	calla	XFERPROC

	PULL	a1,a7
	rets



heislife_time	equ	180		;how long they last
heisanim_time	equ	3		;frame rate

heishigh_acc	equ	00000200h	;top acceleration

heismin_x	equ	53	;spark move bounds
heismax_x	equ	347-7
heismin_y	equ	45
heismax_y	equ	231-7

heisscript
	.long	spark_1
	.long	spark_2
	.long	spark_3
	.long	spark_4
	.long	0



	;reg use
	; a0 - (in) # of quarks

 SUBRP	make_quarks

	move	a0,a0
	jrz	xyipdone

xyipanother_quark
	PUSHP	a0

xyipget_pos
	;assign a random starting position
	movi	xyipmax_x-xyipmin_x,a0
	calla	RNDRNG0
	move	a0,a9
	movi	xyipmax_y-xyipmin_y,a0
	calla	RNDRNG0
	move	a0,a10

	addi	xyipmin_x,a9
	addi	xyipmin_y,a10

	cmpi	xyipmid_x1,a9
	jrle	xyipplace_quark
	cmpi	xyipmid_x2,a9
	jrge	xyipplace_quark
	cmpi	xyipmid_y1,a10
	jrle	xyipplace_quark
	cmpi	xyipmid_y2,a10
	jrge	xyipplace_quark
	jruc	xyipget_pos

xyipplace_quark
	CREATE	QUARK_PID,quark
	PULLP	a0
	dsj	a0,xyipanother_quark

xyipdone
	rets


xyipmid_x1	equ	200-60	;quark start inner boundaries
xyipmid_x2	equ	200+60
xyipmid_y1	equ	138-60
xyipmid_y2	equ	138+60



	STRUCTPD
	WORD	xyipOCHILDREN	;UHW # of children left to spawn
	WORD	xyipOSTAGE		;UHW stage in life cycle

	;reg use
	; a7 (use) event timer (related to xyipOSTAGE)
	; a8 (use) * object
	; a9 (in)  x pos
	; a9 (use) anim counter
	;a10 (in)  y pos
	;a10 (use) frame pointer
	;a11 (use) time until next vel change

 SUBRP	quark

	;increment the badguy count
	move	@live_badguys,a14,W
	inc	a14
	move	a14,@live_badguys,W

	;create the quark object
	move	a9,a0		;x pos
	sll	16,a0
	move	a10,a1		;y pos
	sll	16,a1
	movi	xyipstandard_script,a10
	move	*a10+,a2,L	;img
	clr	a3
	movi	DMAWNZ,a4
	movi	CLSENMY|TYPQUARK,a5
	clr	a6
	clr	a7
	calla	BEGINOBJW

	;initialize anim counter
	movi	xyipanim_speed,a9

	;set initial velocities and accelerations
	callr	xyipset_v

	;initialize life cycle and event timer
	movi	xyipSTAGE_YOUTH,a14
	move	a14,*a13(xyipOSTAGE),W
	movi	xyipyouth_time,a7

xyiploop
	PUSHP	a7
	SLEEPK	1
	PULLP	a7
	dec	a9
	jrnz	xyipno_anim

	;advance the frame
	move	*a10+,a0,L
	jrnz	xyipnewframe

	;reset script.  depends on the stage
	move	*a13(xyipOSTAGE),a14,W
	cmpi	xyipSTAGE_PARENT,a14
	jreq	xyipset_parent_script
	movi	xyipstandard_script,a10
	jruc	xyipscript_set
xyipset_parent_script
	movi	xyipparent_script,a10

xyipscript_set
	move	*a10+,a0,L

xyipnewframe
	calla	civanic

	;reset the counter
	movi	xyipanim_speed,a9

xyipno_anim
	;bounds check
	callr	xyipin_bounds

	;adjust vel if it's time
	dec	a11
	jrnz	xyipno_v_change
	callr	xyipset_v

xyipno_v_change

	;do event?
	dec	a7
	jrnz	xyipno_event

	;event.  depends on the stage in the life cycle
	move	*a13(xyipOSTAGE),a14
	cmpi	xyipSTAGE_YOUTH,a14
	jreq	xyipyouth_event
	cmpi	xyipSTAGE_PARENT,a14
	jreq	xyipparent_event
	;default
	jruc	xyipdotage_event

xyipyouth_event
	;switch to middle age
	movi	xyipSTAGE_PARENT,a14
	move	a14,*a13(xyipOSTAGE),W

	;set the number of kids to be spawned
	movi	xyipmax_kids-xyipmin_kids,a0
	calla	RNDRNG0
	addi	xyipmin_kids,a0
	move	a0,*a13(xyipOCHILDREN),W

	;set the spawn timer
	movi	xyipspawn_time,a7
	jruc	xyipno_event

xyipparent_event
	;spawn a brat
	PUSHP	a10,a11
	move	*a8(OXVAL),a10,L
	move	*a8(OYVAL),a11,L
	CREATE	TANK_PID,tank
	PULLP	a10,a11

	;decrement the kid count
	move	*a13(xyipOCHILDREN),a14,W
	dec	a14
	jrz	xyipbarren
	move	a14,*a13(xyipOCHILDREN),W
	movi	xyipspawn_time,a7
	jruc	xyipno_event

xyipbarren
	;that was the last kid.  age
	movi	xyipSTAGE_DOTAGE,a14
	move	a14,*a13(xyipOSTAGE),W
	movi	xyipold_age_time,a7
	jruc	xyipno_event

xyipdotage_event
	;nothing fancy.  just die.
	jruc	xyipdie_peacefully
	
xyipno_event
	jruc	xyiploop


xyipbeen_shot
	;crud.  we've been shot

xyipdie_peacefully

	;decrement the badguy count
	move	@live_badguys,a14,W
	dec	a14
	move	a14,@live_badguys,W

	calla	DELOBJA8

	DIE


 SUBRP	xyipset_v

	movi	xyiphigh_v,a0
	calla	RNDRNG0
	cmpi	xyiphigh_v/2,a0
	jrgt	xyippositive_x

	subi	xyiphigh_v,a0

xyippositive_x
	move	a0,*a8(OXVEL),L

	movi	xyiphigh_v,a0
	calla	RNDRNG0
	cmpi	xyiphigh_v/2,a0
	jrgt	xyippositive_y

	subi	xyiphigh_v,a0

xyippositive_y
	move	a0,*a8(OYVEL),L

	movi	xyipv_change_time/2,a0
	calla	RNDRNG0
	addi	xyipv_change_time/2,a0
	move	a0,a11

	rets


 SUBRP	xyipin_bounds

	move	*a8(OXPOS),a1,W
	movi	xyipmin_x,a0
	move	*a8(ODXOFF),a14,W
	add	a14,a0
	cmp	a0,a1
	jrlt	xyipx_adjust

	move	*a8(OSIZEX),a0,W
	neg	a0
	move	*a8(ODXOFF),a14,W
	add	a14,a0
	addi	xyipmax_x,a0
	cmp	a0,a1
	jrgt	xyipx_adjust
	jruc	xyipy_check

xyipx_adjust
	move	a0,*a8(OXPOS),W
	move	*a8(OXVEL),a0,L
	neg	a0
	move	a0,*a8(OXVEL),L

xyipy_check
	move	*a8(OYPOS),a1,W
	movi	xyipmin_y,a0
	move	*a8(ODYOFF),a14,W
	add	a14,a0
	cmp	a0,a1
	jrlt	xyipy_adjust

	move	*a8(OSIZEY),a0,W
	neg	a0
	move	*a8(ODYOFF),a14,W
	add	a14,a0
	addi	xyipmax_y,a0
	cmp	a0,a1
	jrgt	xyipy_adjust
	jruc	xyipdone_check

xyipy_adjust
	move	a0,*a8(OYPOS),W
	move	*a8(OYVEL),a0,L
	neg	a0
	move	a0,*a8(OYVEL),L

xyipdone_check
	rets



 SUBR	quark_die
	PUSH	a1,a7

	movi	CLSDEAD,a14
	move	a14,*a8(OID),W
	move	*a8(OPLINK),a0,L
	movi	DEADQUARK_PID,a1
	movi	xyipbeen_shot,a7
	calla	XFERPROC

	PULL	a1,a7
	rets



xyipanim_speed	equ	3

xyipv_change_time	equ	600	;time between random course changes

xyipyouth_time	equ	90	;time before we have kids
xyipspawn_time	equ	90	;time between kids
xyipold_age_time	equ	120	;time between last kid and natural death

xyipmin_kids	equ	3	;lower limit on spawned tanks
xyipmax_kids	equ	7	;upper limit

xyiphigh_v		equ	0001C000h

xyipmin_x	equ	53	;quark move bounds
xyipmax_x	equ	347-0
xyipmin_y	equ	45
xyipmax_y	equ	231-0

xyipSTAGE_YOUTH 	equ	0000h
xyipSTAGE_PARENT	equ	0001h
xyipSTAGE_DOTAGE	equ	0002h

xyipstandard_script
	.long	quark_1
	.long	quark_1
	.long	quark_2
	.long	quark_3
	.long	quark_4
	.long	0

xyipparent_script
	.long	quark_1
	.long	quark_2
	.long	quark_3
	.long	quark_4
	.long	quark_5
	.long	quark_6
	.long	quark_7
	.long	quark_8
	.long	0



	STRUCTPD
	WORD	mczpOSHOTS		;UHW shots left to be fired

	;reg use
	;  a7 (use) anim timer
	;  a8 (use) *img
	;  a9 (use) next move timer (move/fire phase)
	;  a9 (use) frame pointer (death phase)
	; a10 (in)  initial X
	; a10 (use) frame pointer (grow + move/fire phases)
	; a11 (in)  initial Y
	; a11 (use) next shot timer (move/fire phase)

 SUBRP	tank

	;increment the badguy count
	move	@live_badguys,a14,W
	inc	a14
	move	a14,@live_badguys,W

	;create the tank object
	move	a10,a0
	move	a11,a1
	movi	mczpgrow_script,a10
	move	*a10+,a2,L
	clr	a3
	movi	DMAWNZ,a4
	movi	CLSENMY|TYPTANK,a5
	clr	a6
	clr	a7
	calla	BEGINOBJW

	;grow phase

mczpgrow_loop
	SLEEPK	mczpgrow_speed
	move	*a10+,a0,L
	jrz	mczpmf_phase
	calla	civanic
	jruc	mczpgrow_loop

mczpmf_phase
	;begin move/fire phase.  set initial course
	callr	mczpset_v
	movi	mczpanim_time,a7
	movi	mczpright_script,a10
	movi	mczpfire_time/2,a0
	calla	RNDRNG0
	addi	mczpfire_time*3/4,a0
	move	a0,a11
	movi	mczpnum_shots,a14
	move	a14,*a13(mczpOSHOTS),W

mczpmain_loop
	PUSHP	a7
	SLEEPK	1
	PULLP	a7
	dec	a9
	jrnz	mczpno_turn

	;change course
	callr	mczpset_v

mczpno_turn

	dec	a11
	jrnz	mczpno_shot

	move	*a13(mczpOSHOTS),a14,W
	jrz	mczpno_shot

	;fire a shell
	PUSHP	a7,a10,a11
	move	*a8(OXVAL),a10,L
	move	*a8(OYVAL),a11,L
	create	SHELL_PID,tank_shell
	PULLP	a7,a10,a11
	movi	mczpfire_time/2,a0
	calla	RNDRNG0
	addi	mczpfire_time*3/4,a0
	move	a0,a11

mczpno_shot

	;bounds check
	callr	mczpin_bounds

	;animate?
	dec	a7
	jrnz	mczpno_anim
	move	*a10+,a0,L
	jrnz	mczpno_wrap
	movi	mczpright_script,a10
	move	*a10+,a0,L

mczpno_wrap
	calla	civanic
	movi	mczpanim_time,a7

mczpno_anim
	jruc	mczpmain_loop

mczpdie
	;decrement the badguy count
	move	@live_badguys,a14,W
	dec	a14
	move	a14,@live_badguys,W

	;zero our velocity
	clr	a14
	move	a14,*a8(OXVEL),L
	move	a14,*a8(OYVEL),L

	;set up the animation
mczpdieloop
	move	*a9+,a0,L
	jrz	mczpdead_n_buried
	calla	civanic
	sleepk	mczpdeath_speed
	jruc	mczpdieloop

mczpdead_n_buried
	calla	DELOBJA8

	DIE


 SUBRP	mczpset_v

	movi	mczphigh_v,a0
	calla	RNDRNG0
	cmpi	mczphigh_v/2,a0
	jrgt	mczppositive_x

	subi	mczphigh_v,a0

mczppositive_x
	move	a0,*a8(OXVEL),L

	movi	mczphigh_v,a0
	calla	RNDRNG0
	cmpi	mczphigh_v/2,a0
	jrgt	mczppositive_y

	subi	mczphigh_v,a0

mczppositive_y
	move	a0,*a8(OYVEL),L

	movi	mczpv_change_time/2,a0
	calla	RNDRNG0
	addi	mczpv_change_time/2,a0
	move	a0,a9

	rets


 SUBRP	mczpin_bounds

	move	*a8(OXPOS),a14,W
	movi	mczpmin_x,a0
	cmp	a0,a14
	jrlt	mczpx_adjust

	movi	mczpmax_x,a0
	cmp	a0,a14
	jrgt	mczpx_adjust
	jruc	mczpy_check

mczpx_adjust
	move	a0,*a8(OXPOS),W
	move	*a8(OXVEL),a0,L
	neg	a0
	move	a0,*a8(OXVEL),L

mczpy_check
	move	*a8(OYPOS),a14,W
	movi	mczpmin_y,a0
	cmp	a0,a14
	jrlt	mczpy_adjust

	movi	mczpmax_y,a0
	cmp	a0,a14
	jrgt	mczpy_adjust
	jruc	mczpdone_check

mczpy_adjust
	move	a0,*a8(OYPOS),W
	move	*a8(OYVEL),a0,L
	neg	a0
	move	a0,*a8(OYVEL),L

mczpdone_check
	rets



 SUBR	tank_die
	;hit by player gunfire
	PUSH	a1,a7

	;jeepers.  we're dead.
	movi	CLSDEAD,a14
	move	a14,*a8(OID),W

	move	*a0(OXVEL),a14,L
	jrz	mczpvert_bullet
	move	*a0(OYVEL),a1,L
	jrz	mczphorz_bullet

	add	a1,a14
	jrz	mczpdiag_13
	jruc	mczpdiag_24

mczphorz_bullet
	movi	mczpdie_vert,a9
	jruc	mczpdeath_set
mczpvert_bullet
	movi	mczpdie_horz,a9
	jruc	mczpdeath_set
mczpdiag_13
	movi	mczpdie_diag24,a9
	jruc	mczpdeath_set
mczpdiag_24
	movi	mczpdie_diag13,a9
	jruc	mczpdeath_set

mczpdeath_set
	move	*a8(OPLINK),a0,L
	movi	DEADTANK_PID,a1
	movi	mczpdie,a7
	move	*a0(PA10),a10,L
	calla	XFERPROC

	movi	mczptank_points,a0
	callr	score_points

	PULL	a1,a7
	rets



mczptank_points	equ	200

mczpnum_shots	equ	21

mczpv_change_time	equ	250
mczpfire_time	equ	90

mczphigh_v		equ	00010000h

mczpgrow_speed	equ	6
mczpanim_time	equ	2

mczpmin_x	equ	53	;tank move bounds
mczpmax_x	equ	347-13
mczpmin_y	equ	45
mczpmax_y	equ	231-16

mczpgrow_script
	.long	tank_g1
	.long	tank_g2
	.long	tank_g3
	.long	tank_g4
	.long	tank_1
	.long	0

mczpright_script
	.long	tank_1
	.long	tank_2
	.long	tank_3
	.long	tank_4
	.long	0

mczpdie_vert
	.long	enf_xv1
	.long	enf_xv2
	.long	enf_xv3
	.long	enf_xv4
	.long	enf_xv5
	.long	0

mczpdie_horz
	.long	enf_xh1
	.long	enf_xh2
	.long	enf_xh3
	.long	enf_xh4
	.long	0

mczpdie_diag13
	.long	enf_xf1
	.long	enf_xf2
	.long	enf_xf3
	.long	enf_xf4
	.long	0

mczpdie_diag24
	.long	enf_xb1
	.long	enf_xb2
	.long	enf_xb3
	.long	enf_xb4
	.long	0

mczpdeath_speed	equ	3		;death seq anim speed



	;reg use
	;  a8 (use) *image
	; a10 (in)  initial X
	; a11 (in)  initial Y
	; a11 (use) life timer

 SUBRP	tank_shell

	;create a shell object
	move	a10,a0
	move	a11,a1
	movi	shell,a2
	clr	a3
	movi	DMAWNZ,a4
	movi	CLSENMY|TYPSHELL,a5
	clr	a6
	clr	a7
	calla	BEGINOBJW

	;set the initial velocity.
	move	@player_object,a0,L
	move	*a0(OXVAL),a1,L
	move	*a8(OXVAL),a2,L
	sub	a2,a1
	sra	5,a1
	move	a1,*a8(OXVEL),L

	move	*a0(OYVAL),a1,L
	move	*a8(OYVAL),a2,L
	sub	a2,a1
	sra	5,a1
	move	a1,*a8(OYVEL),L

	movi	cxshlife_time,a11

cxshloop
	PUSHP	a6,a7
	SLEEPK	1
	PULLP	a6,a7

	;bounds check
	callr	cxshin_bounds

	dsj	a11,cxshloop

cxshexpire
	calla	DELOBJA8

	DIE


 SUBRP	cxshin_bounds

	move	*a8(OXPOS),a14,W
	movi	cxshmin_x,a0
	cmp	a0,a14
	jrlt	cxshx_adjust

	movi	cxshmax_x,a0
	cmp	a0,a14
	jrgt	cxshx_adjust
	jruc	cxshy_check

cxshx_adjust
	move	a0,*a8(OXPOS),W
	move	*a8(OXVEL),a0,L
	neg	a0
	move	a0,*a8(OXVEL),L

cxshy_check
	move	*a8(OYPOS),a14
	movi	cxshmin_y,a0
	cmp	a0,a14
	jrlt	cxshy_adjust

	movi	cxshmax_y,a0
	cmp	a0,a14
	jrgt	cxshy_adjust
	jruc	cxshdone_check

cxshy_adjust
	move	a0,*a8(OYPOS),W
	move	*a8(OYVEL),a0,L
	neg	a0
	move	a0,*a8(OYVEL),L

cxshdone_check
	rets



 SUBR	shell_die
	PUSH	a1,a7

	movi	CLSDEAD,a14
	move	a14,*a8(OID),W
	move	*a8(OPLINK),a0,L
	movi	DEADSHELL_PID,a1
	movi	cxshexpire,a7
	calla	XFERPROC

	PULL	a1,a7
	rets



cxshlife_time	equ	240		;how long they last

cxshmin_x	equ	53	;shell move bounds
cxshmax_x	equ	347-7
cxshmin_y	equ	45
cxshmax_y	equ	231-7



 SUBRP	robo_pal_cycles

	;laser flash cycle
	movi	[0Ah,1],a8		;cycle color A
	movi	robo_p,a9		;pal name
	movi	COLTAB_LFLASH,a10	;use the LFLASH table
	movk	1,a11			;cycle speed
	CREATE	CYCPID,CYCLE_TABLE

	;rgb cycle
	movi	[0Bh,1],a8		;cycle color B
	movi	robo_p,a9		;pal name
	movi	COLTAB_RGB,a10		;use the RGB table
	movk	8,a11			;cycle speed
	CREATE	CYCPID,CYCLE_TABLE

	;decay cycle
	movi	[0Ch,1],a8		;cycle color C
	movi	robo_p,a9		;pal name
	movi	COLTAB_DECAY,a10	;use the DECAY table
	movk	2,a11			;cycle speed
	CREATE	CYCPID,CYCLE_TABLE

	;laser cycle
	movi	[0Dh,1],a8		;cycle color D
	movi	robo_p,a9		;pal name
	movi	COLTAB_LASER,a10	;use the LASER table
	movk	20,a11			;cycle speed
	CREATE	CYCPID,CYCLE_TABLE

	;blue-purple-red cycle
	movi	[0Eh,1],a8		;cycle color E
	movi	robo_p,a9		;pal name
	movi	COLTAB_BLUPURRED,a10	;use the BPR table
	movk	1,a11			;cycle speed
	CREATE	CYCPID,CYCLE_TABLE

	;red-gold cycle
	movi	[0Fh,1],a8		;cycle color F
	movi	robo_p,a9		;pal name
	movi	COLTAB_REDGOLD,a10	;use the RED-GOLD table
	movk	10,a11			;cycle speed
	CREATE	CYCPID,CYCLE_TABLE

	rets


COLTAB_LFLASH
	.WORD	0380H,1380H,2380H,3380H,4380H,5380H,6380H,7380H,7300H
	.WORD	7280H,7200H,7180H,7080H,7008H,7008H,7010H,7010H,701CH
	.WORD	701CH,601CH,501CH,409CH,309CH,209CH,219CH,029CH,039CH
	.WORD	139CH,239CH,339CH,539CH,739CH,7390H,7380H,6380H,4380H
	.word	-1


COLTAB_RGB
	.WORD	07C00H,001FH,77A0h,741Ah
	.word	-1


COLTAB_DECAY
	.WORD	001CH,001CH,011CH,021CH,031CH,039CH,239CH,2390H,2388H
	.WORD	2380H,4300H,5280H,7180H,6180H,7080H,7000H,6000H,5000H
	.WORD	4000H,3000H,2000H,1000H
	.word	-1


COLTAB_LASER
	.word	7C1Fh,7FFFh,7F00h
	.word	-1

COLTAB_BLUPURRED
	.WORD	001CH,101CH,201CH,301CH,401CH,501CH,601CH,701CH,7010H
	.WORD	7010H,7008H,7008H,7000H,7000H,7008H,7008H,7010H,7010H
	.WORD	701CH,701CH,601CH,501CH,401CH,301CH,201CH,101CH
	.word	-1

COLTAB_REDGOLD
	.word	7C00h,7F00h
	.word	-1



	;reg use
	; a11 score

 SUBRP	score

	;initialize score
	move	@robotron_score,a11,L
	callr	pyrlprint_score

pyrlloop
	SLEEPK	1
	move	@robotron_score,a14,L
	cmp	a11,a14
	jrne	pyrlscore_change
	jruc	pyrlloop

pyrlscore_change
	move	a14,a11
	callr	pyrlzorch_score
	callr	pyrlprint_score
	jruc	pyrlloop

	DIE


 SUBRP	pyrlzorch_score
	movi	TYPTEXT|SUBSCOR,a0
	calla	obj_del1c

	rets


 SUBRP	pyrlprint_score

	movi	pyrlscore_setup,a2
	calla	setup_message
	movi	TYPTEXT|SUBSCOR,a14
	move	a14,@mess_objid
	move	@robotron_score,a0,L
	movi	pyrlmax_score,a1
	calla	dec_to_asc
	calla	copy_string
	calla	print_string_R

	rets


pyrlscore_setup
	JAM_STR	robotron_ascii,3,1,pyrlscore_xpos,pyrlscore_ypos,robo_p,0
	.even

pyrlmax_score	.equ	9999999		;that's all dec_to_asc can handle


 SUBRP	score_points

	move	@robotron_score,a14,L
	add	a0,a14
	move	a14,@robotron_score,L
	rets


pyrlscore_ypos	.equ	36
pyrlscore_xpos	.equ	130



 SUBRP	draw_frame


	move	a0,a9
	sla	8,a9
	or	a0,a9

	movi	robo_p,a0
	calla	pal_getf
	move	a0,a10

	movi	ouneframe_data,a11

ouneloop
	move	*a11+,a0,L
	jrz	ounedone
	move	*a11+,a1,L
	movi	ouneframe_image,a2
	movi	100,a3				;z pos
	movi	DMACAL,a4			;DMA flags
	movi	CLSDEAD,a5			;object ID
	clr	a6				;x vel
	clr	a7				;y vel
	calla	BEGINOBJ

	move	a8,a0
	calla	fg2bg

	move	*a11+,a14,W
	move	a14,*a8(OSIZEX),W
	move	*a11+,a14,W
	move	a14,*a8(OSIZEY),W

	move	a9,*a8(OCONST),W
	move	a10,*a8(OPAL),W

	jruc	ouneloop
ounedone
	rets


ouneframe_image	equ	man_d1

ouneframe_data
	.long	[53,0],[43,0]	;position X,Y
	.word	294,2		;size X,Y

	.long	[53,0],[231,0]	;position X,Y
	.word	294,2		;size X,Y

	.long	[50,0],[43,0]	;position X,Y
	.word	3,190		;size X,Y

	.long	[347,0],[43,0]	;position X,Y
	.word	3,190		;size X,Y

	.long	0

ouneframe_datax



 SUBRP	wave_count

	;wave text
	movi	[lndcwave_x,0],a0			;x pos
	movi	[lndcwave_y,0],a1			;y pos
	movi	wave_text,a2			;* image
	clr	a3				;z pos
	movi	DMAWNZ,a4			;DMA flags
	clr	a5				;object ID
	clr	a6				;x vel
	clr	a7				;y vel
	calla	BEGINOBJ

	;ones digit
	move	@robo_wave,a0,W
	sra	4,a0
	inc	a0
	calla	BINBCD
	move	a0,a2
	andi	0Fh,a2
	X32	a2
	addi	lndcwave_font,a2

	movi	[lndcwave_onesx,0],a0		;x pos
	movi	[lndcwave_y,0],a1			;y pos
	move	*a2,a2,L			;* image
	clr	a3				;z pos
	movi	DMAWNZ,a4			;DMA flags
	clr	a5				;object ID
	clr	a6				;x vel
	clr	a7				;y vel
	calla	BEGINOBJ

	;tens digit
	move	@robo_wave,a0,W
	sra	4,a0
	inc	a0
	calla	BINBCD
	move	a0,a2
	srl	4,a2
	andi	0Fh,a2
	jrz	lndcdone
	X32	a2
	addi	lndcwave_font,a2
	movi	[lndcwave_tensx,0],a0		;x pos
	movi	[lndcwave_y,0],a1			;y pos
	move	*a2,a2,L			;* image
	clr	a3				;z pos
	movi	DMAWNZ,a4			;DMA flags
	clr	a5				;object ID
	clr	a6				;x vel
	clr	a7				;y vel
	calla	BEGINOBJ

lndcdone
	rets

lndcwave_y		.equ	234
lndcwave_x		.equ	198
lndcwave_tensx	.equ	184
lndcwave_onesx	.equ	188

lndcwave_font
	.long	rsmall_0
	.long	rsmall_1
	.long	rsmall_2
	.long	rsmall_3
	.long	rsmall_4
	.long	rsmall_5
	.long	rsmall_6
	.long	rsmall_7
	.long	rsmall_8
	.long	rsmall_9
lndcwave_fontx


 SUBRP	bounds_check
	PUSH	a1,a3
	clr	a0
	clr	a2
	clr	a3

	;check for hit top
	move	*a8(OYPOS),a1
	move	*a8(ODYOFF),a14
	sub	a14,a1
	cmpi	uemqlow_y,a1
	jrgt	uemqnot_high
	movi	uemqlow_y,a2
	sub	a1,a2
	ori	M_HIT_TOP,a0
	jruc	uemqnot_low		;assume won't be both high and low

uemqnot_high
	;check for hit bottom
	move	*a8(ODYOFF),a14		;subtract the offset AGAIN because
	sub	a14,a1			; we assume the anim point is there
	move	*a8(OSIZEY),a14		; to center the object.
	add	a14,a1
	cmpi	uemqhigh_y,a1
	jrlt	uemqnot_low
	move	a1,a2
	subi	uemqhigh_y,a2
	ori	M_HIT_BOTTOM,a0

uemqnot_low
	;check for hit left
	move	*a8(OXPOS),a1
	move	*a8(ODXOFF),a14
	sub	a14,a1
	cmpi	uemqlow_x,a1
	jrgt	uemqnot_left
	movi	uemqlow_x,a3
	sub	a1,a3
	ori	M_HIT_LEFT,a0
	jruc	uemqdone			;assume won't be both right and left

uemqnot_left
	move	*a8(ODXOFF),a14
	sub	a14,a1
	move	*a8(OSIZEX),a14
	add	a14,a1
	cmpi	uemqhigh_x,a1
	jrlt	uemqdone
	move	a1,a3
	subi	uemqhigh_x,a3
	ori	M_HIT_RIGHT,a0

uemqdone
	;a2 is y overlap, a3 is x overlap.  a2 should be greatest of the two.
	cmp	a2,a3
	jrn	uemqretval_set
	move	a3,a2
uemqretval_set
	PULL	a1,a3
	rets


uemqlow_x	equ	53
uemqhigh_x	equ	346
uemqlow_y	equ	45
uemqhigh_y	equ	230

B_HIT_TOP	equ	0
B_HIT_BOTTOM	equ	2
B_HIT_LEFT	equ	3
B_HIT_RIGHT	equ	1

M_HIT_TOP	equ	0001h
M_HIT_BOTTOM	equ	0004h
M_HIT_LEFT	equ	0008h
M_HIT_RIGHT	equ	0002h



 SUBRP	watch_both_starts

mkceloop
	SLEEPK	4		;no need to check EVERY frame
	clr	a0
	calla	get_start_cur
	jrz	mkceloop
	movk	1,a0
	calla	get_start_cur
	jrz	mkceloop

	;both starts are down.
	movk	1,a0
	move	a0,@starts_down

	DIE


 SUBRP	wave_mover

wulaloop
	SLEEPK	4
	calla	get_all_buttons_cur
	jrz	wulaloop

	cmpi	1,a0
	jreq	wulaback
	cmpi	2,a0
	jreq	wulafwd
	jruc	wulaloop

wulaback
	move	a0,@backward
	jruc	wuladone
wulafwd
	move	a0,@forward

wuladone
	DIE


	.if DEBUG


 SUBRP	bog_o_meter

	movi	robo_p,a0
	calla	pal_getf
	move	a0,a9

	;create the background
	movi	[360,0],a0
	movi	[192,0],a1
	movi	man_d1,a2
	clr	a3
	movi	DMACAL|M_FLIPV,a4
	movi	CLSDEAD,a5
	clr	a6
	clr	a7
	calla	BEGINOBJW

	move	a9,*a8(OPAL)
	movi	0707h,a14
	move	a14,*a8(OCONST)

	movi	8,a0
	move	a0,*a8(OSIZEX)
	movi	128,a0
	move	a0,*a8(OSIZEY)
	move	a8,a10

	;create the foreground
	movi	[360,0],a0
	movi	[65,0],a1
	movi	man_d1,a2
	movi	1,a3
	movi	DMACAL,a4
	movi	CLSDEAD,a5
	clr	a6
	clr	a7
	calla	BEGINOBJW

	move	a9,*a8(OPAL)
	movi	0808h,a14
	move	a14,*a8(OCONST)
	
	movi	8,a0
	move	a0,*a8(OSIZEX)

	movi	acdzscale,a9

acdzloop
	SLEEPK	2
	move	@CPULEFT,a1
	jrnz	acdznobog

	;BOG!!
	nop
acdznobog
	mpyu	a9,a1
	srl	16,a1
	move	a1,*a8(OSIZEY)
	cmpi	10h,a1
	jrle	acdzred

	movi	0707h,a0
	move	a0,*a10(OCONST)
	jruc	acdzloop
acdzred
	movi	0101h,a0
	move	a0,*a10(OCONST)
	jruc	acdzloop

	DIE

acdzscale	equ	800000h/03DCh

	.endif


robotron_ascii
 .long 0,0,0,0,0,0,0,0								;$00
 .long 0,0,0,0,0,0,0,0								;$08
 .long 0,0,0,0,0,0,0,0								;$10
 .long 0,0,0,0,0,0,0,0								;$18
 .long 0,rfont_exc,0,0,0,0,0,0								;$20	SP! " # $ % & '
 .long rfont_lparens,rfont_rparens,0,0,rfont_comma,0,rfont_period,rfont_fslash	;$28	( ) * + , - . /
 .long rfont_0,rfont_1,rfont_2,rfont_3,rfont_4,rfont_5,rfont_6,rfont_7		;$30	0 1 2 3 4 5 6 7
 .long rfont_8,rfont_9,0,0,0,0,0,0						;$38	8 9 : ; < - > ?
 .long 0,rfont_a,rfont_b,rfont_c,rfont_d,rfont_e,rfont_f,rfont_g		;$40	@ A B C D E F G
 .long rfont_h,rfont_i,rfont_j,rfont_k,rfont_l,rfont_m,rfont_n,rfont_o		;$48	H I J K L M N O
 .long rfont_p,rfont_q,rfont_r,rfont_s,rfont_t,rfont_u,rfont_v,rfont_w		;$50	P Q R S T U V W
 .long rfont_x,rfont_y,rfont_z,0,0,0,0,0					;$58	X Y Z [ \ ] ^ _
 .long 0,rfont_a,rfont_b,rfont_c,rfont_d,rfont_e,rfont_f,rfont_g		;$60	` a b c d e f g
 .long rfont_h,rfont_i,rfont_j,rfont_k,rfont_l,rfont_m,rfont_n,rfont_o		;$68	h i j k l m n o
 .long rfont_p,rfont_q,rfont_r,rfont_s,rfont_t,rfont_u,rfont_v,rfont_w		;$70	p q r s t u v w
 .long rfont_x,rfont_y,rfont_z,0,0,0,0,0					;$78	x y z { | } ~


RS_GRUNT	.equ	0
RS_DIE		.equ	1
RS_RESCUE	.equ	2
RS_SHOOT	.equ	3
RS_HIT		.equ	4

sp_grunt	.equ	1<<8
sp_shoot	.equ	2<<8
sp_hit		.equ	3<<8
sp_rescue	.equ	4<<8
sp_die		.equ	5<<8

robosnd_tbl
	;	duration, call#
	.word	sp_grunt|6,96		;0 = grunt footstep
	.word	sp_die|96,98		;1 = die
	.word	sp_rescue|39,99		;2 = rescue
	.word	sp_shoot|17,102		;3 = shoot
	.word	sp_hit|23,100		;4 = hit
robosnd_end

	.bss	rs_snd,16		;current sound call (0-3)
	.bss	rs_time,32		;timeout on current call (long)PCNT
	.bss	rs_pri,16		;priority on current call
	.bss	last_grunt_snd,32	;PCNT of last grunt footstep


 SUBRP	robo_sound_init

	clr	a14
	move	a14,@rs_snd
	move	a14,@rs_time,L
	move	a14,@last_grunt_snd,L
	rets


 SUBRP	robo_sound

	PUSH	a2,a3,a4

	;reggies:
	;a0 = call index
	;a1 = priority
	;a2 = duration
	;a3 = call #

	;decode table index
	move	a0,a14
	X32	a14
	addi	robosnd_tbl,a14
	move	*a14,a1,W
	srl	8,a1
	move	*a14+,a2,W
	andi	0FFh,a2
	move	*a14,a3,W

	;check old duration - if there's nothing going on, do the sound.
	move	@rs_time,a4
	move	@PCNT,a14,L
	cmp	a4,a14
	jrgt	mvqjdosnd

	;old sound still going.  check for an override
	TEST	a0
	jrnz	mvqjng
	move	@rs_snd,a14
	jrz	mvqjgrxgr		;special grunt-overriding-grunt case

mvqjng	move	@rs_pri,a14
	cmp	a14,a1
	jrge	mvqjdosnd
	jruc	mvqjdone

mvqjgrxgr	;do new call if old one has 3 or fewer ticks to live
	move	@rs_time,a14,L
	move	@PCNT,a4,L
	sub	a4,a14
	cmpi	3,a4
	jrle	mvqjdosnd
	jruc	mvqjdone

mvqjdosnd	calla	SNDSND
	move	a0,@rs_snd
	move	@PCNT,a14,L
	add	a2,a14
	move	a14,@rs_time,L
	move	a1,@rs_pri

mvqjdone	PULL	a2,a3,a4
	rets



	.end

