SUBRM .MACRO 	P1,P2,P3
	MOVE	:P2:,A14,:P3:
	SUB	:P1:,A14
	MOVE	A14,:P2:,:P3:
	.endm
ADDRM .MACRO 	P1,P2,P3
	MOVE	:P2:,A14,:P3:
	ADD	:P1:,A14
	MOVE	A14,:P2:,:P3:
	.endm
INCW .MACRO 	P1
	MOVE	:P1:,A14
	INC	A14
	MOVE	A14,:P1:
	.endm
DECW .MACRO 	P1
	MOVE	:P1:,A14
	DEC	A14
	MOVE	A14,:P1:
	.endm
INCM .MACRO 	P1,P2
	MOVE	:P1:,A14,:P2:
	INC	A14
	MOVE	A14,:P1:,:P2:
	.endm
DECM .MACRO 	P1,P2
	MOVE	:P1:,A14,:P2:
	DEC	A14
	MOVE	A14,:P1:,:P2:
	.endm
SUBM .MACRO 	P1,P2,P3
	MOVE	:P1:,A14,:P3:
	SUB	A14,:P2:
	.endm
ADDM .MACRO 	P1,P2,P3
	MOVE	:P1:,A14,:P3:
	ADD	A14,:P2:
	.endm
NEGM .MACRO 	P1,P2
	MOVE	:P1:,A14,:P2:
	NEG	A14
	MOVE	A14,:P1:,:P2:
	.endm
CMPM .MACRO 	P1,P2,P3
	MOVE	:P1:,A14,:P3:
	CMP	A14,:P2:
	.endm
CLRM .MACRO 	P1,P2
	CLR	A14
	MOVE	A14,:P1:,:P2:
	.endm
COMM .MACRO 	P1,P2
	MOVE	:P1:,A14,:P2:
	NOT	A14
	MOVE	A14,:P1:,:P2:
	.endm
SLLM .MACRO 	P1,P2,P3
	MOVE	:P2:,A14,:P3:
	SLL	:P1:,A14
	MOVE	A14,:P2:,:P3:
	.endm
SRAM .MACRO 	P1,P2,P3
	MOVE	:P2:,A14,:P3:
	SEXT	A14,:P3:
	SRA	:P1:,A14
	MOVE	A14,:P2:,:P3:
	.endm
SRLM .MACRO 	P1,P2,P3
	MOVE	:P2:,A14,:P3:
	ZEXT 	A14,:P3:
	SRL	:P1:,A14
	MOVE	A14,:P2:,:P3:
	.endm
BSET .MACRO 	P1,R1
	MOVK	1,A14
	SLL	:P1:,A14
	OR	A14,:R1:
	.endm
BCLR .MACRO 	P1,R1
	MOVK	1,A14
	SLL	:P1:,A14
	ANDN	A14,:R1:
	.endm
SETZ .MACRO 
	CLR	A14
	.endm
CLRZ .MACRO 
	CLR	A14
	NOT	A14
	.endm
SLEEP .MACRO 	A
	movi	:A:,a0
	calla	PRCSLP
	.endm
SLEEPK .MACRO 	A
	movk	:A:,a0
	calla	PRCSLP
	.endm
SLEEPR .MACRO 	REG1
	MOVE	:REG1:,A0
	CALLA	PRCSLP
	.endm
SLOOP .MACRO 	s,a
	.if	:s: < 33
	movk	:s:,a0
	.else
	movi	:s:,a0
	.endif
	movi	:a:,a7,L
	jauc	PRCLSP
	.endm
SLOOPR .MACRO 	P1,P2
	MOVE	:P1:,A0
	MOVI	:P2:,A7,L
	JAUC	PRCLSP
	.endm
CREATE .MACRO 	p1,p2
	movi	:p1:,a1
	movi	:p2:,a7,L
	calla	GETPRC
	.endm
CREATE0 .MACRO 	A
	clr	a1
	movi	:A:,a7,L
	calla	GETPRC
	.endm
KILLIT .MACRO 	P1,P2
	MOVI	:P1:,A0
	MOVI	:P2:,A1
	CALLA	KILALL
	.endm
DIE .MACRO 
	jauc	SUCIDE
	.endm
JSRP .MACRO 	P1
	GETPC	A7
	ADDI	060h,A7
	MOVE	A7,-*A12,L	;PUSH RET ADDR
	JAUC	:P1:
	.endm
JSRPR .MACRO 	R1
	GETPC	A7
	ADDI	040h,A7
	MOVE	A7,-*A12,L	;PUSH RET ADDR
	JUMP	:R1:
	.endm
RETP .MACRO 
	mmfm	a12,a7		;PULL RETURN ADDR, W/O ZAPPING STAT
	exgpc	a7
	.endm
MATCHP .MACRO 	P1,P2,P3
	MOVI	:P1:,A0
	MOVI	:P2:,A1
	CALLA	EXISTP
	JANZ	:P3:
	.endm
NOMATCHP .MACRO 	P1,P2,P3
	 MOVI	:P1:,A0
	 MOVI	:P2:,A1
	 CALLA	EXISTP
	 JAZ	:P3:
	 .endm
LOCKUP .MACRO 
	trap	29
	.endm
PRJX2Z .MACRO 	regx,regz,keep

	.asg	503-GZBASE, ZFAC_OFF

	.asg	11, XFRC_BC
	.asg	10, ZFAC_BC
	.asg	2,  SCAL_BC

	.asg	(XFRC_BC+ZFAC_BC-SCAL_BC-(:keep:)), K_BC

	sra	16-XFRC_BC,:regx:	;Keep what we can of X FRC m'plicand
	addi	ZFAC_OFF,:regz:		;Apply base offset to Z m'plier
	mpys	:regz:,:regx:
	move	:regx:,:regz:		;Trash <regz> for a quick "multiply"
	sra	1,:regx:		; (* 65/128) of the product
	sra	7,:regz:
	add	:regz:,:regx:
	.if	 K_BC < 0
	sll	-K_BC,:regx:
	.elseif	 K_BC > 0
	sra	 K_BC,:regx:
	.endif
	.endm
SCRIPT1 .MACRO  S
	movi	:S:,a0
	calla	script_play1
	.endm
SX .MACRO 	lbl,w1,w2,w3
	.def	:lbl:
:lbl:
	.word	:w1:,:w2:,:w3:
	.endm
LWLWLW .MACRO 	l,w,l2,w2,l3,w3
	.long	:l:
	.word	:w:
	.long	:l2:
	.word	:w2:
	.long	:l3:
	.word	:w3:
	.endm
LWLWLWLW .MACRO 	l,w,l2,w2,l3,w3,l4,w4
	 .long	:l:
	 .word	:w:
	 .long	:l2:
	 .word	:w2:
	 .long	:l3:
	 .word	:w3:
	 .long	:l4:
	 .word	:w4:
	 .endm
HDMAC .MACRO 	l
	.eval	0,X
	.long	:l:
	.loop	16
	.long	:l:+X
	.eval	X+90H,X
	.endloop
	.endm
HDMAC2 .MACRO 	l
	.eval	0,X
	.long	:l:
	.loop	5
	.long	:l:+X
	.eval	X+90H,X
	.endloop

	.eval	X-90h*5,X
	.loop	5
	.long	:l:+X
	.eval	X+90H,X
	.endloop

	.eval	X-90h*5,X
	.loop	5
	.long	:l:+X
	.eval	X+90H,X
	.endloop

	.long	:l:

	.endm
BADCHK .MACRO  	reg,lo,hi,val
	cmpi	:lo:,reg
	jrlt	bad?
	cmpi	:hi:,reg
	jrgt	bad?
	jruc	ok?
bad?
	movi	:val:,:reg:
ok?
	.endm
AUDIT .MACRO 	P1
	MOVI	:P1:,A0	
	CALLA	AUD1
	.endm
AUDITCNT .MACRO 	P1,P2
	MOVE	@:P2:,A1
	MOVI	:P1:,A0
	CALLA	AUD
	.endm
ADJUST .MACRO 	P1
	MOVI	:P1:,A0
	CALLA	GET_ADJ
	.endm
FCALL .MACRO 	n,b
	movi	:n:,:b:,L
	exgpc	:b:
	.endm
FRET .MACRO 	b
	exgpc	:b:
	.endm
PRINT_STR .MACRO 	FONT,SPACING,CSPACE,X,Y,PALETTE,PR_METHOD
	.long	:FONT:
	.word   :SPACING:
	.word	:CSPACE:
	.word	:X:
	.word	:Y:
	.long   :PALETTE:
	.long   :PR_METHOD:
	.endm
SND_REQ .MACRO 	snd_ptr
	push	a2,a3
	movi	:snd_ptr:,a2
	move	*a2+,a3			;a3=sound code
	calla	SNDSND
	pull	a2,a3
	.endm
BSSX .MACRO 	n,s
	.def	:n:
	.bss	:n:,:s:
	.endm
SUBR .MACRO 	p1
	.def	:p1:
	.even
:p1:
	.endm
SUBRP .MACRO 	p1
	.even
:p1:
	.endm
STRUCT .MACRO 	o
	.asg	:o:,SOFF
	.endm
STRUCTPD .MACRO 
	.asg	PDATA,SOFF
	.endm
STRUC .MACRO 	n,s
:n:	.set	SOFF
	.eval	SOFF+:s:,SOFF
	.endm
WORD .MACRO 	n
:n:	.set	SOFF
	.eval	SOFF+16,SOFF
	.endm
LONG .MACRO 	n
:n:	.set	SOFF
	.eval	SOFF+32,SOFF
	.endm
APTR .MACRO 	n
:n:	.set	SOFF
	.eval	SOFF+32,SOFF
	.endm
LABEL .MACRO 	n
:n:	.set	SOFF
	.endm
FLAG .MACRO 	n
:n:_B	.equ	SOFF
:n:_M	.equ	1<<SOFF
	.eval	SOFF+1,SOFF
	.endm
W0 .MACRO 
	.word	0
	.endm
WWL .MACRO 	w,w2,l
	.word	:w:,:w2:
	.long	:l:
	.endm
WL .MACRO 	w,l
	.word	:w:
	.long	:l:
	.endm
WLW .MACRO 	w,l,w2 
	.word	:w:
	.long	:l:
	.word	:w2:
	.endm
WLWWWW .MACRO 	w,l,w2,w3,w4,w5
	.word	:w:
	.long	:l:
	.word	:w2:,:w3:,:w4:,:w5:
	.endm
WLWWW .MACRO 	w,l,w2,w3,w4
	.word	:w:
	.long	:l:
	.word	:w2:,:w3:,:w4:
	.endm
WLLL .MACRO 	w,l,l2,l3
	.word	:w:
	.long	:l:,:l2:,:l3:
	.endm
WLL .MACRO 	w,l,l2
	.word	:w:
	.long	:l:,:l2:
	.endm
WLLW .MACRO 	w,l,l2,w2
	.word	:w:
	.long	:l:,:l2:
	.word	:w2:
	.endm
LW .MACRO 	l,w
	.long	:l:
	.word	:w:
	.endm
LWW .MACRO 	l,w,w2
	.long	:l:
	.word	:w:,:w2:
	.endm
LWWW .MACRO 	l,w,w2,w3
	.long	:l:
	.word	:w:,:w2:,:w3:
	.endm
LWWWW .MACRO 	l,w,w2,w3,w4
	.long	:l:
	.word	:w:,:w2:,:w3:,:w4:
	.endm
LWWWWW .MACRO 	l,w,w2,w3,w4,w5
	.long	:l:
	.word	:w:,:w2:,:w3:,:w4:,:w5:
	.endm
LWWWWWW .MACRO 	l,w,w2,w3,w4,w5,w6
	.long	:l:
	.word	:w:,:w2:,:w3:,:w4:,:w5:,:w6:
	.endm
LWL .MACRO 	l,w,l2
	.long	:l:
	.word	:w:
	.long	:l2:
	.endm
LWLW .MACRO 	l,w,l2,w2
	.long	:l:
	.word	:w:
	.long	:l2:
	.word	:w2:
	.endm
LWL0 .MACRO 	l,w
	.long	:l:
	.word	:w:
	.long	0
	.endm
COLORW .MACRO 	r1,g1,b1,r2,g2,b2,r3,g3,b3,r4,g4,b4
	.word	:r1:*32*32+:g1:*32+:b1:
	.if	$symlen(r2)
	.word	:r2:*32*32+:g2:*32+:b2:
	.endif
	.if	$symlen(r3)
	.word	:r3:*32*32+:g3:*32+:b3:
	.endif
	.if	$symlen(r4)
	.word	:r4:*32*32+:g4:*32+:b4:
	.endif
	.endm
PUSH .MACRO 	r1,r2,r3,r4,r5,r6,r7,r8,r9,r10
	.if	$isreg(r10)
	mmtm	sp,:r1:,:r2:,:r3:,:r4:,:r5:,:r6:,:r7:,:r8:,:r9:,:r10:
	.elseif	$isreg(r9)
	mmtm	sp,:r1:,:r2:,:r3:,:r4:,:r5:,:r6:,:r7:,:r8:,:r9:
	.elseif	$isreg(r8)
	mmtm	sp,:r1:,:r2:,:r3:,:r4:,:r5:,:r6:,:r7:,:r8:
	.elseif	$isreg(r7)
	mmtm	sp,:r1:,:r2:,:r3:,:r4:,:r5:,:r6:,:r7:
	.elseif	$isreg(r6)
	mmtm	sp,:r1:,:r2:,:r3:,:r4:,:r5:,:r6:
	.elseif	$isreg(r5)
	mmtm	sp,:r1:,:r2:,:r3:,:r4:,:r5:
	.elseif	$isreg(r4)
	mmtm	sp,:r1:,:r2:,:r3:,:r4:
	.elseif	$isreg(r3)
	mmtm	sp,:r1:,:r2:,:r3:
	.elseif	$isreg(r2)
	move	:r1:,-*sp,1
	move	:r2:,-*sp,1
	.else
	move	:r1:,-*sp,1
	.endif
	.endm
PULL .MACRO 	r1,r2,r3,r4,r5,r6,r7,r8,r9,r10
	.if	$isreg(r10)
	mmfm	sp,:r1:,:r2:,:r3:,:r4:,:r5:,:r6:,:r7:,:r8:,:r9:,:r10:
	.elseif	$isreg(r9)
	mmfm	sp,:r1:,:r2:,:r3:,:r4:,:r5:,:r6:,:r7:,:r8:,:r9:
	.elseif	$isreg(r8)
	mmfm	sp,:r1:,:r2:,:r3:,:r4:,:r5:,:r6:,:r7:,:r8:
	.elseif	$isreg(r7)
	mmfm	sp,:r1:,:r2:,:r3:,:r4:,:r5:,:r6:,:r7:
	.elseif	$isreg(r6)
	mmfm	sp,:r1:,:r2:,:r3:,:r4:,:r5:,:r6:
	.elseif	$isreg(r5)
	mmfm	sp,:r1:,:r2:,:r3:,:r4:,:r5:
	.elseif	$isreg(r4)
	mmfm	sp,:r1:,:r2:,:r3:,:r4:
	.elseif	$isreg(r3)
	mmfm	sp,:r1:,:r2:,:r3:
	.elseif	$isreg(r2)
	move	*sp+,:r2:,1
	move	*sp+,:r1:,1
	.else
	move	*sp+,:r1:,1
	.endif
	.endm
PUSHW .MACRO 	r1,r2,r3
	.if	:r3:
	ERROR:PUSHW
	.else
	.if	:r2:
	move	:r1:,-*sp,0
	move	:r2:,-*sp,0
	.else
	move	:r1:,-*sp,0
	.endif
	.endif
	.endm
PULLW .MACRO 	r1,r2,r3
	.if	:r3:
	ERROR:PULLW
	.else
	.if	:r2:
	move	*sp+,:r2:,0
	move	*sp+,:r1:,0
	.else
	move	*sp+,:r1:,0
	.endif
	.endif
	.endm
PUSHP .MACRO 	r1,r2,r3,r4,r5
	.if	$isreg(r5)
	mmtm	a12,:r1:,:r2:,:r3:,:r4:,:r5:
	.elseif	$isreg(r4)
	mmtm	a12,:r1:,:r2:,:r3:,:r4:
	.elseif	$isreg(r3)
	mmtm	a12,:r1:,:r2:,:r3:
	.elseif	$isreg(r2)
	move	:r1:,-*a12,1
	move	:r2:,-*a12,1
	.else
	move	:r1:,-*a12,1
	.endif
	.endm
PULLP .MACRO 	r1,r2,r3,r4,r5
	.if	$isreg(r5)
	mmfm	a12,:r1:,:r2:,:r3:,:r4:,:r5:
	.elseif	$isreg(r4)
	mmfm	a12,:r1:,:r2:,:r3:,:r4:
	.elseif	$isreg(r3)
	mmfm	a12,:r1:,:r2:,:r3:
	.elseif	$isreg(r2)
	move	*a12+,:r2:,1
	move	*a12+,:r1:,1
	.else
	move	*a12+,:r1:,1
	.endif
	.endm
ANDK .MACRO 	r1,r2
	movk	:r1:,a14
	and	a14,:r2:
	.endm
ORK .MACRO 	r1,r2
	movk	:r1:,a14
	or	a14,:r2:
	.endm
XORK .MACRO 	r1,r2
	movk	:r1:,a14
	xor	a14,:r2:
	.endm
XYTXT .MACRO 	f,x,y,c,s
	.word	:f:,:x:,:y:,:c:
	.byte	":s:",0
	.endm
XYNUM .MACRO 	f,x,y,c,p
	.word	:f:,:x:,:y:,:c:
	.long	:p:
	.endm
XYOBJ .MACRO 	f,x,y,z,i
	.word	:f:,:x:,:y:,:z:
	.long	:i:
	.endm
ASITEMN .MACRO 	a,b,c,d,e,f
	.long	:c:
	.word	:a:,:b:,:d:,:e:,:f:
	.endm
ASNEW .MACRO 	a
	.word	AsNEW
	.long	:a:
	.endm
ASDEL .MACRO 	a
	.word	AsDEL,:a:
	.endm
ASDELM .MACRO 	a,b
	.word	AsDELM,:a:,:b:
	.endm
ASFRA .MACRO 	a,b,c
	.word	AsFRA
	.long	:a:
	.word	:b:,:c:
	.endm
ASANI .MACRO 	a,b
	.word	AsANI
	.long	:a:
	.word	:b:
	.endm
ASHIDE .MACRO 	a
	.word	AsHIDE,:a:
	.endm
ASSHOW .MACRO 	a
	.word	AsSHOW,:a:
	.endm
ASPAL .MACRO 	a
	.word	AsPAL,:a:
	.endm
ASXY .MACRO 	a,b,c,d
	.word	AsXY,:a:,:b:,:c:,:d:
	.endm
ASXYRNG .MACRO 	a,b,c,d,e,f
	.word	AsXYRNG,:c:,:d:,:e:,:f:,:a:,:b:
	.endm
ASYA .MACRO 	a,b,c
	.word	AsYA,:a:,:b:,:c:
	.endm
ASXYV .MACRO 	a,b,c,d
	.word	AsXYV
	.long	:c:,:d:
	.word	:a:,:b:
	.endm
ASXYVA .MACRO 	a,b,c,d
	.word	AsXYVA
	.long	:c:,:d:
	.word	:a:,:b:
	.endm
ASXYV0 .MACRO 
	.word	AsXYV0
	.endm
ASZ .MACRO 	a,b,c
	.word	AsZ,:a:,:b:,:c:
	.endm
ASBXY .MACRO 	a,b
	.word	AsBXY,:a:,:b:
	.endm
ASSLP .MACRO 	a
	.word	AsSLP,:a:
	.endm
ASSLP1 .MACRO 
	.word	AsSLP1
	.endm
ASSLPR .MACRO 	a,b
	.word	AsSLPR,:a:,:b:
	.endm
ASWAIT .MACRO 
	.word	AsWAIT
	.endm
ASTXT .MACRO 	a
	.word	AsTXT
	.long	:a:
	.endm
ASTXTR .MACRO 	a
	.word	AsTXTR
	.long	:a:
	.endm
ASTXTK .MACRO 
	.word	AsTXTK
	.endm
ASLAB .MACRO 	a
	.word	AsLAB,:a:
	.endm
ASLABR .MACRO 	a,b
	.word	AsLABR,:a:,:b:
	.endm
ASDSJ .MACRO 
	.word	AsDSJ
	.endm
ASDSJS1 .MACRO 
	.word	AsDSJS1
	.endm
ASJMP .MACRO 	a
	.word	AsJMP
	.long	:a:
	.endm
ASJMPR .MACRO 	a,b
	.word	AsJMPR
	.long	:b:
	.word	:a:
	.endm
ASJMPEQ .MACRO 	a,b,c
	.word	AsJMPEQ
	.long	:b:,:c:
	.word	:a:
	.endm
ASJMPNE .MACRO 	a,b,c
	.word	AsJMPNE
	.long	:b:,:c:
	.word	:a:
	.endm
ASRUN .MACRO 	a
	.word	AsRUN
	.long	:a:
	.endm
ASRUNI .MACRO 	a,b
	.word	AsRUNI
	.long	:a:
	.word	:b:
	.endm
ASCRE .MACRO 	a,b
	.word	AsCRE
	.long	:a:,:b:
	.endm
ASKIL .MACRO 	a,b
	.word	AsKIL,:a:,:b:
	.endm
ASASM .MACRO 
	.word	AsASM
	.endm
ASENDASM .MACRO 
	exgpc	a8
	.endm
ASSND .MACRO 	a
	.word	AsSND
	.long	:a:
	.endm
ASSNDD .MACRO 	a
	.word	AsSNDD
	.long	:a:
	.endm
ASADDW .MACRO 	a,b
	.word	AsADDW
	.long	:b:
	.word	:a:
	.endm
ASADDWO .MACRO 	a,b
	.word	AsADDWO,:a:,:b:
	.endm
ASADDLO .MACRO 	a,b
	.word	AsADDLO
	.long	:a:
	.word	:b:
	.endm
ASADLVO .MACRO 	a
	.word	AsADLVO,:a:
	.endm
ASSVRL .MACRO 	a,b
	.word	AsSVRL
	.long	:a:,:b:
	.endm
ASSVRLT .MACRO 	a
	.word	AsSVRLT
	.long	:a:
	.endm
ASSVL .MACRO 	a
	.word	AsSVL
	.long	:a:
	.endm
ASEND .MACRO 
	.word	-32
	.endm
SWAP .MACRO  R1,R2
	xor    :R1.S:,:R2.S:
	xor    :R2.S:,:R1.S:
	xor    :R1.S:,:R2.S:
	.endm
TEST .MACRO  R1
	MOVE	:R1.S:,:R1.S:
	.endm
JRXEQ .MACRO 	P1
	JRXZ	P1.S
	.endm
JRXNE .MACRO 	P1
	JRXNZ	P1.S
	.endm
JRXGE .MACRO 	P1
	JRXNN	P1.S
	.endm
JRXLT .MACRO 	P1
	JRXN	P1.S
	.endm
JRYEQ .MACRO 	P1
	JRYZ	P1.S
	.endm
JRYNE .MACRO 	P1
	JRYNZ	P1.S
	.endm
JRYGE .MACRO 	P1
	JRYNN	P1.S
	.endm
JRYLT .MACRO 	P1
	JRYN	P1.S
	.endm
SOUND1 .MACRO  S
	movi	:S:,a0
	calla	snd_play1
	.endm
CALLERR .MACRO 	NUM,REGS
	mmtm	sp,a1,a2
	move	*sp((:REGS:+2)*20H),a1,L
	movi	:NUM:,a2
	calla	ERRORLOG	
	mmfm	sp,a1,a2
	.endm
WAITSWITCH_DWN .MACRO 	SWITCHES,FAILADDR,MASK

lp?
	SLEEPK	1
	dec	a11
	jrz	:FAILADDR:

;	move	*a8(SPECIAL_MOVE_ADDR),a0,L
;	jrnz	:FAILADDR:
;	move	*a8(BUT_VAL_DOWN),a0
;	move	*a8(BUT_VAL_CUR),a0

	move	*a8,a0
	andni	:MASK:,a0
	jrz	lp?
	cmpi	:SWITCHES:,a0
	jrne	:FAILADDR:

	.endm
SEQ .MACRO 	n,d
:n:	.equ	SOFF
	.eval	SOFF+1,SOFF
	.if	SEQT
	.long	:d:
	.endif
	.endm
SEQG .MACRO 	n,d
	.global	:d:
:n:	.equ	SOFF
	.eval	SOFF+1,SOFF
	.if	SEQT
	.long	:d:
	.endif
	.endm
