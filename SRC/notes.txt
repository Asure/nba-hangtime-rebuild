Notes on Hangtime work.
-----------------------

22-05-2023 Notes started.

Todo:
- Fix images /lod etc. write a bat file.
- preasm.exe replacement.. :(

Findings:
arc/D3.asm seems to hold battlezone game?
robo.asm is robotron. Seems they wanted to include this at some point. Same with WWF, it never got included?
SRC seems to be Max Hangtime l1/m1 1.0, not sure yet.
util.asm seems to hold both JAM and TE security tables (#sec_t). (usefull if we want to hack TE to run on Jam boards and vice versa.)
there is a octopus bypass 'dip' btst 5,a0 'ck_octopus2' in attract.asm

Assemblings:
assembling diag.asm: Seems to be OK, after fixer python :)
assembling unzip.asm

     156 00000090     cbf6          jrnz    p2
 *********  AN IDENTIFIER IN THE EXPRESSION IS INVALID

     158                    #p2
 *********  ILLEGAL LABEL

- They have labels starting with # in the code.
- They have labels starting with # that are duplicates
- They have routines like jrnz #label. 
- But sometimes they don't use the #label in the jrnz or djsj.. mweh
- The GSPA assembler does not like jrnz #label things.
- The GSPA assembler does not like #label as a start of a routine.
- SUBR macro = .def name\n  + .even\n + name (defs the routine name and aligns on even byte) (for basic subroutine)
- SUBRP macro = .even\n +name (just aligns the routine on even byte) (for process with mproc / CREATE macro.)
- I think we can scan inside blocks of 'SUBR' and 'SUBRP' e.g. from start of subrp to the next subrp or subr, and fix up labels.
- There are some random stray #labels outside of subrp / subr blocks.

From attract.asm:

stray #slp label
SUBR amode_start
SUBRP ubrp amode
non-subrp/subr 'amode_design' (using #lp and others)
non-subrp/subr 'show_title' (using #lp and others)
non-subrp/subr title_scr_mod (using #lp and others)
non-subrp/subr ttl_setscl (using #lp and others)
SUBR	show_operatormsg (using #cmlp
several other routines with no SUBR or SUBRP..
a random #* label!
movi	#title_str_setup,a2,L  (how do we handle this?)
#title_str_setup
	PRINT_STR	brush20_ascii,11,0,200,7,BRSHGYGP,0
movi #tables all seem unique.


Seems to be some logic in labels. The following are observed to be used without leading # to a label, but with a # routine near it.
attract.asm inside SUBR amode_start
jruc
jrn
jrz
jrne
jrnz
jrnc
jsrp
dsj
and then they use jrge and jrgt #dmawt in mproc.asm :(

SOME TE Hacking 4.0
unzip.asm is in TE around 93E8 in flat rom.
sec table is at 0x93ee -> 0x95ed bin  (37870 -> 38381 , 1FF size 511?)
#sec_t
	.long	>00000000
	.long	>04081020   -> 20 10 08 04 in flat rom
	.long	>08102000
	.long	>0C183122
..
	.long	>3F3F3F1F

For JAM 3.01
5EEE -> 5FD5 size 511?
24302 - 24533
#sec_t	.long	021283b3bH	;0
	.long	02439383bH
	.long	031283b3bH
	.long	0302b3938H
	.long	031283b3bH
...
	.long	01a302b11H
	.long	00b31283bH
	.long	00e26383bH			